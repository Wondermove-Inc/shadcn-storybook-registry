{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-story",
  "type": "registry:component",
  "title": "Checkbox Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating checkbox component usage and variants",
  "registryDependencies": [
    "checkbox",
    "label"
  ],
  "files": [
    {
      "path": "src/registry/atoms/checkbox-story/checkbox.stories.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nexport function CheckboxDemo() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"terms\" />\n        <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n      </div>\n      <div className=\"flex items-start gap-3\">\n        <Checkbox id=\"terms-2\" defaultChecked />\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"terms-2\">Accept terms and conditions</Label>\n          <p className=\"text-muted-foreground text-sm\">\n            By clicking this checkbox, you agree to the terms and conditions.\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-start gap-3\">\n        <Checkbox id=\"toggle\" disabled />\n        <Label htmlFor=\"toggle\">Enable notifications</Label>\n      </div>\n      <Label className=\"hover:bg-accent/50 flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50 dark:has-[[aria-checked=true]]:border-blue-900 dark:has-[[aria-checked=true]]:bg-blue-950\">\n        <Checkbox\n          id=\"toggle-2\"\n          defaultChecked\n          className=\"data-[state=checked]:border-blue-600 data-[state=checked]:bg-blue-600 data-[state=checked]:text-white dark:data-[state=checked]:border-blue-700 dark:data-[state=checked]:bg-blue-700\"\n        />\n        <div className=\"grid gap-1.5 font-normal\">\n          <p className=\"text-sm leading-none font-medium\">\n            Enable notifications\n          </p>\n          <p className=\"text-muted-foreground text-sm\">\n            You can enable or disable notifications at any time.\n          </p>\n        </div>\n      </Label>\n    </div>\n  );\n}\n\n/**\n * A control that allows the user to toggle between checked and not checked.\n */\nconst meta = {\n  title: \"ui/Checkbox\",\n  component: Checkbox,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    defaultChecked: false,\n    disabled: false,\n    onCheckedChange: fn(),\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Checkbox>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the checkbox.\n */\nexport const Default: Story = {};\n\n/**\n * Checkbox in checked state.\n */\nexport const DefaultChecked: Story = {\n  args: {\n    defaultChecked: true,\n  },\n};\n\n/**\n * Disabled checkbox.\n */\nexport const DefaultDisabled: Story = {\n  args: {\n    disabled: true,\n  },\n};\n\n/**\n * Basic checkbox with label.\n */\nexport const Basic: Story = {\n  render: () => (\n    <div className=\"flex items-center gap-3\">\n      <Checkbox id=\"terms\" />\n      <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n    </div>\n  ),\n};\n\n/**\n * Checkbox with default checked state.\n */\nexport const Checked: Story = {\n  render: () => (\n    <div className=\"flex items-start gap-3\">\n      <Checkbox id=\"terms-2\" defaultChecked />\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"terms-2\">Accept terms and conditions</Label>\n        <p className=\"text-muted-foreground text-sm\">\n          By clicking this checkbox, you agree to the terms and conditions.\n        </p>\n      </div>\n    </div>\n  ),\n};\n\n/**\n * Disabled checkbox.\n */\nexport const Disabled: Story = {\n  render: () => (\n    <div className=\"flex items-start gap-3\">\n      <Checkbox id=\"toggle\" disabled />\n      <Label htmlFor=\"toggle\">Enable notifications</Label>\n    </div>\n  ),\n};\n\n/**\n * Custom styled checkbox with card-like appearance.\n */\nexport const WithCard: Story = {\n  render: () => (\n    <Label className=\"hover:bg-accent/50 flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50 dark:has-[[aria-checked=true]]:border-blue-900 dark:has-[[aria-checked=true]]:bg-blue-950\">\n      <Checkbox\n        id=\"toggle-2\"\n        defaultChecked\n        className=\"data-[state=checked]:border-blue-600 data-[state=checked]:bg-blue-600 data-[state=checked]:text-white dark:data-[state=checked]:border-blue-700 dark:data-[state=checked]:bg-blue-700\"\n      />\n      <div className=\"grid gap-1.5 font-normal\">\n        <p className=\"text-sm leading-none font-medium\">Enable notifications</p>\n        <p className=\"text-muted-foreground text-sm\">\n          You can enable or disable notifications at any time.\n        </p>\n      </div>\n    </Label>\n  ),\n};\n\n/**\n * Individual checkbox states\n */\nexport const States: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"unchecked\" />\n        <Label htmlFor=\"unchecked\">Unchecked</Label>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"checked\" defaultChecked />\n        <Label htmlFor=\"checked\">Checked</Label>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"disabled-unchecked\" disabled />\n        <Label htmlFor=\"disabled-unchecked\">Disabled Unchecked</Label>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"disabled-checked\" disabled defaultChecked />\n        <Label htmlFor=\"disabled-checked\">Disabled Checked</Label>\n      </div>\n    </div>\n  ),\n};\n\nexport const ShouldToggleCheck: Story = {\n  name: \"when the checkbox is clicked, should toggle between checked and not checked\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <div className=\"flex items-center gap-3\">\n      <Checkbox id=\"test-terms\" />\n      <Label htmlFor=\"test-terms\">Accept terms and conditions</Label>\n    </div>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const checkbox = canvas.getByRole(\"checkbox\");\n    await userEvent.click(checkbox);\n    expect(checkbox).toBeChecked();\n    await userEvent.click(checkbox, { delay: 100 });\n    expect(checkbox).not.toBeChecked();\n    await userEvent.click(checkbox, { delay: 100 });\n    expect(checkbox).toBeChecked();\n  },\n};\n\nexport const ShouldHandleIndeterminateState: Story = {\n  name: \"when parent checkbox is clicked with partial children selection, should show indeterminate state\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [checkedItems, setCheckedItems] = React.useState([\n      true,\n      false,\n      false,\n    ]);\n\n    const allChecked = checkedItems.every(Boolean);\n    const noneChecked = checkedItems.every((item) => !item);\n    const isIndeterminate = !allChecked && !noneChecked;\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex items-center gap-3\">\n          <Checkbox\n            id=\"parent\"\n            checked={isIndeterminate ? \"indeterminate\" : allChecked}\n            onCheckedChange={(checked) => {\n              setCheckedItems([\n                checked === true,\n                checked === true,\n                checked === true,\n              ]);\n            }}\n            data-testid=\"parent-checkbox\"\n          />\n          <Label htmlFor=\"parent\" className=\"font-semibold\">\n            Select All\n          </Label>\n        </div>\n        <div className=\"ml-6 flex flex-col gap-2\">\n          {[\"Option 1\", \"Option 2\", \"Option 3\"].map((label, index) => (\n            <div key={index} className=\"flex items-center gap-3\">\n              <Checkbox\n                id={`child-${index}`}\n                checked={checkedItems[index]}\n                onCheckedChange={(checked) => {\n                  const newItems = [...checkedItems];\n                  newItems[index] = checked === true;\n                  setCheckedItems(newItems);\n                }}\n                data-testid={`child-checkbox-${index}`}\n              />\n              <Label htmlFor={`child-${index}`}>{label}</Label>\n            </div>\n          ))}\n        </div>\n        <div\n          className=\"text-muted-foreground text-sm\"\n          data-testid=\"state-display\"\n        >\n          State:{\" \"}\n          {allChecked\n            ? \"All Selected\"\n            : isIndeterminate\n              ? \"Partially Selected\"\n              : \"None Selected\"}\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: 부모 Checkbox가 자식 Checkbox의 선택 상태에 따라 indeterminate 상태를 올바르게 표시하는지 확인\n\n    const parentCheckbox = canvas.getByTestId(\"parent-checkbox\");\n    const stateDisplay = canvas.getByTestId(\"state-display\");\n\n    // 초기 상태: Option 1만 선택됨 (Partially Selected)\n    await expect(stateDisplay).toHaveTextContent(\"State: Partially Selected\");\n    await expect(parentCheckbox).toHaveAttribute(\"data-state\", \"indeterminate\");\n\n    // Option 2 선택\n    const child1Checkbox = canvas.getByTestId(\"child-checkbox-1\");\n    await userEvent.click(child1Checkbox);\n    await expect(stateDisplay).toHaveTextContent(\"State: Partially Selected\");\n    await expect(parentCheckbox).toHaveAttribute(\"data-state\", \"indeterminate\");\n\n    // Option 3 선택 (모두 선택됨)\n    const child2Checkbox = canvas.getByTestId(\"child-checkbox-2\");\n    await userEvent.click(child2Checkbox);\n    await expect(stateDisplay).toHaveTextContent(\"State: All Selected\");\n    await expect(parentCheckbox).toBeChecked();\n\n    // 부모 Checkbox 클릭으로 모두 선택 해제\n    await userEvent.click(parentCheckbox);\n    await expect(stateDisplay).toHaveTextContent(\"State: None Selected\");\n    await expect(parentCheckbox).not.toBeChecked();\n\n    // Option 1 선택 (다시 Partially Selected)\n    const child0Checkbox = canvas.getByTestId(\"child-checkbox-0\");\n    await userEvent.click(child0Checkbox);\n    await expect(stateDisplay).toHaveTextContent(\"State: Partially Selected\");\n    await expect(parentCheckbox).toHaveAttribute(\"data-state\", \"indeterminate\");\n\n    // 부모 Checkbox 클릭으로 모두 선택\n    await userEvent.click(parentCheckbox);\n    await expect(stateDisplay).toHaveTextContent(\"State: All Selected\");\n    await expect(parentCheckbox).toBeChecked();\n  },\n};\n\nconst items = [\n  {\n    id: \"recents\",\n    label: \"Recents\",\n  },\n  {\n    id: \"home\",\n    label: \"Home\",\n  },\n  {\n    id: \"applications\",\n    label: \"Applications\",\n  },\n  {\n    id: \"desktop\",\n    label: \"Desktop\",\n  },\n  {\n    id: \"downloads\",\n    label: \"Downloads\",\n  },\n  {\n    id: \"documents\",\n    label: \"Documents\",\n  },\n] as const;\n\nconst FormSchema = z.object({\n  items: z.array(z.string()).refine((value) => value.some((item) => item), {\n    message: \"You have to select at least one item.\",\n  }),\n});\n\nfunction CheckboxReactHookFormMultiple() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      items: [\"recents\", \"home\"],\n    },\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"items\"\n          render={() => (\n            <FormItem>\n              <div className=\"mb-4\">\n                <FormLabel className=\"text-base\">Sidebar</FormLabel>\n                <FormDescription>\n                  Select the items you want to display in the sidebar.\n                </FormDescription>\n              </div>\n              {items.map((item) => (\n                <FormField\n                  key={item.id}\n                  control={form.control}\n                  name=\"items\"\n                  render={({ field }) => {\n                    return (\n                      <FormItem\n                        key={item.id}\n                        className=\"flex flex-row items-center gap-2\"\n                      >\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value?.includes(item.id)}\n                            onCheckedChange={(checked) => {\n                              return checked\n                                ? field.onChange([...field.value, item.id])\n                                : field.onChange(\n                                    field.value?.filter(\n                                      (value) => value !== item.id,\n                                    ),\n                                  );\n                            }}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          {item.label}\n                        </FormLabel>\n                      </FormItem>\n                    );\n                  }}\n                />\n              ))}\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\n/**\n * Checkbox with React Hook Form\n */\nexport const WithForm: Story = {\n  render: () => <CheckboxReactHookFormMultiple />,\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "checkbox",
    "form"
  ]
}