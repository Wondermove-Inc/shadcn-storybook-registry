{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel-story",
  "type": "registry:component",
  "title": "Carousel Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating carousel component usage and variants",
  "dependencies": [
    "embla-carousel-react"
  ],
  "registryDependencies": [
    "carousel"
  ],
  "files": [
    {
      "path": "src/registry/atoms/carousel-story/carousel.stories.tsx",
      "content": "import React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\";\n\nexport function CarouselDemo() {\n  return (\n    <Carousel className=\"w-full max-w-xs\">\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index}>\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-4xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}\n\n/**\n * A carousel with motion and swipe built using Embla.\n */\nconst meta = {\n  title: \"ui/Carousel\",\n  component: Carousel,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <CarouselDemo />,\n} satisfies Meta<typeof Carousel>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the carousel.\n */\nexport const Default: Story = {};\n\n/**\n * Carousel with different sized items.\n */\nexport const Sizes: Story = {\n  render: () => (\n    <Carousel\n      opts={{\n        align: \"start\",\n      }}\n      className=\"w-full max-w-sm\"\n    >\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  ),\n};\n\n/**\n * Carousel with custom spacing between items.\n */\nexport const Spacing: Story = {\n  render: () => (\n    <Carousel className=\"w-full max-w-sm\">\n      <CarouselContent className=\"-ml-2 md:-ml-4\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pl-2 md:pl-4\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-2xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  ),\n};\n\n/**\n * Vertical orientation carousel.\n */\nexport const Vertical: Story = {\n  render: () => (\n    <Carousel orientation=\"vertical\" className=\"w-full max-w-xs\">\n      <CarouselContent className=\"-mt-1 h-[200px]\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pt-1 md:basis-1/2\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  ),\n};\n\nexport const ShouldNavigateCarousel: Story = {\n  name: \"when next/previous buttons are clicked, should navigate carousel\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Carousel의 Previous/Next 버튼이 존재하고 클릭 가능한지 확인\n    const previousButton = canvas.getByRole(\"button\", {\n      name: /previous slide/i,\n    });\n    const nextButton = canvas.getByRole(\"button\", { name: /next slide/i });\n\n    // 버튼 존재 확인\n    await expect(previousButton).toBeInTheDocument();\n    await expect(nextButton).toBeInTheDocument();\n\n    // Next 버튼 클릭 (슬라이드 이동)\n    await userEvent.click(nextButton);\n\n    // Previous 버튼 클릭 (슬라이드 이동)\n    await userEvent.click(previousButton);\n\n    // 슬라이드 컨텐츠가 존재하는지 확인\n    const slides = canvas.getAllByText(/\\d+/);\n    await expect(slides.length).toBeGreaterThan(0);\n  },\n};\n\nexport const ShouldChangeSlideOnNavigation: Story = {\n  name: \"when next button is clicked, should display next slide\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <Carousel className=\"w-full max-w-xs\" data-testid=\"carousel\">\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} data-testid={`slide-${index + 1}`}>\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span\n                    className=\"text-4xl font-semibold\"\n                    data-testid={`slide-number-${index + 1}`}\n                  >\n                    {index + 1}\n                  </span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious data-testid=\"prev-button\" />\n      <CarouselNext data-testid=\"next-button\" />\n    </Carousel>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Next/Previous 버튼 클릭 시 실제로 슬라이드가 이동하는지 확인\n\n    // Carousel 존재 확인\n    const carousel = canvas.getByTestId(\"carousel\");\n    await expect(carousel).toBeInTheDocument();\n\n    // Next 버튼 확인\n    const nextButton = canvas.getByTestId(\"next-button\");\n    await expect(nextButton).toBeInTheDocument();\n\n    // Previous 버튼 확인\n    const prevButton = canvas.getByTestId(\"prev-button\");\n    await expect(prevButton).toBeInTheDocument();\n\n    // 첫 번째 슬라이드 확인\n    const firstSlide = canvas.getByTestId(\"slide-number-1\");\n    await expect(firstSlide).toHaveTextContent(\"1\");\n\n    // Next 버튼 클릭 (2번째 슬라이드로 이동)\n    await userEvent.click(nextButton);\n\n    // 2번째 슬라이드가 보이는지 확인\n    const secondSlide = canvas.getByTestId(\"slide-number-2\");\n    await expect(secondSlide).toBeInTheDocument();\n\n    // Next 버튼 다시 클릭 (3번째 슬라이드로 이동)\n    await userEvent.click(nextButton);\n\n    // 3번째 슬라이드가 보이는지 확인\n    const thirdSlide = canvas.getByTestId(\"slide-number-3\");\n    await expect(thirdSlide).toBeInTheDocument();\n\n    // Previous 버튼 클릭 (2번째 슬라이드로 되돌아감)\n    await userEvent.click(prevButton);\n\n    // 2번째 슬라이드가 다시 보이는지 확인\n    await expect(secondSlide).toBeInTheDocument();\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "carousel",
    "slider"
  ]
}