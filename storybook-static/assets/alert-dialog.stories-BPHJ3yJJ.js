import{r as o,e as i}from"./iframe-BiU2suBC.js";import{b as T,B as U}from"./button-o25yRkrR.js";import{a as s}from"./utils-DgWKjmuI.js";import{c as K}from"./index-BT5_MN2X.js";import{u as b,b as J}from"./index-vBP3oNXZ.js";import{c as O,R as Q,T as X,P as Z,W as ee,C as te,b as ae,D as oe,a as I,O as re}from"./index-BZmy0mfy.js";import{c as le}from"./index-Dc_FVRD7.js";import{j as n}from"./jsx-runtime-D_zvdyIk.js";import"./preload-helper-PPVm8Dsz.js";import"./index-dSc6CJZX.js";import"./index-Ds7joiVY.js";import"./index-ynW3WxUC.js";import"./index-CpP8DfwQ.js";import"./index-BX5uZP6s.js";import"./index-DF-uitis.js";import"./index-Bjt_zW8z.js";import"./index-CtYre8eh.js";import"./index-BUJQGk3H.js";import"./index-Dc81zcfA.js";import"./index-B1tj0AfO.js";import"./index-7qFhJqzR.js";var S="AlertDialog",[ne]=K(S,[O]),u=O(),P=e=>{const{__scopeAlertDialog:t,...a}=e,r=u(t);return n.jsx(Q,{...r,...a,modal:!0})};P.displayName=S;var ie="AlertDialogTrigger",j=o.forwardRef((e,t)=>{const{__scopeAlertDialog:a,...r}=e,l=u(a);return n.jsx(X,{...l,...r,ref:t})});j.displayName=ie;var ue="AlertDialogPortal",$=e=>{const{__scopeAlertDialog:t,...a}=e,r=u(t);return n.jsx(Z,{...r,...a})};$.displayName=ue;var se="AlertDialogOverlay",M=o.forwardRef((e,t)=>{const{__scopeAlertDialog:a,...r}=e,l=u(a);return n.jsx(re,{...l,...r,ref:t})});M.displayName=se;var c="AlertDialogContent",[ce,de]=ne(c),Ce=J("AlertDialogContent"),V=o.forwardRef((e,t)=>{const{__scopeAlertDialog:a,children:r,...l}=e,d=u(a),D=o.useRef(null),Y=b(t,D),F=o.useRef(null);return n.jsx(ee,{contentName:c,titleName:k,docsSlug:"alert-dialog",children:n.jsx(ce,{scope:a,cancelRef:F,children:n.jsxs(te,{role:"alertdialog",...d,...l,ref:Y,onOpenAutoFocus:le(l.onOpenAutoFocus,C=>{C.preventDefault(),F.current?.focus({preventScroll:!0})}),onPointerDownOutside:C=>C.preventDefault(),onInteractOutside:C=>C.preventDefault(),children:[n.jsx(Ce,{children:r}),n.jsx(De,{contentRef:D})]})})})});V.displayName=c;var k="AlertDialogTitle",q=o.forwardRef((e,t)=>{const{__scopeAlertDialog:a,...r}=e,l=u(a);return n.jsx(ae,{...l,...r,ref:t})});q.displayName=k;var H="AlertDialogDescription",L=o.forwardRef((e,t)=>{const{__scopeAlertDialog:a,...r}=e,l=u(a);return n.jsx(oe,{...l,...r,ref:t})});L.displayName=H;var pe="AlertDialogAction",z=o.forwardRef((e,t)=>{const{__scopeAlertDialog:a,...r}=e,l=u(a);return n.jsx(I,{...l,...r,ref:t})});z.displayName=pe;var G="AlertDialogCancel",W=o.forwardRef((e,t)=>{const{__scopeAlertDialog:a,...r}=e,{cancelRef:l}=de(G,a),d=u(a),D=b(t,l);return n.jsx(I,{...d,...r,ref:D})});W.displayName=G;var De=({contentRef:e})=>{const t=`\`${c}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${c}\` by passing a \`${H}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${c}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return o.useEffect(()=>{document.getElementById(e.current?.getAttribute("aria-describedby"))||console.warn(t)},[t,e]),null},ge=P,me=j,Ae=$,fe=M,_e=V,ye=z,Be=W,ve=q,Ee=L;const A=ge,f=o.forwardRef((e,t)=>o.createElement(me,{ref:t,"data-slot":"alert-dialog-trigger",...e}));f.displayName="AlertDialogTrigger";const R=Ae,_=o.forwardRef(({className:e,...t},a)=>o.createElement(fe,{ref:a,"data-slot":"alert-dialog-overlay",className:s("data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",e),...t}));_.displayName="AlertDialogOverlay";const y=o.forwardRef(({className:e,...t},a)=>o.createElement(R,null,o.createElement(_,null),o.createElement(_e,{ref:a,"data-slot":"alert-dialog-content",className:s("bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",e),...t})));y.displayName="AlertDialogContent";const B=o.forwardRef(({className:e,...t},a)=>o.createElement("div",{ref:a,"data-slot":"alert-dialog-header",className:s("flex flex-col gap-2 text-center sm:text-left",e),...t}));B.displayName="AlertDialogHeader";const v=o.forwardRef(({className:e,...t},a)=>o.createElement("div",{ref:a,"data-slot":"alert-dialog-footer",className:s("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",e),...t}));v.displayName="AlertDialogFooter";const E=o.forwardRef(({className:e,...t},a)=>o.createElement(ve,{ref:a,"data-slot":"alert-dialog-title",className:s("text-lg font-semibold",e),...t}));E.displayName="AlertDialogTitle";const h=o.forwardRef(({className:e,...t},a)=>o.createElement(Ee,{ref:a,"data-slot":"alert-dialog-description",className:s("text-muted-foreground text-sm",e),...t}));h.displayName="AlertDialogDescription";const w=o.forwardRef(({className:e,...t},a)=>o.createElement(ye,{ref:a,className:s(T(),e),...t}));w.displayName="AlertDialogAction";const N=o.forwardRef(({className:e,...t},a)=>o.createElement(Be,{ref:a,className:s(T({variant:"outline"}),e),...t}));N.displayName="AlertDialogCancel";try{A.displayName="AlertDialog",A.__docgenInfo={description:`🎯 목적: AlertDialog Root 컴포넌트
📝 주의사항: Radix UI AlertDialog.Root primitive는 ref를 지원하지 않음`,displayName:"AlertDialog",props:{}}}catch{}try{w.displayName="AlertDialogAction",w.__docgenInfo={description:`🎯 목적: AlertDialogAction 컴포넌트에 forwardRef 적용
📝 주의사항: buttonVariants 기본 스타일 사용`,displayName:"AlertDialogAction",props:{asChild:{defaultValue:null,description:"",name:"asChild",required:!1,type:{name:"boolean | undefined"}}}}}catch{}try{N.displayName="AlertDialogCancel",N.__docgenInfo={description:`🎯 목적: AlertDialogCancel 컴포넌트에 forwardRef 적용
📝 주의사항: buttonVariants outline 스타일 사용`,displayName:"AlertDialogCancel",props:{asChild:{defaultValue:null,description:"",name:"asChild",required:!1,type:{name:"boolean | undefined"}}}}}catch{}try{y.displayName="AlertDialogContent",y.__docgenInfo={description:`🎯 목적: AlertDialogContent 컴포넌트에 forwardRef 적용
📝 주의사항: Portal 내부에서 Overlay와 함께 렌더링, 중앙 배치`,displayName:"AlertDialogContent",props:{asChild:{defaultValue:null,description:"",name:"asChild",required:!1,type:{name:"boolean | undefined"}}}}}catch{}try{h.displayName="AlertDialogDescription",h.__docgenInfo={description:"🎯 목적: AlertDialogDescription 컴포넌트에 forwardRef 적용",displayName:"AlertDialogDescription",props:{asChild:{defaultValue:null,description:"",name:"asChild",required:!1,type:{name:"boolean | undefined"}}}}}catch{}try{v.displayName="AlertDialogFooter",v.__docgenInfo={description:`🎯 목적: AlertDialogFooter 컴포넌트에 forwardRef 적용
📝 주의사항: HTML div 요소 사용`,displayName:"AlertDialogFooter",props:{}}}catch{}try{B.displayName="AlertDialogHeader",B.__docgenInfo={description:`🎯 목적: AlertDialogHeader 컴포넌트에 forwardRef 적용
📝 주의사항: HTML div 요소 사용`,displayName:"AlertDialogHeader",props:{}}}catch{}try{_.displayName="AlertDialogOverlay",_.__docgenInfo={description:`🎯 목적: AlertDialogOverlay 컴포넌트에 forwardRef 적용
📝 주의사항: 배경 어둡게 처리 (bg-black/50), 애니메이션 적용`,displayName:"AlertDialogOverlay",props:{asChild:{defaultValue:null,description:"",name:"asChild",required:!1,type:{name:"boolean | undefined"}}}}}catch{}try{R.displayName="AlertDialogPortal",R.__docgenInfo={description:`🎯 목적: AlertDialogPortal 컴포넌트
📝 주의사항: Portal은 ref를 지원하지 않음`,displayName:"AlertDialogPortal",props:{}}}catch{}try{E.displayName="AlertDialogTitle",E.__docgenInfo={description:"🎯 목적: AlertDialogTitle 컴포넌트에 forwardRef 적용",displayName:"AlertDialogTitle",props:{asChild:{defaultValue:null,description:"",name:"asChild",required:!1,type:{name:"boolean | undefined"}}}}}catch{}try{f.displayName="AlertDialogTrigger",f.__docgenInfo={description:"🎯 목적: AlertDialogTrigger 컴포넌트에 forwardRef 적용",displayName:"AlertDialogTrigger",props:{asChild:{defaultValue:null,description:"",name:"asChild",required:!1,type:{name:"boolean | undefined"}}}}}catch{}const{expect:g,userEvent:x,waitFor:he,within:we}=__STORYBOOK_MODULE_TEST__;function Ne(){return i.createElement(A,null,i.createElement(f,{asChild:!0},i.createElement(U,{variant:"outline"},"Show Dialog")),i.createElement(y,null,i.createElement(B,null,i.createElement(E,null,"Are you absolutely sure?"),i.createElement(h,null,"This action cannot be undone. This will permanently delete your account and remove your data from our servers.")),i.createElement(v,null,i.createElement(N,null,"Cancel"),i.createElement(w,null,"Continue"))))}const Ue={title:"ui/AlertDialog",component:A,tags:["autodocs"],parameters:{layout:"centered",docs:{description:{component:`A modal dialog that interrupts the user with important content and expects
a response.`}}},excludeStories:/.*Demo$/,render:()=>i.createElement(Ne,null)},p={},m={name:"when trigger is clicked, should open dialog and allow cancel/continue",tags:["!dev","!autodocs"],play:async({canvasElement:e})=>{const t=we(e),a=t.getByRole("button",{name:/show dialog/i});await g(a).toBeInTheDocument(),await x.click(a),await he(async()=>{const d=await t.findByRole("heading",{name:/are you absolutely sure/i});await g(d).toBeInTheDocument()});const r=t.getByRole("button",{name:/cancel/i});await g(r).toBeInTheDocument();const l=t.getByRole("button",{name:/continue/i});await g(l).toBeInTheDocument(),await x.click(r)}};p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:"{}",...p.parameters?.docs?.source},description:{story:"The default form of the alert dialog.",...p.parameters?.docs?.description}}};m.parameters={...m.parameters,docs:{...m.parameters?.docs,source:{originalSource:`{
  name: "when trigger is clicked, should open dialog and allow cancel/continue",
  tags: ["!dev", "!autodocs"],
  play: async ({
    canvasElement
  }) => {
    const canvas = within(canvasElement);

    // 🎯 목적: Alert Dialog가 트리거 버튼 클릭으로 열리고, Cancel/Continue 버튼이 동작하는지 확인
    const triggerButton = canvas.getByRole("button", {
      name: /show dialog/i
    });
    await expect(triggerButton).toBeInTheDocument();

    // 트리거 버튼 클릭하여 다이얼로그 열기
    await userEvent.click(triggerButton);

    // 다이얼로그가 열렸는지 확인
    await waitFor(async () => {
      const dialogTitle = await canvas.findByRole("heading", {
        name: /are you absolutely sure/i
      });
      await expect(dialogTitle).toBeInTheDocument();
    });

    // Cancel 버튼 확인
    const cancelButton = canvas.getByRole("button", {
      name: /cancel/i
    });
    await expect(cancelButton).toBeInTheDocument();

    // Continue 버튼 확인
    const continueButton = canvas.getByRole("button", {
      name: /continue/i
    });
    await expect(continueButton).toBeInTheDocument();

    // Cancel 버튼 클릭 (다이얼로그 닫기)
    await userEvent.click(cancelButton);
  }
}`,...m.parameters?.docs?.source}}};const Ke=["AlertDialogDemo","Default","ShouldOpenAndCloseDialog"];export{Ne as AlertDialogDemo,p as Default,m as ShouldOpenAndCloseDialog,Ke as __namedExportsOrder,Ue as default};
