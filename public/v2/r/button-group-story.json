{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-group-story",
  "type": "registry:component",
  "title": "Button Group Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating button group component with nested groups and various layouts",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button-group",
    "button",
    "select",
    "dropdown-menu",
    "input",
    "input-group",
    "popover",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/registry/atoms/button-group-story/button-group.stories.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  ButtonGroup,\n  ButtonGroupSeparator,\n} from \"@/components/ui/button-group\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButton,\n  InputGroupInput,\n} from \"@/components/ui/input-group\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport {\n  ArrowLeft,\n  ArrowRight,\n  AudioLines,\n  ChevronDown,\n  Minus,\n  Plus,\n  Search,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\n/**\n * A container that groups related buttons together.\n * Automatically applies styling for grouped buttons and manages layout.\n */\nconst meta = {\n  title: \"ui/ButtonGroup\",\n  component: ButtonGroup,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof ButtonGroup>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 사용법입니다.\n * 두 개의 버튼을 그룹화합니다.\n */\nexport const BasicUsage: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"outline\">Button 1</Button>\n      <Button variant=\"outline\">Button 2</Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 수직 방향의 버튼 그룹입니다.\n * 증가/감소 컨트롤에 적합합니다.\n */\nexport const Orientation: Story = {\n  render: () => (\n    <ButtonGroup\n      orientation=\"vertical\"\n      aria-label=\"Media controls\"\n      className=\"h-fit\"\n    >\n      <Button variant=\"outline\" size=\"icon\">\n        <Plus />\n      </Button>\n      <Button variant=\"outline\" size=\"icon\">\n        <Minus />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 다양한 크기의 버튼 그룹입니다.\n * 작은 크기와 아이콘 버튼을 함께 사용합니다.\n */\nexport const Size: Story = {\n  render: () => (\n    <div className=\"flex flex-col items-start gap-4\">\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"sm\">\n          Small\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          Button\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          Group\n        </Button>\n        <Button variant=\"outline\" size=\"icon-sm\">\n          <Plus />\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\">Default</Button>\n        <Button variant=\"outline\">Button</Button>\n        <Button variant=\"outline\">Group</Button>\n        <Button variant=\"outline\" size=\"icon\">\n          <Plus />\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"lg\">\n          Large\n        </Button>\n        <Button variant=\"outline\" size=\"lg\">\n          Button\n        </Button>\n        <Button variant=\"outline\" size=\"lg\">\n          Group\n        </Button>\n        <Button variant=\"outline\" size=\"icon-lg\">\n          <Plus />\n        </Button>\n      </ButtonGroup>\n    </div>\n  ),\n};\n\n/**\n * 중첩된 버튼 그룹입니다.\n * 페이지네이션 컨트롤에 유용합니다.\n */\nexport const Nested: Story = {\n  render: () => (\n    <ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"sm\">\n          1\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          2\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          3\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          4\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          5\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"icon-sm\" aria-label=\"Previous\">\n          <ArrowLeft />\n        </Button>\n        <Button variant=\"outline\" size=\"icon-sm\" aria-label=\"Next\">\n          <ArrowRight />\n        </Button>\n      </ButtonGroup>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 구분자를 포함한 버튼 그룹입니다.\n * Copy와 Paste 버튼 사이에 구분선을 표시합니다.\n */\nexport const Separator: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"secondary\" size=\"sm\">\n        Copy\n      </Button>\n      <ButtonGroupSeparator />\n      <Button variant=\"secondary\" size=\"sm\">\n        Paste\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 분할 버튼 예제입니다.\n * 메인 버튼과 아이콘 버튼을 구분합니다.\n */\nexport const Split: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"secondary\">Button</Button>\n      <ButtonGroupSeparator />\n      <Button variant=\"secondary\" size=\"icon\">\n        <Plus />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * Input과 함께 사용하는 버튼 그룹입니다.\n * 검색 UI에 적합합니다.\n */\nexport const WithInput: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Input placeholder=\"Search...\" />\n      <Button variant=\"outline\" aria-label=\"Search\">\n        <Search />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * Input Group 예제입니다.\n * 복잡한 입력 필드와 버튼을 그룹화합니다.\n */\nexport const InputGroupExample: Story = {\n  render: () => {\n    const [voiceEnabled, setVoiceEnabled] = React.useState(false);\n\n    return (\n      <TooltipProvider>\n        <ButtonGroup className=\"[--radius:9999rem]\">\n          <ButtonGroup>\n            <Button variant=\"outline\" size=\"icon\">\n              <Plus />\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup>\n            <InputGroup>\n              <InputGroupInput\n                placeholder={\n                  voiceEnabled\n                    ? \"Record and send audio...\"\n                    : \"Send a message...\"\n                }\n                disabled={voiceEnabled}\n              />\n              <InputGroupAddon align=\"inline-end\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <InputGroupButton\n                      onClick={() => setVoiceEnabled(!voiceEnabled)}\n                      size=\"icon-xs\"\n                      data-active={voiceEnabled}\n                      className=\"data-[active=true]:bg-accent data-[active=true]:text-accent-foreground\"\n                    >\n                      <AudioLines />\n                    </InputGroupButton>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    {voiceEnabled ? \"Disable voice\" : \"Enable voice\"}\n                  </TooltipContent>\n                </Tooltip>\n              </InputGroupAddon>\n            </InputGroup>\n          </ButtonGroup>\n        </ButtonGroup>\n      </TooltipProvider>\n    );\n  },\n};\n\n/**\n * Dropdown Menu와 함께 사용하는 버튼 그룹입니다.\n * 분할 버튼 패턴에 드롭다운을 추가합니다.\n */\nexport const WithDropdownMenu: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"outline\">Follow</Button>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"!pl-2\">\n            <ChevronDown />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"[--radius:1rem]\">\n          <DropdownMenuItem>\n            <span>Mute Conversation</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <span>Mark as Read</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <span>Report Conversation</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <span>Block User</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <span>Share Conversation</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <span>Copy Conversation</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * Select와 함께 사용하는 버튼 그룹입니다.\n * 페이지 크기 선택에 유용합니다.\n */\nexport const WithSelect: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Select defaultValue=\"10\">\n        <SelectTrigger className=\"w-[80px]\">\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"10\">10</SelectItem>\n          <SelectItem value=\"20\">20</SelectItem>\n          <SelectItem value=\"50\">50</SelectItem>\n          <SelectItem value=\"100\">100</SelectItem>\n        </SelectContent>\n      </Select>\n      <Button variant=\"secondary\">Apply</Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * Popover와 함께 사용하는 버튼 그룹입니다.\n * 추가 설정이나 정보를 표시할 때 유용합니다.\n */\nexport const WithPopover: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"outline\">Action</Button>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\" size=\"icon\">\n            <ChevronDown />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-80\">\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium\">Advanced Settings</h4>\n            <p className=\"text-muted-foreground text-sm\">\n              Configure advanced options for this action.\n            </p>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </ButtonGroup>\n  ),\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "button-group",
    "buttons"
  ]
}