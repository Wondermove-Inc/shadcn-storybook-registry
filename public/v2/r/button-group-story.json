{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-group-story",
  "type": "registry:component",
  "title": "Button Group Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating button group component with nested groups and various layouts",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button-group",
    "button",
    "select"
  ],
  "files": [
    {
      "path": "src/registry/atoms/button-group-story/button-group.stories.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  ButtonGroup,\n  ButtonGroupSeparator,\n  ButtonGroupText,\n} from \"@/components/ui/button-group\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { ArrowLeft, ArrowRight, Minus, Plus } from \"lucide-react\";\n\n/**\n * A container that groups related buttons together.\n * Automatically applies styling for grouped buttons and manages layout.\n */\nconst meta = {\n  title: \"ui/ButtonGroup\",\n  component: ButtonGroup,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof ButtonGroup>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 버튼 그룹입니다.\n * 관련된 버튼들을 시각적으로 그룹화합니다.\n */\nexport const BasicUsage: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button>Button 1</Button>\n      <Button>Button 2</Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 수직 방향의 버튼 그룹입니다.\n * 증가/감소 컨트롤에 적합합니다.\n */\nexport const Orientation: Story = {\n  render: () => (\n    <ButtonGroup orientation=\"vertical\">\n      <Button variant=\"outline\" size=\"icon\">\n        <Plus />\n      </Button>\n      <Button variant=\"outline\" size=\"icon\">\n        <Minus />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 다양한 크기의 버튼 그룹입니다.\n * 작은 크기의 버튼과 아이콘 버튼을 포함합니다.\n */\nexport const SizeVariations: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"outline\" size=\"sm\">\n        Small\n      </Button>\n      <Button variant=\"outline\" size=\"sm\">\n        Button\n      </Button>\n      <Button variant=\"outline\" size=\"sm\">\n        Group\n      </Button>\n      <Button variant=\"outline\" size=\"icon-sm\">\n        <Plus />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 중첩된 버튼 그룹입니다.\n * 페이지네이션 컨트롤에 유용합니다.\n */\nexport const NestedGroups: Story = {\n  render: () => (\n    <ButtonGroup>\n      <ButtonGroup>\n        <Button size=\"sm\">1</Button>\n        <Button size=\"sm\">2</Button>\n        <Button size=\"sm\">3</Button>\n        <Button size=\"sm\">4</Button>\n        <Button size=\"sm\">5</Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button size=\"icon-sm\">\n          <ArrowLeft />\n        </Button>\n        <Button size=\"icon-sm\">\n          <ArrowRight />\n        </Button>\n      </ButtonGroup>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 구분자를 포함한 버튼 그룹입니다.\n * Copy와 Paste 버튼 사이에 구분선을 표시합니다.\n */\nexport const Separator: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"secondary\" size=\"sm\">\n        Copy\n      </Button>\n      <ButtonGroupSeparator />\n      <Button variant=\"secondary\" size=\"sm\">\n        Paste\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 분할 버튼 예제입니다.\n * 메인 버튼과 드롭다운 트리거를 구분합니다.\n */\nexport const SplitButton: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"secondary\">Button</Button>\n      <ButtonGroupSeparator />\n      <Button size=\"icon\" variant=\"secondary\">\n        <Plus />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 입력 필드와 함께 사용하는 버튼 그룹입니다.\n * Select 컴포넌트와 버튼을 결합합니다.\n */\nexport const WithInput: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Select>\n        <SelectTrigger className=\"w-[100px]\">\n          <SelectValue placeholder=\"10\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"10\">10</SelectItem>\n          <SelectItem value=\"20\">20</SelectItem>\n          <SelectItem value=\"50\">50</SelectItem>\n          <SelectItem value=\"100\">100</SelectItem>\n        </SelectContent>\n      </Select>\n      <Button variant=\"secondary\">Apply</Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 페이지네이션에 텍스트를 포함한 예제입니다.\n * ButtonGroupText 컴포넌트를 사용합니다.\n */\nexport const Pagination: Story = {\n  render: () => (\n    <ButtonGroup>\n      <ButtonGroupText>Page</ButtonGroupText>\n      <Button size=\"icon-sm\">\n        <ArrowLeft />\n      </Button>\n      <Button size=\"sm\">1</Button>\n      <Button size=\"sm\">2</Button>\n      <Button size=\"sm\">3</Button>\n      <Button size=\"icon-sm\">\n        <ArrowRight />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "button-group",
    "buttons"
  ]
}