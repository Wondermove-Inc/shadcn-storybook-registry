{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-group-story",
  "type": "registry:component",
  "title": "Button Group Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating button group component with nested groups and various layouts",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button-group",
    "button",
    "dropdown-menu",
    "select"
  ],
  "files": [
    {
      "path": "src/registry/atoms/button-group-story/button-group.stories.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  ButtonGroup,\n  ButtonGroupSeparator,\n  ButtonGroupText,\n} from \"@/components/ui/button-group\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n} from \"@/components/ui/select\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport {\n  ArchiveIcon,\n  ArrowLeftIcon,\n  CalendarPlusIcon,\n  ClipboardIcon,\n  ClockIcon,\n  Copy,\n  ListFilterPlusIcon,\n  MailCheckIcon,\n  MinusIcon,\n  MoreHorizontalIcon,\n  PlusIcon,\n  TagIcon,\n  Trash2Icon,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\n/**\n * A container that groups related buttons together.\n * Automatically applies styling for grouped buttons and manages layout.\n */\nconst meta = {\n  title: \"ui/ButtonGroup\",\n  component: ButtonGroup,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof ButtonGroup>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 버튼 그룹입니다.\n * 관련된 버튼들을 시각적으로 그룹화합니다.\n */\nexport const Default: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"outline\">Button 1</Button>\n      <Button variant=\"outline\">Button 2</Button>\n      <Button variant=\"outline\">Button 3</Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * ButtonGroupDemo 예제입니다.\n * 중첩된 버튼 그룹과 드롭다운 메뉴를 포함한 복잡한 레이아웃을 보여줍니다.\n */\nexport const Demo: Story = {\n  render: function ButtonGroupDemo() {\n    const [label, setLabel] = React.useState(\"personal\");\n\n    return (\n      <ButtonGroup>\n        <ButtonGroup className=\"hidden sm:flex\">\n          <Button variant=\"outline\" size=\"icon\" aria-label=\"Go Back\">\n            <ArrowLeftIcon />\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup>\n          <Button variant=\"outline\">Archive</Button>\n          <Button variant=\"outline\">Report</Button>\n        </ButtonGroup>\n        <ButtonGroup>\n          <Button variant=\"outline\">Snooze</Button>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"icon\" aria-label=\"More Options\">\n                <MoreHorizontalIcon />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-52\">\n              <DropdownMenuGroup>\n                <DropdownMenuItem>\n                  <MailCheckIcon />\n                  Mark as read\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <ListFilterPlusIcon />\n                  Add to filter\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <ClockIcon />\n                  Snooze until\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <CalendarPlusIcon />\n                  Create event\n                </DropdownMenuItem>\n              </DropdownMenuGroup>\n              <DropdownMenuSeparator />\n              <DropdownMenuSub>\n                <DropdownMenuSubTrigger>\n                  <TagIcon />\n                  Apply label\n                </DropdownMenuSubTrigger>\n                <DropdownMenuSubContent>\n                  <DropdownMenuRadioGroup\n                    value={label}\n                    onValueChange={setLabel}\n                  >\n                    <DropdownMenuRadioItem value=\"work\">\n                      Work\n                    </DropdownMenuRadioItem>\n                    <DropdownMenuRadioItem value=\"personal\">\n                      Personal\n                    </DropdownMenuRadioItem>\n                    <DropdownMenuRadioItem value=\"important\">\n                      Important\n                    </DropdownMenuRadioItem>\n                    <DropdownMenuRadioItem value=\"later\">\n                      Later\n                    </DropdownMenuRadioItem>\n                  </DropdownMenuRadioGroup>\n                </DropdownMenuSubContent>\n              </DropdownMenuSub>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem className=\"text-destructive\">\n                <Trash2Icon />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </ButtonGroup>\n      </ButtonGroup>\n    );\n  },\n};\n\n/**\n * 수직 방향의 버튼 그룹입니다.\n * 미디어 컨트롤이나 수량 조절에 유용합니다.\n */\nexport const Vertical: Story = {\n  render: () => (\n    <ButtonGroup\n      orientation=\"vertical\"\n      aria-label=\"Media controls\"\n      className=\"h-fit\"\n    >\n      <Button variant=\"outline\" size=\"icon\">\n        <PlusIcon />\n      </Button>\n      <Button variant=\"outline\" size=\"icon\">\n        <MinusIcon />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 구분자를 포함한 버튼 그룹입니다.\n * 버튼 사이에 시각적 구분을 제공합니다.\n */\nexport const WithSeparator: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"secondary\" size=\"sm\">\n        Copy\n      </Button>\n      <ButtonGroupSeparator />\n      <Button variant=\"secondary\" size=\"sm\">\n        Paste\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 다양한 크기의 버튼 그룹입니다.\n * 작은 크기의 버튼을 그룹화할 때 사용합니다.\n */\nexport const SizeVariations: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"sm\">\n          Small\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          Button\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          Group\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\">Default</Button>\n        <Button variant=\"outline\">Button</Button>\n        <Button variant=\"outline\">Group</Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"lg\">\n          Large\n        </Button>\n        <Button variant=\"outline\" size=\"lg\">\n          Button\n        </Button>\n        <Button variant=\"outline\" size=\"lg\">\n          Group\n        </Button>\n      </ButtonGroup>\n    </div>\n  ),\n};\n\n/**\n * 중첩된 버튼 그룹입니다.\n * 복잡한 레이아웃을 위해 여러 그룹을 함께 사용할 수 있습니다.\n */\nexport const NestedGroups: Story = {\n  render: () => (\n    <ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"sm\">\n          1\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          2\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          3\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          4\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          5\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"outline\" size=\"icon-sm\">\n          <ArrowLeftIcon />\n        </Button>\n        <Button variant=\"outline\" size=\"icon-sm\">\n          <ArrowLeftIcon className=\"rotate-180\" />\n        </Button>\n      </ButtonGroup>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * ButtonGroupText를 포함한 예제입니다.\n * 버튼과 함께 텍스트 정보를 표시할 때 사용합니다.\n */\nexport const WithText: Story = {\n  render: () => (\n    <ButtonGroup>\n      <ButtonGroupText>Page</ButtonGroupText>\n      <Button variant=\"outline\" size=\"icon\">\n        <ArrowLeftIcon />\n      </Button>\n      <Button variant=\"outline\" size=\"sm\">\n        1\n      </Button>\n      <Button variant=\"outline\" size=\"sm\">\n        2\n      </Button>\n      <Button variant=\"outline\" size=\"sm\">\n        3\n      </Button>\n      <Button variant=\"outline\" size=\"icon\">\n        <ArrowLeftIcon className=\"rotate-180\" />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 입력 요소와 함께 사용하는 예제입니다.\n * Select나 다른 입력 컴포넌트와 버튼을 그룹화할 수 있습니다.\n */\nexport const WithInput: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Select defaultValue=\"1\">\n        <SelectTrigger className=\"w-[100px]\">10</SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"1\">10</SelectItem>\n          <SelectItem value=\"2\">20</SelectItem>\n          <SelectItem value=\"3\">50</SelectItem>\n          <SelectItem value=\"4\">100</SelectItem>\n        </SelectContent>\n      </Select>\n      <Button variant=\"outline\">Apply</Button>\n    </ButtonGroup>\n  ),\n};\n\n/**\n * 다양한 변형의 버튼 그룹입니다.\n * secondary, destructive 등 다른 variant와 함께 사용할 수 있습니다.\n */\nexport const Variants: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <ButtonGroup>\n        <Button variant=\"default\">Default</Button>\n        <Button variant=\"default\">Button</Button>\n        <Button variant=\"default\">Group</Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"secondary\">Secondary</Button>\n        <Button variant=\"secondary\">Button</Button>\n        <Button variant=\"secondary\">Group</Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"destructive\">Destructive</Button>\n        <Button variant=\"destructive\">Button</Button>\n        <Button variant=\"destructive\">Group</Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button variant=\"ghost\">Ghost</Button>\n        <ButtonGroupSeparator />\n        <Button variant=\"ghost\">Button</Button>\n        <ButtonGroupSeparator />\n        <Button variant=\"ghost\">Group</Button>\n      </ButtonGroup>\n    </div>\n  ),\n};\n\n/**\n * 아이콘 버튼 그룹입니다.\n * 툴바나 액션 버튼 그룹에 적합합니다.\n */\nexport const IconButtons: Story = {\n  render: () => (\n    <ButtonGroup>\n      <Button variant=\"outline\" size=\"icon\">\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      <Button variant=\"outline\" size=\"icon\">\n        <ClipboardIcon className=\"h-4 w-4\" />\n      </Button>\n      <ButtonGroupSeparator />\n      <Button variant=\"outline\" size=\"icon\">\n        <ArchiveIcon className=\"h-4 w-4\" />\n      </Button>\n      <Button variant=\"outline\" size=\"icon\">\n        <Trash2Icon className=\"h-4 w-4\" />\n      </Button>\n    </ButtonGroup>\n  ),\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "button-group",
    "buttons"
  ]
}