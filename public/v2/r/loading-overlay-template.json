{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "loading-overlay-template",
  "type": "registry:component",
  "title": "Loading Overlay Template",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook template demonstrating global loading overlay with spinner component for application-wide loading states",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "spinner"
  ],
  "files": [
    {
      "path": "src/registry/templates/loading-overlay-template/loading-overlay-template.stories.tsx",
      "content": "import React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { LoadingOverlay } from \"@/components/ui/loading-overlay\";\n\n/**\n * LoadingOverlay 템플릿은 전체 화면 로딩 상태를 표시하는 데 사용됩니다.\n * shadcn/ui Spinner 컴포넌트와 심플한 배경 딤드를 활용한 심플하고 일관성 있는 디자인입니다.\n *\n * 🎯 목적: 애플리케이션 전체에서 일관된 로딩 상태 표시\n * ✨ 특징: Context API 기반 글로벌 상태 관리, useLoading 훅 제공\n *\n * 📦 설치 방법:\n * 이 컴포넌트는 shadcn/ui 공식 컴포넌트가 아닌 커스텀 레지스트리의 컴포넌트입니다.\n * 팀/프로젝트 내에서 공유 가능한 커스텀 컴포넌트로, shadcn CLI와 호환되는 형식으로 제작되었습니다.\n *\n * ```bash\n * # 커스텀 레지스트리에서 설치\n * npx shadcn@latest add https://registry.lloydrichards.dev/v2/r/loading-overlay-template.json\n *\n * # 로컬 개발 시 테스트\n * npx shadcn@latest add http://localhost:3000/v2/r/loading-overlay-template.json\n * ```\n */\nconst meta: Meta<typeof LoadingOverlay> = {\n  title: \"templates/LoadingOverlay\",\n  component: LoadingOverlay,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"fullscreen\",\n    docs: {\n      description: {\n        component: `\n글로벌 로딩 상태 관리를 위한 LoadingOverlay 템플릿입니다. LoadingProvider와 useLoading 훅을 통해 애플리케이션 전체에서 일관된 로딩 상태를 제공합니다.\n\n## 📦 설치 방법\n\n이 컴포넌트는 **shadcn/ui 공식 컴포넌트가 아닌** 커스텀 레지스트리의 컴포넌트입니다.\n팀/프로젝트 내에서 공유 가능한 커스텀 컴포넌트로, shadcn CLI와 호환되는 형식으로 제작되었습니다.\n\n\\`\\`\\`bash\n# 커스텀 레지스트리에서 설치\nnpx shadcn@latest add https://registry.lloydrichards.dev/v2/r/loading-overlay-template.json\n\n# 로컬 개발 시 테스트\nnpx shadcn@latest add http://localhost:3000/v2/r/loading-overlay-template.json\n\\`\\`\\`\n\n## ✨ 주요 특징\n\n- **검은색 딤드 배경**: Light/Dark 모드 모두 일관된 효과 (bg-black/50)\n- **흰색 스피너**: 테마 변경과 관계없이 일관된 흰색 (text-white)\n- **다양한 크기**: sm, md, lg, xl 4가지 크기 지원\n- **Context API**: 글로벌 상태 관리로 어디서든 사용 가능\n- **접근성**: aria-label과 role 속성으로 스크린 리더 지원\n        `,\n      },\n    },\n  },\n} satisfies Meta<typeof LoadingOverlay>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 LoadingOverlay - 메시지 없이 스피너만 표시\n */\nexport const Default: Story = {\n  render: () => (\n    <div className=\"relative h-screen w-full\">\n      <div className=\"flex h-full items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <h2 className=\"mb-2 text-lg font-semibold\">페이지 콘텐츠</h2>\n          <p className=\"text-muted-foreground text-sm\">\n            로딩 오버레이가 이 콘텐츠 위에 표시됩니다.\n          </p>\n        </div>\n      </div>\n      <LoadingOverlay isVisible={true} />\n    </div>\n  ),\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "templates",
    "storybook",
    "loading",
    "overlay",
    "spinner"
  ]
}