{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-story",
  "type": "registry:component",
  "title": "Input Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating input component usage and variants",
  "registryDependencies": [
    "input",
    "label",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/atoms/input-story/input.stories.tsx",
      "content": "import { expect, fn, userEvent, within } from \"storybook/test\";\n// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useRef } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\n/**\n * Displays a form input field or a component that looks like an input field.\n */\nconst meta = {\n  title: \"ui/Input\",\n  component: Input,\n  tags: [\"autodocs\"],\n  argTypes: {},\n  args: {\n    className: \"w-96\",\n    type: \"email\",\n    placeholder: \"Email\",\n    disabled: false,\n    onChange: fn(),\n  },\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof Input>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the input field.\n */\nexport const Default: Story = {};\n\n/**\n * Use the file type to allow users to select and upload files.\n */\nexport const File: Story = {\n  args: {\n    type: \"file\",\n    placeholder: undefined,\n    className: \"max-w-sm\",\n  },\n  render: (args) => (\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n      <Label htmlFor=\"picture\">Picture</Label>\n      <Input {...args} id=\"picture\" />\n    </div>\n  ),\n};\n\n/**\n * Use the `disabled` prop to make the input non-interactive and appears faded,\n * indicating that input is not currently accepted.\n */\nexport const Disabled: Story = {\n  args: { disabled: true },\n};\n\n/**\n * Use the `Label` component to includes a clear, descriptive label above or\n * alongside the input area to guide users.\n */\nexport const WithLabel: Story = {\n  render: (args) => (\n    <div className=\"grid items-center gap-1.5\">\n      <Label htmlFor=\"email\">{args.placeholder}</Label>\n      <Input {...args} id=\"email\" />\n    </div>\n  ),\n};\n\n/**\n * Use a text element below the input field to provide additional instructions\n * or information to users.\n */\nexport const WithHelperText: Story = {\n  render: (args) => (\n    <div className=\"grid items-center gap-1.5\">\n      <Label htmlFor=\"email-2\">{args.placeholder}</Label>\n      <Input {...args} id=\"email-2\" />\n      <p className=\"text-foreground/60 text-sm\">Enter your email address.</p>\n    </div>\n  ),\n};\n\n/**\n * Use the `Button` component to indicate that the input field can be submitted\n * or used to trigger an action.\n */\nexport const WithButton: Story = {\n  render: (args) => (\n    <div className=\"flex w-full max-w-sm items-center space-x-2\">\n      <Input {...args} />\n      <Button type=\"submit\" variant=\"outline\">\n        Subscribe\n      </Button>\n    </div>\n  ),\n};\n\nexport const ShouldEnterText: Story = {\n  name: \"when user enters text, should see it in the input field\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvas, step }) => {\n    const input = await canvas.findByPlaceholderText(/email/i);\n    const mockedInput = \"mocked@shadcn.com\";\n\n    await step(\"focus and type into the input field\", async () => {\n      await userEvent.click(input);\n      await userEvent.type(input, mockedInput);\n    });\n\n    expect(input).toHaveValue(mockedInput);\n  },\n};\n\n/**\n * Ref 사용 예제: Input에 ref를 전달하여 DOM 요소에 직접 접근합니다.\n * 이 예제는 ref를 통한 focus와 select 제어를 보여줍니다.\n */\nexport const WithRef: Story = {\n  render: () => {\n    // 🎯 목적: HTMLInputElement에 대한 ref를 생성하여 focus()와 select() 메서드 접근\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    return (\n      <div className=\"grid w-full max-w-sm items-center gap-4\">\n        <div className=\"grid items-center gap-1.5\">\n          <Label htmlFor=\"target-input\">Target Input</Label>\n          <Input\n            ref={inputRef}\n            id=\"target-input\"\n            type=\"text\"\n            placeholder=\"Type something...\"\n            defaultValue=\"Example text\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => inputRef.current?.focus()}\n          >\n            Focus Input\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => inputRef.current?.select()}\n          >\n            Select Text\n          </Button>\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 ref 동작을 자동으로 테스트\n    const canvas = within(canvasElement);\n    const input = canvas.getByLabelText(\"Target Input\") as HTMLInputElement;\n    const focusButton = canvas.getByRole(\"button\", { name: \"Focus Input\" });\n    const selectButton = canvas.getByRole(\"button\", { name: \"Select Text\" });\n\n    // \"Focus Input\" 버튼 클릭하여 input에 focus 트리거\n    await userEvent.click(focusButton);\n    await expect(input).toHaveFocus();\n\n    // \"Select Text\" 버튼 클릭하여 텍스트 선택 트리거\n    await userEvent.click(selectButton);\n    await expect(input.selectionStart).toBe(0);\n    await expect(input.selectionEnd).toBe(input.value.length);\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "input",
    "form"
  ]
}