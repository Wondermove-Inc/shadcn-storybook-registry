{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar-form-story",
  "type": "registry:component",
  "title": "Calendar Form Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating calendar integration within React Hook Form with validation",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "react-hook-form",
    "@hookform/resolvers",
    "zod"
  ],
  "registryDependencies": [
    "calendar",
    "form",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/atoms/calendar-form-story/calendar-form.stories.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nconst FormSchema = z.object({\n  dob: z.date({\n    message: \"A date of birth is required.\",\n  }),\n});\n\nconst meta: Meta = {\n  title: \"ui/Calendar/Blocks/Form Integration\",\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: () => {\n    const form = useForm<z.infer<typeof FormSchema>>({\n      resolver: zodResolver(FormSchema),\n    });\n\n    function onSubmit(data: z.infer<typeof FormSchema>) {\n      toast(\"You submitted the following values\", {\n        description: (\n          <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n            <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n          </pre>\n        ),\n      });\n    }\n\n    return (\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n          <FormField\n            control={form.control}\n            name=\"dob\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-col\">\n                <FormLabel>Date of birth</FormLabel>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <FormControl>\n                      <Button\n                        variant={\"outline\"}\n                        className={cn(\n                          \"w-[240px] pl-3 text-left font-normal\",\n                          !field.value && \"text-muted-foreground\",\n                        )}\n                      >\n                        {field.value ? (\n                          format(field.value, \"PPP\")\n                        ) : (\n                          <span>Pick a date</span>\n                        )}\n                        <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                      </Button>\n                    </FormControl>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={field.value}\n                      onSelect={field.onChange}\n                      disabled={(date) =>\n                        date > new Date() || date < new Date(\"1900-01-01\")\n                      }\n                      captionLayout=\"dropdown\"\n                    />\n                  </PopoverContent>\n                </Popover>\n                <FormDescription>\n                  Your date of birth is used to calculate your age.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\">Submit</Button>\n        </form>\n      </Form>\n    );\n  },\n};\n\nexport const ShouldSubmitWithSelectedDate: Story = {\n  name: \"when user selects date and submits, should show success message\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const form = useForm<z.infer<typeof FormSchema>>({\n      resolver: zodResolver(FormSchema),\n    });\n\n    function onSubmit(data: z.infer<typeof FormSchema>) {\n      toast(\"You submitted the following values\", {\n        description: (\n          <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n            <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n          </pre>\n        ),\n      });\n    }\n\n    return (\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n          <FormField\n            control={form.control}\n            name=\"dob\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-col\">\n                <FormLabel>Date of birth</FormLabel>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <FormControl>\n                      <Button\n                        variant={\"outline\"}\n                        className={cn(\n                          \"w-[240px] pl-3 text-left font-normal\",\n                          !field.value && \"text-muted-foreground\",\n                        )}\n                      >\n                        {field.value ? (\n                          format(field.value, \"PPP\")\n                        ) : (\n                          <span>Pick a date</span>\n                        )}\n                        <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                      </Button>\n                    </FormControl>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={field.value}\n                      onSelect={field.onChange}\n                      disabled={(date) =>\n                        date > new Date() || date < new Date(\"1900-01-01\")\n                      }\n                      captionLayout=\"dropdown\"\n                    />\n                  </PopoverContent>\n                </Popover>\n                <FormDescription>\n                  Your date of birth is used to calculate your age.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\">Submit</Button>\n        </form>\n      </Form>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Calendar Form이 날짜 선택 후 제출 시 정상 작동하는지 확인\n    const triggerButton = canvas.getByRole(\"button\", { name: /pick a date/i });\n    await expect(triggerButton).toBeInTheDocument();\n\n    // 트리거 버튼 클릭하여 Calendar 열기\n    await userEvent.click(triggerButton);\n\n    // Calendar가 열렸는지 확인\n    await waitFor(async () => {\n      const dateButtons = await canvas.findAllByRole(\"button\");\n      await expect(dateButtons.length).toBeGreaterThan(1);\n    });\n\n    // 날짜 버튼 찾기 (15일 선택)\n    const dateButtons = canvas.getAllByRole(\"button\");\n    const date15Button = dateButtons.find(\n      (button) => button.textContent?.trim() === \"15\",\n    );\n\n    if (date15Button) {\n      // 날짜 클릭\n      await userEvent.click(date15Button);\n\n      // 날짜가 선택되었는지 확인 (버튼 텍스트 변경)\n      await waitFor(() => {\n        expect(triggerButton.textContent).not.toMatch(/pick a date/i);\n      });\n\n      // Submit 버튼 클릭\n      const submitButton = canvas.getByRole(\"button\", { name: /submit/i });\n      await userEvent.click(submitButton);\n\n      // Toast 메시지 확인\n      await waitFor(async () => {\n        const toastMessage = await canvas.findByText(\n          /you submitted the following values/i,\n        );\n        await expect(toastMessage).toBeInTheDocument();\n      });\n    }\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "calendar",
    "form",
    "validation"
  ]
}