{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox-story",
  "type": "registry:component",
  "title": "Combobox Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Autocomplete input combining button, dropdown, and command palette for selecting options",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/atoms/combobox-story/combobox.stories.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { Check, ChevronsUpDown, MoreHorizontal } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, userEvent, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n];\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"\");\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" className=\"h-9\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue);\n                    setOpen(false);\n                  }}\n                >\n                  {framework.label}\n                  <Check\n                    className={cn(\n                      \"ml-auto\",\n                      value === framework.value ? \"opacity-100\" : \"opacity-0\",\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n/**\n * An autocomplete input that combines a button, dropdown menu, and command palette for selecting options.\n */\nconst meta: Meta<typeof ComboboxDemo> = {\n  title: \"ui/Combobox\",\n  component: ComboboxDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <ComboboxDemo />,\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default combobox with framework selection example.\n */\nexport const Default: Story = {};\n\n/**\n * Combobox with popover positioned above.\n */\nexport const PopoverPosition: Story = {\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n    const [value, setValue] = React.useState(\"\");\n\n    return (\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-[200px] justify-between\"\n          >\n            {value\n              ? frameworks.find((framework) => framework.value === value)?.label\n              : \"Select framework...\"}\n            <ChevronsUpDown className=\"opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[200px] p-0\" side=\"top\">\n          <Command>\n            <CommandInput placeholder=\"Search framework...\" className=\"h-9\" />\n            <CommandList>\n              <CommandEmpty>No framework found.</CommandEmpty>\n              <CommandGroup>\n                {frameworks.map((framework) => (\n                  <CommandItem\n                    key={framework.value}\n                    value={framework.value}\n                    onSelect={(currentValue) => {\n                      setValue(currentValue === value ? \"\" : currentValue);\n                      setOpen(false);\n                    }}\n                  >\n                    {framework.label}\n                    <Check\n                      className={cn(\n                        \"ml-auto\",\n                        value === framework.value ? \"opacity-100\" : \"opacity-0\",\n                      )}\n                    />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    );\n  },\n};\n\n/**\n * Combobox in a form with React Hook Form.\n */\nexport const WithForm: Story = {\n  render: () => {\n    const FormSchema = z.object({\n      framework: z.string().min(1, {\n        message: \"Please select a framework.\",\n      }),\n    });\n\n    function ComboboxForm() {\n      const form = useForm<z.infer<typeof FormSchema>>({\n        resolver: zodResolver(FormSchema),\n      });\n\n      function onSubmit(data: z.infer<typeof FormSchema>) {\n        toast(\"You submitted the following values:\", {\n          description: (\n            <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n              <code className=\"text-white\">\n                {JSON.stringify(data, null, 2)}\n              </code>\n            </pre>\n          ),\n        });\n      }\n\n      return (\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"framework\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Framework</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant=\"outline\"\n                          role=\"combobox\"\n                          className={cn(\n                            \"w-[200px] justify-between\",\n                            !field.value && \"text-muted-foreground\",\n                          )}\n                        >\n                          {field.value\n                            ? frameworks.find(\n                                (framework) => framework.value === field.value,\n                              )?.label\n                            : \"Select framework\"}\n                          <ChevronsUpDown className=\"opacity-50\" />\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-[200px] p-0\">\n                      <Command>\n                        <CommandInput\n                          placeholder=\"Search framework...\"\n                          className=\"h-9\"\n                        />\n                        <CommandList>\n                          <CommandEmpty>No framework found.</CommandEmpty>\n                          <CommandGroup>\n                            {frameworks.map((framework) => (\n                              <CommandItem\n                                value={framework.label}\n                                key={framework.value}\n                                onSelect={() => {\n                                  form.setValue(\"framework\", framework.value);\n                                }}\n                              >\n                                {framework.label}\n                                <Check\n                                  className={cn(\n                                    \"ml-auto\",\n                                    framework.value === field.value\n                                      ? \"opacity-100\"\n                                      : \"opacity-0\",\n                                  )}\n                                />\n                              </CommandItem>\n                            ))}\n                          </CommandGroup>\n                        </CommandList>\n                      </Command>\n                    </PopoverContent>\n                  </Popover>\n                  <FormDescription>\n                    This is the framework that you will use for your project.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type=\"submit\">Submit</Button>\n          </form>\n        </Form>\n      );\n    }\n\n    return <ComboboxForm />;\n  },\n};\n\n/**\n * Status selection popover variant.\n */\nexport const StatusPopover: Story = {\n  render: () => {\n    type Status = {\n      value: string;\n      label: string;\n    };\n\n    const statuses: Status[] = [\n      { value: \"backlog\", label: \"Backlog\" },\n      { value: \"todo\", label: \"Todo\" },\n      { value: \"in progress\", label: \"In Progress\" },\n      { value: \"done\", label: \"Done\" },\n      { value: \"canceled\", label: \"Canceled\" },\n    ];\n\n    function ComboboxPopover() {\n      const [open, setOpen] = React.useState(false);\n      const [selectedStatus, setSelectedStatus] = React.useState<Status | null>(\n        null,\n      );\n\n      return (\n        <div className=\"flex items-center gap-4\">\n          <p className=\"text-muted-foreground text-sm\">Status</p>\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button variant=\"outline\" className=\"w-[150px] justify-start\">\n                {selectedStatus ? (\n                  <>{selectedStatus.label}</>\n                ) : (\n                  <>+ Set status</>\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\n              <Command>\n                <CommandInput placeholder=\"Change status...\" />\n                <CommandList>\n                  <CommandEmpty>No results found.</CommandEmpty>\n                  <CommandGroup>\n                    {statuses.map((status) => (\n                      <CommandItem\n                        key={status.value}\n                        value={status.value}\n                        onSelect={(value) => {\n                          setSelectedStatus(\n                            statuses.find(\n                              (priority) => priority.value === value,\n                            ) || null,\n                          );\n                          setOpen(false);\n                        }}\n                      >\n                        {status.label}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n      );\n    }\n\n    return <ComboboxPopover />;\n  },\n};\n\n/**\n * Combobox integrated in dropdown menu.\n */\nexport const DropdownMenuIntegration: Story = {\n  render: () => {\n    const labels = [\n      \"feature\",\n      \"bug\",\n      \"enhancement\",\n      \"documentation\",\n      \"design\",\n      \"question\",\n      \"maintenance\",\n    ];\n\n    function ComboboxDropdownMenu() {\n      const [label, setLabel] = React.useState(\"feature\");\n      const [open, setOpen] = React.useState(false);\n\n      return (\n        <div className=\"flex w-full flex-col items-start justify-between rounded-md border px-4 py-3 sm:flex-row sm:items-center\">\n          <p className=\"text-sm leading-none font-medium\">\n            <span className=\"bg-primary text-primary-foreground mr-2 rounded-lg px-2 py-1 text-xs\">\n              {label}\n            </span>\n            <span className=\"text-muted-foreground\">Create a new project</span>\n          </p>\n          <DropdownMenu open={open} onOpenChange={setOpen}>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\">\n                <MoreHorizontal />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-[200px]\">\n              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n              <DropdownMenuGroup>\n                <DropdownMenuItem>Assign to...</DropdownMenuItem>\n                <DropdownMenuItem>Set due date...</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuSub>\n                  <DropdownMenuSubTrigger>Apply label</DropdownMenuSubTrigger>\n                  <DropdownMenuSubContent className=\"p-0\">\n                    <Command>\n                      <CommandInput\n                        placeholder=\"Filter label...\"\n                        autoFocus={true}\n                        className=\"h-9\"\n                      />\n                      <CommandList>\n                        <CommandEmpty>No label found.</CommandEmpty>\n                        <CommandGroup>\n                          {labels.map((label) => (\n                            <CommandItem\n                              key={label}\n                              value={label}\n                              onSelect={(value) => {\n                                setLabel(value);\n                                setOpen(false);\n                              }}\n                            >\n                              {label}\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </DropdownMenuSubContent>\n                </DropdownMenuSub>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"text-red-600\">\n                  Delete\n                  <DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut>\n                </DropdownMenuItem>\n              </DropdownMenuGroup>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      );\n    }\n\n    return <ComboboxDropdownMenu />;\n  },\n};\n\nexport const ShouldSelectOption: Story = {\n  name: \"when user opens combobox and selects option, should update value\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <ComboboxDemo />,\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step(\"click combobox button to open\", async () => {\n      const comboboxButton = canvas.getByRole(\"combobox\");\n      await userEvent.click(comboboxButton);\n    });\n\n    await step(\"select 'Next.js' option\", async () => {\n      // Wait for the options to appear\n      const nextjsOption = await canvas.findByText(\"Next.js\", {\n        selector: '[role=\"option\"]',\n      });\n      await userEvent.click(nextjsOption);\n    });\n\n    await step(\"verify combobox shows selected value\", async () => {\n      const comboboxButton = canvas.getByRole(\"combobox\");\n      await expect(comboboxButton).toHaveTextContent(\"Next.js\");\n    });\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "combobox",
    "input"
  ]
}