{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "label-story",
  "type": "registry:component",
  "title": "Label Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating label component usage and variants",
  "registryDependencies": [
    "label"
  ],
  "files": [
    {
      "path": "src/registry/atoms/label-story/label.stories.tsx",
      "content": "import { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport * as React from \"react\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nfunction LabelDemo() {\n  return (\n    <div>\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox id=\"terms\" />\n        <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Renders an accessible label associated with controls.\n */\nconst meta = {\n  title: \"ui/Label\",\n  component: Label,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    children: \"Label\",\n    htmlFor: \"input\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Label>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the label.\n */\nexport const Default: Story = {};\n\n/**\n * Label with checkbox example.\n */\nexport const WithCheckbox: Story = {\n  render: () => <LabelDemo />,\n};\n\nexport const ShouldToggleCheckboxWhenClicked: Story = {\n  name: \"when label is clicked, should toggle the associated checkbox\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <LabelDemo />,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const label = canvas.getByText(\"Accept terms and conditions\");\n    const checkbox = canvas.getByRole(\"checkbox\") as HTMLInputElement;\n\n    // 🎯 목적: Label 클릭 시 연결된 checkbox가 토글되는지 확인\n    await expect(checkbox).not.toBeChecked();\n\n    await userEvent.click(label);\n    await expect(checkbox).toBeChecked();\n\n    await userEvent.click(label);\n    await expect(checkbox).not.toBeChecked();\n  },\n};\n\nexport const ShouldFocusInputWithHtmlFor: Story = {\n  name: \"when label with htmlFor is clicked, should focus the associated input\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [value, setValue] = React.useState(\"\");\n\n    return (\n      <div className=\"flex flex-col gap-2\">\n        <Label htmlFor=\"email-input\">Email Address</Label>\n        <Input\n          id=\"email-input\"\n          type=\"email\"\n          placeholder=\"Enter your email\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n        />\n        <div\n          className=\"text-muted-foreground text-sm\"\n          data-testid=\"value-display\"\n        >\n          Value: {value || \"(empty)\"}\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: htmlFor 속성으로 연결된 Label 클릭 시 Input에 포커스가 이동하는지 확인\n\n    // Label과 Input 요소 찾기\n    const label = canvas.getByText(\"Email Address\");\n    const input = canvas.getByPlaceholderText(\n      \"Enter your email\",\n    ) as HTMLInputElement;\n\n    // 초기 상태 확인\n    await expect(input).not.toHaveFocus();\n\n    // Label 클릭 시 Input에 포커스 이동\n    await userEvent.click(label);\n    await expect(input).toHaveFocus();\n\n    // Input에 값 입력\n    await userEvent.type(input, \"test@example.com\");\n\n    // 값 표시 확인\n    const valueDisplay = canvas.getByTestId(\"value-display\");\n    await expect(valueDisplay).toHaveTextContent(\"Value: test@example.com\");\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "label",
    "form"
  ]
}