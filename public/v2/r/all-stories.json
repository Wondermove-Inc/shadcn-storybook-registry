{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "all-stories",
  "type": "registry:component",
  "title": "All Stories",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Complete collection of all Storybook stories in the registry for bulk installation",
  "registryDependencies": [
    "accordion",
    "alert",
    "alert-dialog",
    "aspect-ratio",
    "avatar",
    "badge",
    "breadcrumb",
    "button",
    "calendar",
    "card",
    "carousel",
    "chart",
    "checkbox",
    "collapsible",
    "dialog",
    "command",
    "context-menu",
    "drawer",
    "dropdown-menu",
    "label",
    "hover-card",
    "input",
    "input-otp",
    "menubar",
    "navigation-menu",
    "popover",
    "progress",
    "radio-group",
    "resizable",
    "scroll-area",
    "select",
    "separator",
    "sheet",
    "sidebar",
    "skeleton",
    "slider",
    "switch",
    "table",
    "tabs",
    "textarea",
    "toggle",
    "toggle-group",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/registry/atoms/accordion-story/accordion.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\n\nexport function AccordionDemo() {\n  return (\n    <Accordion\n      type=\"single\"\n      collapsible\n      className=\"w-full\"\n      defaultValue=\"item-1\"\n    >\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>Product Information</AccordionTrigger>\n        <AccordionContent className=\"flex flex-col gap-4 text-balance\">\n          <p>\n            Our flagship product combines cutting-edge technology with sleek\n            design. Built with premium materials, it offers unparalleled\n            performance and reliability.\n          </p>\n          <p>\n            Key features include advanced processing capabilities, and an\n            intuitive user interface designed for both beginners and experts.\n          </p>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger>Shipping Details</AccordionTrigger>\n        <AccordionContent className=\"flex flex-col gap-4 text-balance\">\n          <p>\n            We offer worldwide shipping through trusted courier partners.\n            Standard delivery takes 3-5 business days, while express shipping\n            ensures delivery within 1-2 business days.\n          </p>\n          <p>\n            All orders are carefully packaged and fully insured. Track your\n            shipment in real-time through our dedicated tracking portal.\n          </p>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-3\">\n        <AccordionTrigger>Return Policy</AccordionTrigger>\n        <AccordionContent className=\"flex flex-col gap-4 text-balance\">\n          <p>\n            We stand behind our products with a comprehensive 30-day return\n            policy. If you're not completely satisfied, simply return the item\n            in its original condition.\n          </p>\n          <p>\n            Our hassle-free return process includes free return shipping and\n            full refunds processed within 48 hours of receiving the returned\n            item.\n          </p>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n\n/**\n * A vertically stacked set of interactive headings that each reveal a section\n * of content.\n */\nconst meta = {\n  title: \"ui/Accordion\",\n  component: Accordion,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    type: \"single\",\n    collapsible: true,\n    defaultValue: \"item-1\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Accordion>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default single accordion.\n */\nexport const Default: Story = {\n  render: () => <AccordionDemo />,\n};\n\nexport const ShouldExpandAccordion: Story = {\n  name: \"when accordion trigger is clicked, should expand content\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <AccordionDemo />,\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step(\"click 'Shipping Details' accordion trigger\", async () => {\n      const shippingTrigger = canvas.getByRole(\"button\", {\n        name: /shipping details/i,\n      });\n      await userEvent.click(shippingTrigger);\n    });\n\n    const shippingContent = canvas.getByText(/We offer worldwide shipping/i);\n    await expect(shippingContent).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/alert-story/alert.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { AlertCircleIcon, CheckCircle2Icon, PopcornIcon } from \"lucide-react\";\n\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n\nexport function AlertDemo() {\n  return (\n    <div className=\"grid w-full max-w-xl items-start gap-4\">\n      <Alert>\n        <CheckCircle2Icon />\n        <AlertTitle>Success! Your changes have been saved</AlertTitle>\n        <AlertDescription>\n          This is an alert with icon, title and description.\n        </AlertDescription>\n      </Alert>\n      <Alert>\n        <PopcornIcon />\n        <AlertTitle>\n          This Alert has a title and an icon. No description.\n        </AlertTitle>\n      </Alert>\n      <Alert variant=\"destructive\">\n        <AlertCircleIcon />\n        <AlertTitle>Unable to process your payment.</AlertTitle>\n        <AlertDescription>\n          <p>Please verify your billing information and try again.</p>\n          <ul className=\"list-inside list-disc text-sm\">\n            <li>Check your card details</li>\n            <li>Ensure sufficient funds</li>\n            <li>Verify billing address</li>\n          </ul>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n}\n\n/**\n * Displays a callout for user attention.\n */\nconst meta = {\n  title: \"ui/Alert\",\n  component: Alert,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    variant: \"default\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Alert>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the alert.\n */\nexport const Default: Story = {\n  render: () => <AlertDemo />,\n};\n\n/**\n * Success alert with icon, title and description.\n */\nexport const Success: Story = {\n  render: () => (\n    <Alert>\n      <CheckCircle2Icon />\n      <AlertTitle>Success! Your changes have been saved</AlertTitle>\n      <AlertDescription>\n        This is an alert with icon, title and description.\n      </AlertDescription>\n    </Alert>\n  ),\n};\n\n/**\n * Alert with title and icon only, no description.\n */\nexport const TitleOnly: Story = {\n  render: () => (\n    <Alert>\n      <PopcornIcon />\n      <AlertTitle>\n        This Alert has a title and an icon. No description.\n      </AlertTitle>\n    </Alert>\n  ),\n};\n\n/**\n * Destructive alert with list content.\n */\nexport const Destructive: Story = {\n  render: () => (\n    <Alert variant=\"destructive\">\n      <AlertCircleIcon />\n      <AlertTitle>Unable to process your payment.</AlertTitle>\n      <AlertDescription>\n        <p>Please verify your billing information and try again.</p>\n        <ul className=\"list-inside list-disc text-sm\">\n          <li>Check your card details</li>\n          <li>Ensure sufficient funds</li>\n          <li>Verify billing address</li>\n        </ul>\n      </AlertDescription>\n    </Alert>\n  ),\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/alert-dialog-story/alert-dialog.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function AlertDialogDemo() {\n  return (\n    <AlertDialog>\n      <AlertDialogTrigger asChild>\n        <Button variant=\"outline\">Show Dialog</Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete your\n            account and remove your data from our servers.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\n          <AlertDialogAction>Continue</AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n}\n\n/**\n * A modal dialog that interrupts the user with important content and expects\n * a response.\n */\nconst meta = {\n  title: \"ui/AlertDialog\",\n  component: AlertDialog,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <AlertDialogDemo />\n} satisfies Meta<typeof AlertDialog>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the alert dialog.\n */\nexport const Default: Story = {};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/aspect-ratio-story/aspect-ratio.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport Image from \"next/image\";\n\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\n\nexport function AspectRatioDemo() {\n  return (\n    <div className=\"w-[450px]\">\n      <AspectRatio ratio={16 / 9} className=\"bg-muted rounded-lg\">\n        <Image\n          src=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\n          alt=\"Photo by Drew Beamer\"\n          fill\n          className=\"h-full w-full rounded-lg object-cover dark:brightness-[0.2] dark:grayscale\"\n        />\n      </AspectRatio>\n    </div>\n  );\n}\n\n/**\n * Displays content within a desired ratio.\n */\nconst meta: Meta<typeof AspectRatio> = {\n  title: \"ui/AspectRatio\",\n  component: AspectRatio,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    ratio: 16 / 9,\n    className: \"bg-muted rounded-lg w-[450px]\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof AspectRatio>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default 16:9 aspect ratio with Image.\n */\nexport const Default: Story = {\n  render: (args) => (\n    <div className=\"w-[450px]\">\n      <AspectRatio {...args}>\n        <Image\n          src=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\n          alt=\"Photo by Drew Beamer\"\n          fill\n          className=\"h-full w-full rounded-lg object-cover dark:brightness-[0.2] dark:grayscale\"\n        />\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 16:9 aspect ratio (Widescreen).\n */\nexport const Widescreen: Story = {\n  args: {\n    ratio: 16 / 9,\n  },\n  render: (args) => (\n    <div className=\"w-[450px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 text-lg font-semibold text-white\">\n          16:9\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 4:3 aspect ratio (Standard).\n */\nexport const Standard: Story = {\n  args: {\n    ratio: 4 / 3,\n  },\n  render: (args) => (\n    <div className=\"w-[450px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-green-500 to-teal-600 text-lg font-semibold text-white\">\n          4:3\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 1:1 aspect ratio (Square).\n */\nexport const Square: Story = {\n  args: {\n    ratio: 1 / 1,\n  },\n  render: (args) => (\n    <div className=\"w-[300px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-pink-500 to-rose-600 text-lg font-semibold text-white\">\n          1:1\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 21:9 aspect ratio (Ultrawide).\n */\nexport const Ultrawide: Story = {\n  args: {\n    ratio: 21 / 9,\n  },\n  render: (args) => (\n    <div className=\"w-[600px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-orange-500 to-red-600 text-lg font-semibold text-white\">\n          21:9\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/avatar-story/avatar.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/components/ui/avatar\";\n\nexport function AvatarDemo() {\n  return (\n    <div className=\"flex flex-row flex-wrap items-center gap-12\">\n      <Avatar>\n        <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n        <AvatarFallback>CN</AvatarFallback>\n      </Avatar>\n      <Avatar className=\"rounded-lg\">\n        <AvatarImage\n          src=\"https://github.com/evilrabbit.png\"\n          alt=\"@evilrabbit\"\n        />\n        <AvatarFallback>ER</AvatarFallback>\n      </Avatar>\n      <div className=\"*:data-[slot=avatar]:ring-background flex -space-x-2 *:data-[slot=avatar]:ring-2 *:data-[slot=avatar]:grayscale\">\n        <Avatar>\n          <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n          <AvatarFallback>CN</AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarImage src=\"https://github.com/leerob.png\" alt=\"@leerob\" />\n          <AvatarFallback>LR</AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarImage\n            src=\"https://github.com/evilrabbit.png\"\n            alt=\"@evilrabbit\"\n          />\n          <AvatarFallback>ER</AvatarFallback>\n        </Avatar>\n      </div>\n    </div>\n  )\n}\n\n/**\n * An image element with a fallback for representing the user.\n */\nconst meta = {\n  title: \"ui/Avatar\",\n  component: Avatar,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <AvatarDemo />\n} satisfies Meta<typeof Avatar>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the avatar.\n */\nexport const Default: Story = {};\n\n/**\n * Basic avatar with image and fallback.\n */\nexport const Basic: Story = {\n  render: () => (\n    <Avatar>\n      <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n      <AvatarFallback>CN</AvatarFallback>\n    </Avatar>\n  )\n};\n\n/**\n * Avatar with rounded corners.\n */\nexport const Rounded: Story = {\n  render: () => (\n    <Avatar className=\"rounded-lg\">\n      <AvatarImage\n        src=\"https://github.com/evilrabbit.png\"\n        alt=\"@evilrabbit\"\n      />\n      <AvatarFallback>ER</AvatarFallback>\n    </Avatar>\n  )\n};\n\n/**\n * Stacked avatars with grayscale effect.\n */\nexport const Stacked: Story = {\n  render: () => (\n    <div className=\"*:data-[slot=avatar]:ring-background flex -space-x-2 *:data-[slot=avatar]:ring-2 *:data-[slot=avatar]:grayscale\">\n      <Avatar>\n        <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n        <AvatarFallback>CN</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage src=\"https://github.com/leerob.png\" alt=\"@leerob\" />\n        <AvatarFallback>LR</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage\n          src=\"https://github.com/evilrabbit.png\"\n          alt=\"@evilrabbit\"\n        />\n        <AvatarFallback>ER</AvatarFallback>\n      </Avatar>\n    </div>\n  )\n};\n\n/**\n * Avatar with only fallback (no image).\n */\nexport const FallbackOnly: Story = {\n  render: () => (\n    <Avatar>\n      <AvatarFallback>AB</AvatarFallback>\n    </Avatar>\n  )\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/badge-story/badge.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { BadgeCheckIcon } from \"lucide-react\";\n\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function BadgeDemo() {\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <div className=\"flex w-full flex-wrap gap-2\">\n        <Badge>Badge</Badge>\n        <Badge variant=\"secondary\">Secondary</Badge>\n        <Badge variant=\"destructive\">Destructive</Badge>\n        <Badge variant=\"outline\">Outline</Badge>\n      </div>\n      <div className=\"flex w-full flex-wrap gap-2\">\n        <Badge\n          variant=\"secondary\"\n          className=\"bg-blue-500 text-white dark:bg-blue-600\"\n        >\n          <BadgeCheckIcon />\n          Verified\n        </Badge>\n        <Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\">\n          8\n        </Badge>\n        <Badge\n          className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n          variant=\"destructive\"\n        >\n          99\n        </Badge>\n        <Badge\n          className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n          variant=\"outline\"\n        >\n          20+\n        </Badge>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays a badge or a component that looks like a badge.\n */\nconst meta = {\n  title: \"ui/Badge\",\n  component: Badge,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    children: \"Badge\",\n    variant: \"default\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Badge>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the badge.\n */\nexport const Default: Story = {};\n\n/**\n * Secondary badge variant.\n */\nexport const Secondary: Story = {\n  args: {\n    variant: \"secondary\",\n    children: \"Secondary\",\n  },\n};\n\n/**\n * Destructive badge variant.\n */\nexport const Destructive: Story = {\n  args: {\n    variant: \"destructive\",\n    children: \"Destructive\",\n  },\n};\n\n/**\n * Outline badge variant.\n */\nexport const Outline: Story = {\n  args: {\n    variant: \"outline\",\n    children: \"Outline\",\n  },\n};\n\n/**\n * Badge with icon.\n */\nexport const WithIcon: Story = {\n  render: () => (\n    <Badge\n      variant=\"secondary\"\n      className=\"bg-blue-500 text-white dark:bg-blue-600\"\n    >\n      <BadgeCheckIcon />\n      Verified\n    </Badge>\n  ),\n};\n\n/**\n * Numeric badge examples.\n */\nexport const Numeric: Story = {\n  render: () => (\n    <div className=\"flex flex-wrap gap-2\">\n      <Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\">\n        8\n      </Badge>\n      <Badge\n        className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n        variant=\"destructive\"\n      >\n        99\n      </Badge>\n      <Badge\n        className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n        variant=\"outline\"\n      >\n        20+\n      </Badge>\n    </div>\n  ),\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/breadcrumb-story/breadcrumb.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { ChevronDownIcon, SlashIcon } from \"lucide-react\";\nimport Link from \"next/link\";\n\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function BreadcrumbDemo() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n\n/**\n * Displays the path to the current resource using a hierarchy of links.\n */\nconst meta = {\n  title: \"ui/Breadcrumb\",\n  component: Breadcrumb,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Breadcrumb>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the breadcrumb.\n */\nexport const Default: Story = {\n  render: () => <BreadcrumbDemo />,\n};\n\n/**\n * Custom separator example.\n */\nexport const CustomSeparator: Story = {\n  render: () => (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  ),\n};\n\n/**\n * Breadcrumb with dropdown.\n */\nexport const WithDropdown: Story = {\n  render: () => (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink asChild>\n            <Link href=\"/\">Home</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <DropdownMenu>\n            <DropdownMenuTrigger className=\"flex items-center gap-1\">\n              Components\n              <ChevronDownIcon />\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem>Documentation</DropdownMenuItem>\n              <DropdownMenuItem>Themes</DropdownMenuItem>\n              <DropdownMenuItem>GitHub</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  ),\n};\n\n/**\n * Collapsed breadcrumb with ellipsis.\n */\nexport const Collapsed: Story = {\n  render: () => (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink asChild>\n            <Link href=\"/\">Home</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbEllipsis />\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbLink asChild>\n            <Link href=\"/docs/components\">Components</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  ),\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/button-story/button.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { ChevronRight, Loader2, Mail } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useRef } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\n\nexport function ButtonDemo() {\n  return <Button>Button</Button>;\n}\n\n/**\n * Displays a button or a component that looks like a button.\n */\nconst meta: Meta<typeof Button> = {\n  title: \"ui/Button\",\n  component: Button,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    children: \"Button\",\n    variant: \"default\",\n    size: \"default\",\n    disabled: false,\n    onClick: fn(),\n  },\n  excludeStories: /.*Demo$/,\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the button.\n */\nexport const Default: Story = {};\n\n/**\n * Secondary button variant.\n */\nexport const Secondary: Story = {\n  args: {\n    variant: \"secondary\",\n    children: \"Secondary\",\n  },\n};\n\n/**\n * Destructive button variant.\n */\nexport const Destructive: Story = {\n  args: {\n    variant: \"destructive\",\n    children: \"Destructive\",\n  },\n};\n\n/**\n * Outline button variant.\n */\nexport const Outline: Story = {\n  args: {\n    variant: \"outline\",\n    children: \"Outline\",\n  },\n};\n\n/**\n * Ghost button variant.\n */\nexport const Ghost: Story = {\n  args: {\n    variant: \"ghost\",\n    children: \"Ghost\",\n  },\n};\n\n/**\n * Link button variant.\n */\nexport const LinkVariant: Story = {\n  args: {\n    variant: \"link\",\n    children: \"Link\",\n  },\n};\n\n/**\n * Icon button example.\n */\nexport const Icon: Story = {\n  render: () => (\n    <Button variant=\"outline\" size=\"icon\">\n      <ChevronRight className=\"h-4 w-4\" />\n    </Button>\n  ),\n};\n\n/**\n * Button with icon.\n */\nexport const WithIcon: Story = {\n  render: () => (\n    <Button>\n      <Mail className=\"mr-2 h-4 w-4\" /> Login with Email\n    </Button>\n  ),\n};\n\n/**\n * Loading button state.\n */\nexport const Loading: Story = {\n  render: () => (\n    <Button disabled>\n      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n      Please wait\n    </Button>\n  ),\n};\n\n/**\n * Button as child (link).\n */\nexport const AsChild: Story = {\n  render: () => (\n    <Button asChild>\n      <Link href=\"/login\">Login</Link>\n    </Button>\n  ),\n};\n\n/**\n * Ref 사용 예제: Button에 ref를 전달하여 DOM 요소에 직접 접근합니다.\n * 이 예제는 ref를 통한 focus 제어를 보여줍니다.\n */\nexport const WithRef: Story = {\n  render: () => {\n    // 🎯 목적: HTMLButtonElement에 대한 ref를 생성하여 focus() 메서드 접근\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Button ref={buttonRef}>Target Button</Button>\n        <Button variant=\"outline\" onClick={() => buttonRef.current?.focus()}>\n          Focus Button Above\n        </Button>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 ref 동작을 자동으로 테스트\n    const canvas = within(canvasElement);\n    const buttons = canvas.getAllByRole(\"button\");\n\n    // \"Focus Button Above\" 버튼 클릭하여 첫 번째 버튼에 focus 트리거\n    await userEvent.click(buttons[1]);\n\n    // 첫 번째 버튼이 포커스를 받았는지 검증\n    await expect(buttons[0]).toHaveFocus();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/calendar-story/calendar.stories.tsx",
      "content": "\"use client\"\n\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\";\n\nimport { Calendar } from \"@/components/ui/calendar\";\n\nexport function CalendarDemo() {\n  const [date, setDate] = React.useState<Date | undefined>(new Date())\n\n  return (\n    <Calendar\n      mode=\"single\"\n      selected={date}\n      onSelect={setDate}\n      className=\"rounded-md border\"\n    />\n  )\n}\n\n/**\n * A date field component that allows users to enter and edit date.\n */\nconst meta = {\n  title: \"ui/Calendar\",\n  component: Calendar,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <CalendarDemo />\n} satisfies Meta<typeof Calendar>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the calendar.\n */\nexport const Default: Story = {};\n\n/**\n * Calendar with form example.\n */\nexport const Form: Story = {\n  render: () => {\n    const [date, setDate] = React.useState<Date | undefined>()\n\n    return (\n      <form className=\"space-y-8\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          className=\"rounded-md border\"\n        />\n      </form>\n    )\n  },\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/card-story/card.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useRef } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardAction,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nexport function CardDemo() {\n  return (\n    <Card className=\"w-full max-w-sm\">\n      <CardHeader>\n        <CardTitle>Login to your account</CardTitle>\n        <CardDescription>\n          Enter your email below to login to your account\n        </CardDescription>\n        <CardAction>\n          <Button variant=\"link\">Sign Up</Button>\n        </CardAction>\n      </CardHeader>\n      <CardContent>\n        <form>\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                required\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <div className=\"flex items-center\">\n                <Label htmlFor=\"password\">Password</Label>\n                <a\n                  href=\"#\"\n                  className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n                >\n                  Forgot your password?\n                </a>\n              </div>\n              <Input id=\"password\" type=\"password\" required />\n            </div>\n          </div>\n        </form>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2\">\n        <Button type=\"submit\" className=\"w-full\">\n          Login\n        </Button>\n        <Button variant=\"outline\" className=\"w-full\">\n          Login with Google\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n\n/**\n * Displays a card with header, content, and footer.\n */\nconst meta = {\n  title: \"ui/Card\",\n  component: Card,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Card>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the card.\n */\nexport const Default: Story = {\n  render: () => <CardDemo />,\n};\n\n/**\n * Ref 사용 예제: Card에 ref를 전달하여 DOM 요소에 직접 접근합니다.\n * 이 예제는 ref를 통한 scrollIntoView 제어를 보여줍니다.\n */\nexport const WithRef: Story = {\n  parameters: {\n    layout: \"padded\",\n  },\n  render: () => {\n    // 🎯 목적: HTMLDivElement에 대한 ref를 생성하여 scrollIntoView() 메서드 접근\n    const card1Ref = useRef<HTMLDivElement>(null);\n    const card2Ref = useRef<HTMLDivElement>(null);\n    const card3Ref = useRef<HTMLDivElement>(null);\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"bg-background/95 sticky top-0 z-10 flex gap-2 rounded-md border p-2 backdrop-blur\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() =>\n              card1Ref.current?.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n              })\n            }\n          >\n            Scroll to Card 1\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() =>\n              card2Ref.current?.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n              })\n            }\n          >\n            Scroll to Card 2\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() =>\n              card3Ref.current?.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n              })\n            }\n          >\n            Scroll to Card 3\n          </Button>\n        </div>\n\n        <Card ref={card1Ref} className=\"w-full max-w-sm scroll-mt-20\">\n          <CardHeader>\n            <CardTitle>Card 1</CardTitle>\n            <CardDescription>First card in the list</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm\">\n              This is the first card that can be scrolled to using ref.\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"h-96\" />\n\n        <Card ref={card2Ref} className=\"w-full max-w-sm scroll-mt-20\">\n          <CardHeader>\n            <CardTitle>Card 2</CardTitle>\n            <CardDescription>Second card in the list</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm\">\n              This is the second card that can be scrolled to using ref.\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"h-96\" />\n\n        <Card ref={card3Ref} className=\"w-full max-w-sm scroll-mt-20\">\n          <CardHeader>\n            <CardTitle>Card 3</CardTitle>\n            <CardDescription>Third card in the list</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm\">\n              This is the third card that can be scrolled to using ref.\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"h-96\" />\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 ref 동작을 자동으로 테스트\n    const canvas = within(canvasElement);\n    const button2 = canvas.getByRole(\"button\", { name: \"Scroll to Card 2\" });\n\n    // \"Scroll to Card 2\" 버튼 클릭하여 스크롤 트리거\n    await userEvent.click(button2);\n\n    // Card 2가 뷰포트에 표시되는지 확인\n    const card2 = canvas.getByText(\"Card 2\");\n    await expect(card2).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/carousel-story/carousel.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\";\n\nexport function CarouselDemo() {\n  return (\n    <Carousel className=\"w-full max-w-xs\">\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index}>\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-4xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  )\n}\n\n/**\n * A carousel with motion and swipe built using Embla.\n */\nconst meta: Meta<typeof Carousel> = {\n  title: \"ui/Carousel\",\n  component: Carousel,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <CarouselDemo />\n} satisfies Meta<typeof Carousel>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the carousel.\n */\nexport const Default: Story = {};\n\n/**\n * Carousel with different sized items.\n */\nexport const Sizes: Story = {\n  render: () => (\n    <Carousel\n      opts={{\n        align: \"start\",\n      }}\n      className=\"w-full max-w-sm\"\n    >\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  )\n};\n\n/**\n * Carousel with custom spacing between items.\n */\nexport const Spacing: Story = {\n  render: () => (\n    <Carousel className=\"w-full max-w-sm\">\n      <CarouselContent className=\"-ml-2 md:-ml-4\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pl-2 md:pl-4\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-2xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  )\n};\n\n/**\n * Vertical orientation carousel.\n */\nexport const Vertical: Story = {\n  render: () => (\n    <Carousel\n      orientation=\"vertical\"\n      className=\"w-full max-w-xs\"\n    >\n      <CarouselContent className=\"-mt-1 h-[200px]\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pt-1 md:basis-1/2\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  )\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/checkbox-story/checkbox.stories.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nexport function CheckboxDemo() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"terms\" />\n        <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n      </div>\n      <div className=\"flex items-start gap-3\">\n        <Checkbox id=\"terms-2\" defaultChecked />\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"terms-2\">Accept terms and conditions</Label>\n          <p className=\"text-muted-foreground text-sm\">\n            By clicking this checkbox, you agree to the terms and conditions.\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-start gap-3\">\n        <Checkbox id=\"toggle\" disabled />\n        <Label htmlFor=\"toggle\">Enable notifications</Label>\n      </div>\n      <Label className=\"hover:bg-accent/50 flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50 dark:has-[[aria-checked=true]]:border-blue-900 dark:has-[[aria-checked=true]]:bg-blue-950\">\n        <Checkbox\n          id=\"toggle-2\"\n          defaultChecked\n          className=\"data-[state=checked]:border-blue-600 data-[state=checked]:bg-blue-600 data-[state=checked]:text-white dark:data-[state=checked]:border-blue-700 dark:data-[state=checked]:bg-blue-700\"\n        />\n        <div className=\"grid gap-1.5 font-normal\">\n          <p className=\"text-sm leading-none font-medium\">\n            Enable notifications\n          </p>\n          <p className=\"text-muted-foreground text-sm\">\n            You can enable or disable notifications at any time.\n          </p>\n        </div>\n      </Label>\n    </div>\n  );\n}\n\n/**\n * A control that allows the user to toggle between checked and not checked.\n */\nconst meta: Meta<typeof Checkbox> = {\n  title: \"ui/Checkbox\",\n  component: Checkbox,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    defaultChecked: false,\n    disabled: false,\n    onCheckedChange: fn(),\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Checkbox>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the checkbox.\n */\nexport const Default: Story = {};\n\n/**\n * Checkbox in checked state.\n */\nexport const DefaultChecked: Story = {\n  args: {\n    defaultChecked: true,\n  },\n};\n\n/**\n * Disabled checkbox.\n */\nexport const DefaultDisabled: Story = {\n  args: {\n    disabled: true,\n  },\n};\n\n/**\n * Basic checkbox with label.\n */\nexport const Basic: Story = {\n  render: () => (\n    <div className=\"flex items-center gap-3\">\n      <Checkbox id=\"terms\" />\n      <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n    </div>\n  ),\n};\n\n/**\n * Checkbox with default checked state.\n */\nexport const Checked: Story = {\n  render: () => (\n    <div className=\"flex items-start gap-3\">\n      <Checkbox id=\"terms-2\" defaultChecked />\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"terms-2\">Accept terms and conditions</Label>\n        <p className=\"text-muted-foreground text-sm\">\n          By clicking this checkbox, you agree to the terms and conditions.\n        </p>\n      </div>\n    </div>\n  ),\n};\n\n/**\n * Disabled checkbox.\n */\nexport const Disabled: Story = {\n  render: () => (\n    <div className=\"flex items-start gap-3\">\n      <Checkbox id=\"toggle\" disabled />\n      <Label htmlFor=\"toggle\">Enable notifications</Label>\n    </div>\n  ),\n};\n\n/**\n * Custom styled checkbox with card-like appearance.\n */\nexport const WithCard: Story = {\n  render: () => (\n    <Label className=\"hover:bg-accent/50 flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50 dark:has-[[aria-checked=true]]:border-blue-900 dark:has-[[aria-checked=true]]:bg-blue-950\">\n      <Checkbox\n        id=\"toggle-2\"\n        defaultChecked\n        className=\"data-[state=checked]:border-blue-600 data-[state=checked]:bg-blue-600 data-[state=checked]:text-white dark:data-[state=checked]:border-blue-700 dark:data-[state=checked]:bg-blue-700\"\n      />\n      <div className=\"grid gap-1.5 font-normal\">\n        <p className=\"text-sm leading-none font-medium\">Enable notifications</p>\n        <p className=\"text-muted-foreground text-sm\">\n          You can enable or disable notifications at any time.\n        </p>\n      </div>\n    </Label>\n  ),\n};\n\n/**\n * Individual checkbox states\n */\nexport const States: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"unchecked\" />\n        <Label htmlFor=\"unchecked\">Unchecked</Label>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"checked\" defaultChecked />\n        <Label htmlFor=\"checked\">Checked</Label>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"disabled-unchecked\" disabled />\n        <Label htmlFor=\"disabled-unchecked\">Disabled Unchecked</Label>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Checkbox id=\"disabled-checked\" disabled defaultChecked />\n        <Label htmlFor=\"disabled-checked\">Disabled Checked</Label>\n      </div>\n    </div>\n  ),\n};\n\nexport const ShouldToggleCheck: Story = {\n  name: \"when the checkbox is clicked, should toggle between checked and not checked\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <div className=\"flex items-center gap-3\">\n      <Checkbox id=\"test-terms\" />\n      <Label htmlFor=\"test-terms\">Accept terms and conditions</Label>\n    </div>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const checkbox = canvas.getByRole(\"checkbox\");\n    await userEvent.click(checkbox);\n    expect(checkbox).toBeChecked();\n    await userEvent.click(checkbox, { delay: 100 });\n    expect(checkbox).not.toBeChecked();\n    await userEvent.click(checkbox, { delay: 100 });\n    expect(checkbox).toBeChecked();\n  },\n};\n\nconst items = [\n  {\n    id: \"recents\",\n    label: \"Recents\",\n  },\n  {\n    id: \"home\",\n    label: \"Home\",\n  },\n  {\n    id: \"applications\",\n    label: \"Applications\",\n  },\n  {\n    id: \"desktop\",\n    label: \"Desktop\",\n  },\n  {\n    id: \"downloads\",\n    label: \"Downloads\",\n  },\n  {\n    id: \"documents\",\n    label: \"Documents\",\n  },\n] as const;\n\nconst FormSchema = z.object({\n  items: z.array(z.string()).refine((value) => value.some((item) => item), {\n    message: \"You have to select at least one item.\",\n  }),\n});\n\nfunction CheckboxReactHookFormMultiple() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      items: [\"recents\", \"home\"],\n    },\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"items\"\n          render={() => (\n            <FormItem>\n              <div className=\"mb-4\">\n                <FormLabel className=\"text-base\">Sidebar</FormLabel>\n                <FormDescription>\n                  Select the items you want to display in the sidebar.\n                </FormDescription>\n              </div>\n              {items.map((item) => (\n                <FormField\n                  key={item.id}\n                  control={form.control}\n                  name=\"items\"\n                  render={({ field }) => {\n                    return (\n                      <FormItem\n                        key={item.id}\n                        className=\"flex flex-row items-center gap-2\"\n                      >\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value?.includes(item.id)}\n                            onCheckedChange={(checked) => {\n                              return checked\n                                ? field.onChange([...field.value, item.id])\n                                : field.onChange(\n                                    field.value?.filter(\n                                      (value) => value !== item.id,\n                                    ),\n                                  );\n                            }}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          {item.label}\n                        </FormLabel>\n                      </FormItem>\n                    );\n                  }}\n                />\n              ))}\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\n/**\n * Checkbox with React Hook Form\n */\nexport const WithForm: Story = {\n  render: () => <CheckboxReactHookFormMultiple />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/collapsible-story/collapsible.stories.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { ChevronsUpDown } from \"lucide-react\";\nimport * as React from \"react\";\nimport { expect, userEvent } from \"storybook/test\";\n\nexport function CollapsibleDemo() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <Collapsible\n      open={isOpen}\n      onOpenChange={setIsOpen}\n      className=\"flex w-[350px] flex-col gap-2\"\n    >\n      <div className=\"flex items-center justify-between gap-4 px-4\">\n        <h4 className=\"text-sm font-semibold\">\n          @peduarte starred 3 repositories\n        </h4>\n        <CollapsibleTrigger asChild>\n          <Button variant=\"ghost\" size=\"icon\" className=\"size-8\">\n            <ChevronsUpDown />\n            <span className=\"sr-only\">Toggle</span>\n          </Button>\n        </CollapsibleTrigger>\n      </div>\n      <div className=\"rounded-md border px-4 py-2 font-mono text-sm\">\n        @radix-ui/primitives\n      </div>\n      <CollapsibleContent className=\"flex flex-col gap-2\">\n        <div className=\"rounded-md border px-4 py-2 font-mono text-sm\">\n          @radix-ui/colors\n        </div>\n        <div className=\"rounded-md border px-4 py-2 font-mono text-sm\">\n          @stitches/react\n        </div>\n      </CollapsibleContent>\n    </Collapsible>\n  );\n}\n\n/**\n * An interactive component which expands/collapses a panel.\n */\nconst meta = {\n  title: \"ui/Collapsible\",\n  component: Collapsible,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Collapsible>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the collapsible with repository list example.\n */\nexport const Default: Story = {\n  render: () => <CollapsibleDemo />,\n};\n\nexport const ShouldOpenClose: Story = {\n  name: \"when collapsible trigger is clicked, should show content\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <CollapsibleDemo />,\n  play: async ({ canvas, step }) => {\n    const trigger = canvas.getByRole(\"button\");\n\n    await step(\"Open the collapsible\", async () => {\n      await userEvent.click(trigger, { delay: 100 });\n      const content = await canvas.findByText(\"@radix-ui/colors\");\n      expect(content).toBeVisible();\n    });\n\n    await step(\"Close the collapsible\", async () => {\n      await userEvent.click(trigger, { delay: 100 });\n      const content = canvas.queryByText(\"@radix-ui/colors\");\n      expect(content).not.toBeInTheDocument();\n    });\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/command-story/command.stories.tsx",
      "content": "\"use client\"\n\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\"\nimport {\n  Calculator,\n  Calendar,\n  CreditCard,\n  Settings,\n  Smile,\n  User,\n} from \"lucide-react\"\n\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@/components/ui/command\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nexport function CommandDemo() {\n  return (\n    <Command className=\"rounded-lg border shadow-md md:min-w-[450px]\">\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>\n            <Calendar />\n            <span>Calendar</span>\n          </CommandItem>\n          <CommandItem>\n            <Smile />\n            <span>Search Emoji</span>\n          </CommandItem>\n          <CommandItem disabled>\n            <Calculator />\n            <span>Calculator</span>\n          </CommandItem>\n        </CommandGroup>\n        <CommandSeparator />\n        <CommandGroup heading=\"Settings\">\n          <CommandItem>\n            <User />\n            <span>Profile</span>\n            <CommandShortcut>⌘P</CommandShortcut>\n          </CommandItem>\n          <CommandItem>\n            <CreditCard />\n            <span>Billing</span>\n            <CommandShortcut>⌘B</CommandShortcut>\n          </CommandItem>\n          <CommandItem>\n            <Settings />\n            <span>Settings</span>\n            <CommandShortcut>⌘S</CommandShortcut>\n          </CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  )\n}\n\n/**\n * Fast, composable, unstyled command menu for React.\n */\nconst meta = {\n  title: \"ui/Command\",\n  component: CommandDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"w-[450px] min-w-[350px]\">\n        <Story />\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof CommandDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default command menu with icons and shortcuts.\n */\nexport const Default: Story = {};\n\n/**\n * Basic command menu example from documentation.\n */\nexport const Basic: Story = {\n  render: () => (\n    <Command className=\"rounded-lg border shadow-md md:min-w-[450px]\">\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem disabled>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  ),\n};\n\n/**\n * Command menu with search functionality only.\n */\nexport const SearchOnly: Story = {\n  render: () => (\n    <Command className=\"rounded-lg border shadow-md\">\n      <CommandInput placeholder=\"Search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandItem>Search Result 1</CommandItem>\n        <CommandItem>Search Result 2</CommandItem>\n        <CommandItem>Search Result 3</CommandItem>\n        <CommandItem>Search Result 4</CommandItem>\n      </CommandList>\n    </Command>\n  ),\n};\n\n/**\n * Command menu without separators.\n */\nexport const NoSeparator: Story = {\n  render: () => (\n    <Command className=\"rounded-lg border shadow-md\">\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"All Commands\">\n          <CommandItem>\n            <Calendar />\n            <span>Calendar</span>\n          </CommandItem>\n          <CommandItem>\n            <Smile />\n            <span>Search Emoji</span>\n          </CommandItem>\n          <CommandItem>\n            <Calculator />\n            <span>Calculator</span>\n          </CommandItem>\n          <CommandItem>\n            <User />\n            <span>Profile</span>\n          </CommandItem>\n          <CommandItem>\n            <CreditCard />\n            <span>Billing</span>\n          </CommandItem>\n          <CommandItem>\n            <Settings />\n            <span>Settings</span>\n          </CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  ),\n};\n\n/**\n * Command menu with loading state.\n */\nexport const Loading: Story = {\n  render: () => (\n    <Command className=\"rounded-lg border shadow-md\">\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>Loading...</CommandEmpty>\n      </CommandList>\n    </Command>\n  ),\n};\n\nexport function CommandDialogDemo() {\n  const [open, setOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"j\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  return (\n    <>\n      <p className=\"text-sm text-muted-foreground\">\n        Press{\" \"}\n        <kbd className=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\">\n          <span className=\"text-xs\">⌘</span>J\n        </kbd>\n      </p>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Suggestions\">\n            <CommandItem>\n              <Calendar />\n              <span>Calendar</span>\n            </CommandItem>\n            <CommandItem>\n              <Smile />\n              <span>Search Emoji</span>\n            </CommandItem>\n            <CommandItem disabled>\n              <Calculator />\n              <span>Calculator</span>\n            </CommandItem>\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup heading=\"Settings\">\n            <CommandItem>\n              <User />\n              <span>Profile</span>\n              <CommandShortcut>⌘P</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <CreditCard />\n              <span>Billing</span>\n              <CommandShortcut>⌘B</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <Settings />\n              <span>Settings</span>\n              <CommandShortcut>⌘S</CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}\n\n/**\n * Command menu inside a dialog (Command Palette).\n */\nexport const CommandPalette: Story = {\n  render: () => <CommandDialogDemo />,\n  decorators: [\n    (Story) => (\n      <div className=\"flex flex-col items-center gap-4\">\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport const TypingInCombobox: Story = {\n  name: \"when typing into the combobox, should filter results\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByRole(\"combobox\");\n\n    // Search for \"calendar\" which should return a single result\n    await userEvent.type(input, \"calen\", { delay: 100 });\n    expect(canvas.getAllByRole(\"option\", { name: /calendar/i })).toHaveLength(\n      1,\n    );\n\n    await userEvent.clear(input);\n\n    // Search for \"settings\" which should return multiple results\n    await userEvent.type(input, \"se\", { delay: 100 });\n    expect(canvas.getAllByRole(\"option\").length).toBeGreaterThan(1);\n    expect(canvas.getAllByRole(\"option\", { name: /settings/i })).toHaveLength(1);\n\n    await userEvent.clear(input);\n\n    // Search for \"story\" which should return no results\n    await userEvent.type(input, \"story\", { delay: 100 });\n    expect(canvas.queryAllByRole(\"option\", { hidden: false })).toHaveLength(0);\n    expect(canvas.getByText(/no results/i)).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/context-menu-story/context-menu.stories.tsx",
      "content": "\"use client\"\n\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\n\n/**\n * Displays a menu to the user — such as a set of actions or functions —\n * triggered by a button.\n */\nconst meta = {\n  title: \"ui/ContextMenu\",\n  component: ContextMenu,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => (\n    <ContextMenu>\n      <ContextMenuTrigger className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\">\n        Right click here\n      </ContextMenuTrigger>\n      <ContextMenuContent className=\"w-52\">\n        <ContextMenuItem inset>\n          Back\n          <ContextMenuShortcut>⌘[</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset disabled>\n          Forward\n          <ContextMenuShortcut>⌘]</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset>\n          Reload\n          <ContextMenuShortcut>⌘R</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger>\n          <ContextMenuSubContent className=\"w-44\">\n            <ContextMenuItem>Save Page...</ContextMenuItem>\n            <ContextMenuItem>Create Shortcut...</ContextMenuItem>\n            <ContextMenuItem>Name Window...</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem>Developer Tools</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem variant=\"destructive\">Delete</ContextMenuItem>\n          </ContextMenuSubContent>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem checked>\n          Show Bookmarks\n        </ContextMenuCheckboxItem>\n        <ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem>\n        <ContextMenuSeparator />\n        <ContextMenuRadioGroup value=\"pedro\">\n          <ContextMenuLabel inset>People</ContextMenuLabel>\n          <ContextMenuRadioItem value=\"pedro\">\n            Pedro Duarte\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"colm\">Colm Tuite</ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenu>\n  )\n} satisfies Meta<typeof ContextMenu>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the context menu with all features.\n */\nexport const Default: Story = {};\n\nexport function ContextMenuDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenuTrigger className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\">\n        Right click here\n      </ContextMenuTrigger>\n      <ContextMenuContent className=\"w-52\">\n        <ContextMenuItem inset>\n          Back\n          <ContextMenuShortcut>⌘[</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset disabled>\n          Forward\n          <ContextMenuShortcut>⌘]</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset>\n          Reload\n          <ContextMenuShortcut>⌘R</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger>\n          <ContextMenuSubContent className=\"w-44\">\n            <ContextMenuItem>Save Page...</ContextMenuItem>\n            <ContextMenuItem>Create Shortcut...</ContextMenuItem>\n            <ContextMenuItem>Name Window...</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem>Developer Tools</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem variant=\"destructive\">Delete</ContextMenuItem>\n          </ContextMenuSubContent>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem checked>\n          Show Bookmarks\n        </ContextMenuCheckboxItem>\n        <ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem>\n        <ContextMenuSeparator />\n        <ContextMenuRadioGroup value=\"pedro\">\n          <ContextMenuLabel inset>People</ContextMenuLabel>\n          <ContextMenuRadioItem value=\"pedro\">\n            Pedro Duarte\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"colm\">Colm Tuite</ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/date-picker-story/date-picker.stories.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { parseDate } from \"chrono-node\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon, ChevronDownIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\n// Main DatePicker Demo (Date of Birth Picker)\nexport function DatePickerDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date\" className=\"px-1\">\n        Date of birth\n      </Label>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            id=\"date\"\n            className=\"w-48 justify-between font-normal\"\n          >\n            {date ? date.toLocaleDateString() : \"Select date\"}\n            <ChevronDownIcon />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n          <Calendar\n            mode=\"single\"\n            selected={date}\n            captionLayout=\"dropdown\"\n            onSelect={(date) => {\n              setDate(date);\n              setOpen(false);\n            }}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\n// Picker with Input\nfunction PickerWithInputDemo() {\n  const [date, setDate] = React.useState<Date>();\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date-input\" className=\"px-1\">\n        Date\n      </Label>\n      <div className=\"relative\">\n        <Input\n          id=\"date-input\"\n          type=\"text\"\n          placeholder=\"Select date\"\n          value={date ? format(date, \"PPP\") : \"\"}\n          readOnly\n          className=\"pr-10\"\n        />\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute top-0 right-0 h-full px-3\"\n            >\n              <CalendarIcon className=\"h-4 w-4\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"end\">\n            <Calendar mode=\"single\" selected={date} onSelect={setDate} />\n          </PopoverContent>\n        </Popover>\n      </div>\n    </div>\n  );\n}\n\n// Date and Time Picker\nfunction DateAndTimePickerDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n  return (\n    <div className=\"flex gap-4\">\n      <div className=\"flex flex-col gap-3\">\n        <Label htmlFor=\"date-picker\" className=\"px-1\">\n          Date\n        </Label>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              id=\"date-picker\"\n              className=\"w-32 justify-between font-normal\"\n            >\n              {date ? date.toLocaleDateString() : \"Select date\"}\n              <ChevronDownIcon />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              captionLayout=\"dropdown\"\n              onSelect={(date) => {\n                setDate(date);\n                setOpen(false);\n              }}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n      <div className=\"flex flex-col gap-3\">\n        <Label htmlFor=\"time\" className=\"px-1\">\n          Time\n        </Label>\n        <Input\n          type=\"time\"\n          id=\"time\"\n          name=\"time\"\n          placeholder=\"00:00\"\n          className=\"w-28 font-normal\"\n        />\n      </div>\n    </div>\n  );\n}\n\n// Natural Language Picker\nfunction NaturalLanguagePickerDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"In 2 days\");\n  const [date, setDate] = React.useState<Date | undefined>(\n    parseDate(value) || undefined,\n  );\n  const [month, setMonth] = React.useState<Date | undefined>(date);\n\n  function formatDate(date: Date | undefined) {\n    if (!date) {\n      return \"\";\n    }\n\n    return date.toLocaleDateString(\"en-US\", {\n      day: \"2-digit\",\n      month: \"long\",\n      year: \"numeric\",\n    });\n  }\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date\" className=\"px-1\">\n        Schedule Date\n      </Label>\n      <div className=\"relative flex gap-2\">\n        <Input\n          id=\"date\"\n          value={value}\n          placeholder=\"Tomorrow or next week\"\n          className=\"bg-background pr-10\"\n          onChange={(e) => {\n            setValue(e.target.value);\n            const date = parseDate(e.target.value);\n            if (date) {\n              setDate(date);\n              setMonth(date);\n            }\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"ArrowDown\") {\n              e.preventDefault();\n              setOpen(true);\n            }\n          }}\n        />\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              id=\"date-picker\"\n              variant=\"ghost\"\n              className=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\"\n            >\n              <CalendarIcon className=\"size-3.5\" />\n              <span className=\"sr-only\">Select date</span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"end\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              captionLayout=\"dropdown\"\n              month={month}\n              onMonthChange={setMonth}\n              onSelect={(date) => {\n                setDate(date);\n                setValue(formatDate(date));\n                setOpen(false);\n              }}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n      <div className=\"text-muted-foreground px-1 text-sm\">\n        Your post will be published on{\" \"}\n        <span className=\"font-medium\">{formatDate(date)}</span>.\n      </div>\n    </div>\n  );\n}\n\n// Form Demo\nconst FormSchema = z.object({\n  dob: z.date({\n    message: \"A date of birth is required.\",\n  }),\n});\n\nfunction FormDemo() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"dob\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Date of birth</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-[240px] pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\",\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value}\n                    onSelect={field.onChange}\n                    disabled={(date) =>\n                      date > new Date() || date < new Date(\"1900-01-01\")\n                    }\n                    captionLayout=\"dropdown\"\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                Your date of birth is used to calculate your age.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\n/**\n * A date picker component that combines a calendar with a popover.\n */\nconst meta = {\n  title: \"ui/DatePicker\",\n  component: DatePickerDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|FormSchema/,\n} satisfies Meta<typeof DatePickerDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Date of Birth Picker with dropdown calendar for month/year selection.\n */\nexport const Default: Story = {};\n\n/**\n * Date picker with input field.\n */\nexport const PickerWithInput: Story = {\n  render: () => <PickerWithInputDemo />,\n};\n\n/**\n * Date picker with time input field.\n */\nexport const DateAndTimePicker: Story = {\n  render: () => <DateAndTimePickerDemo />,\n};\n\n/**\n * Natural Language Picker - parse natural language dates\n *\n * Note: This example requires installing the chrono-node package:\n * npm install chrono-node\n */\nexport const NaturalLanguagePicker: Story = {\n  render: () => <NaturalLanguagePickerDemo />,\n};\n\n/**\n * Form Integration with React Hook Form\n *\n * Note: This example requires additional packages:\n * npm install react-hook-form zod @hookform/resolvers/zod\n */\nexport const FormIntegration: Story = {\n  render: () => <FormDemo />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/dialog-story/dialog.stories.tsx",
      "content": "import * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { Copy } from \"lucide-react\";\nimport { useRef, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\n\nfunction DialogDemo() {\n  return (\n    <Dialog>\n      <form>\n        <DialogTrigger asChild>\n          <Button variant=\"outline\">Open Dialog</Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Edit profile</DialogTitle>\n            <DialogDescription>\n              Make changes to your profile here. Click save when you&apos;re\n              done.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4\">\n            <div className=\"grid gap-3\">\n              <Label htmlFor=\"name-1\">Name</Label>\n              <Input id=\"name-1\" name=\"name\" defaultValue=\"Pedro Duarte\" />\n            </div>\n            <div className=\"grid gap-3\">\n              <Label htmlFor=\"username-1\">Username</Label>\n              <Input id=\"username-1\" name=\"username\" defaultValue=\"@peduarte\" />\n            </div>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </DialogClose>\n            <Button type=\"submit\">Save changes</Button>\n          </DialogFooter>\n        </DialogContent>\n      </form>\n    </Dialog>\n  );\n}\n\n// Custom Close Button Dialog (Share)\nfunction CustomCloseButtonDemo() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">Share</Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Share link</DialogTitle>\n          <DialogDescription>\n            Anyone who has this link will be able to view this.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"grid flex-1 gap-2\">\n            <Label htmlFor=\"link\" className=\"sr-only\">\n              Link\n            </Label>\n            <Input\n              id=\"link\"\n              defaultValue=\"https://ui.shadcn.com/docs/installation\"\n              readOnly\n            />\n          </div>\n          <Button type=\"submit\" size=\"sm\" className=\"px-3\">\n            <span className=\"sr-only\">Copy</span>\n            <Copy className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <DialogFooter className=\"sm:justify-start\">\n          <DialogClose asChild>\n            <Button type=\"button\" variant=\"secondary\">\n              Close\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n/**\n * A dialog component for editing user profile information.\n */\nconst meta = {\n  title: \"ui/Dialog\",\n  component: Dialog,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    onOpenChange: fn(),\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Dialog>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default profile editing dialog with form inputs.\n */\nexport const Default: Story = {\n  render: () => <DialogDemo />,\n};\n\n/**\n * Custom dialog with a share link and close button.\n */\nexport const CustomCloseButton: Story = {\n  render: () => <CustomCloseButtonDemo />,\n};\n\n/**\n * Ref 사용 예제: DialogContent에 ref를 전달하여 Radix UI primitive에 접근합니다.\n * 이 예제는 프로그래매틱하게 Dialog를 열고 닫는 방법을 보여줍니다.\n */\nexport const WithRef: Story = {\n  render: () => {\n    // 🎯 목적: Radix UI Dialog primitive의 ElementRef 타입을 사용하여 ref 생성\n    const contentRef =\n      useRef<React.ElementRef<typeof DialogPrimitive.Content>>(null);\n    const [open, setOpen] = useState(false);\n    const [message, setMessage] = useState(\"\");\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      setMessage(\"Form submitted successfully!\");\n      // 3초 후 Dialog 닫기\n      setTimeout(() => {\n        setOpen(false);\n        setMessage(\"\");\n      }, 3000);\n    };\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\">Open Controlled Dialog</Button>\n          </DialogTrigger>\n          <DialogContent ref={contentRef} className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Controlled Dialog Example</DialogTitle>\n              <DialogDescription>\n                This dialog can be controlled programmatically using state and\n                ref.\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit}>\n              <div className=\"grid gap-4\">\n                <div className=\"grid gap-3\">\n                  <Label htmlFor=\"email-input\">Email</Label>\n                  <Input\n                    id=\"email-input\"\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    required\n                  />\n                </div>\n                {message && (\n                  <div className=\"text-sm text-green-600 dark:text-green-400\">\n                    {message}\n                  </div>\n                )}\n              </div>\n              <DialogFooter className=\"mt-4\">\n                <DialogClose asChild>\n                  <Button type=\"button\" variant=\"outline\">\n                    Cancel\n                  </Button>\n                </DialogClose>\n                <Button type=\"submit\">Submit</Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        <div className=\"flex gap-2\">\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => setOpen(true)}>\n            Open via State\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => setOpen(false)}>\n            Close via State\n          </Button>\n        </div>\n\n        <p className=\"text-muted-foreground text-sm\">\n          Dialog state: {open ? \"Open\" : \"Closed\"}\n        </p>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 Dialog ref와 상태 제어를 테스트\n    const canvas = within(canvasElement);\n\n    // \"Open via State\" 버튼으로 Dialog 열기\n    const openButton = canvas.getByRole(\"button\", { name: \"Open via State\" });\n    await userEvent.click(openButton);\n\n    // Dialog가 열렸는지 확인\n    const dialogTitle = await canvas.findByText(\"Controlled Dialog Example\");\n    await expect(dialogTitle).toBeVisible();\n\n    // Dialog 상태 텍스트 확인\n    const stateText = canvas.getByText(/Dialog state:/);\n    await expect(stateText).toHaveTextContent(\"Dialog state: Open\");\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/drawer-story/drawer.stories.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { Minus, Plus } from \"lucide-react\"\nimport { Bar, BarChart, ResponsiveContainer } from \"recharts\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { cn } from \"@/lib/utils\"\n\nconst data = [\n  {\n    goal: 400,\n  },\n  {\n    goal: 300,\n  },\n  {\n    goal: 200,\n  },\n  {\n    goal: 300,\n  },\n  {\n    goal: 200,\n  },\n  {\n    goal: 278,\n  },\n  {\n    goal: 189,\n  },\n  {\n    goal: 239,\n  },\n  {\n    goal: 300,\n  },\n  {\n    goal: 200,\n  },\n  {\n    goal: 278,\n  },\n  {\n    goal: 189,\n  },\n  {\n    goal: 349,\n  },\n]\n\nfunction DrawerDemo() {\n  const [goal, setGoal] = React.useState(350)\n\n  function onClick(adjustment: number) {\n    setGoal(Math.max(200, Math.min(400, goal + adjustment)))\n  }\n\n  return (\n    <Drawer>\n      <DrawerTrigger asChild>\n        <Button variant=\"outline\">Open Drawer</Button>\n      </DrawerTrigger>\n      <DrawerContent>\n        <div className=\"mx-auto w-full max-w-sm\">\n          <DrawerHeader>\n            <DrawerTitle>Move Goal</DrawerTitle>\n            <DrawerDescription>Set your daily activity goal.</DrawerDescription>\n          </DrawerHeader>\n          <div className=\"p-4 pb-0\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"h-8 w-8 shrink-0 rounded-full\"\n                onClick={() => onClick(-10)}\n                disabled={goal <= 200}\n              >\n                <Minus />\n                <span className=\"sr-only\">Decrease</span>\n              </Button>\n              <div className=\"flex-1 text-center\">\n                <div className=\"text-7xl font-bold tracking-tighter\">\n                  {goal}\n                </div>\n                <div className=\"text-muted-foreground text-[0.70rem] uppercase\">\n                  Calories/day\n                </div>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"h-8 w-8 shrink-0 rounded-full\"\n                onClick={() => onClick(10)}\n                disabled={goal >= 400}\n              >\n                <Plus />\n                <span className=\"sr-only\">Increase</span>\n              </Button>\n            </div>\n            <div className=\"mt-3 h-[120px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={data}>\n                  <Bar\n                    dataKey=\"goal\"\n                    style={\n                      {\n                        fill: \"hsl(var(--foreground))\",\n                        opacity: 0.9,\n                      } as React.CSSProperties\n                    }\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n          <DrawerFooter>\n            <Button>Submit</Button>\n            <DrawerClose asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </DrawerClose>\n          </DrawerFooter>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\n// useMediaQuery hook\nfunction useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false)\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener(\"change\", onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener(\"change\", onChange)\n  }, [query])\n\n  return value\n}\n\n// Responsive Dialog/Drawer Example\nfunction ResponsiveDialogDrawerDemo() {\n  const [open, setOpen] = React.useState(false)\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\")\n\n  if (isDesktop) {\n    return (\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogTrigger asChild>\n          <Button variant=\"outline\">Edit Profile</Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Edit profile</DialogTitle>\n            <DialogDescription>\n              Make changes to your profile here. Click save when you&apos;re done.\n            </DialogDescription>\n          </DialogHeader>\n          <ProfileForm />\n        </DialogContent>\n      </Dialog>\n    )\n  }\n\n  return (\n    <Drawer open={open} onOpenChange={setOpen}>\n      <DrawerTrigger asChild>\n        <Button variant=\"outline\">Edit Profile</Button>\n      </DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader className=\"text-left\">\n          <DrawerTitle>Edit profile</DrawerTitle>\n          <DrawerDescription>\n            Make changes to your profile here. Click save when you&apos;re done.\n          </DrawerDescription>\n        </DrawerHeader>\n        <ProfileForm className=\"px-4\" />\n        <DrawerFooter className=\"pt-2\">\n          <DrawerClose asChild>\n            <Button variant=\"outline\">Cancel</Button>\n          </DrawerClose>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nfunction ProfileForm({ className }: React.ComponentProps<\"form\">) {\n  return (\n    <form className={cn(\"grid items-start gap-4\", className)}>\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input type=\"email\" id=\"email\" defaultValue=\"shadcn@example.com\" />\n      </div>\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"username\">Username</Label>\n        <Input id=\"username\" defaultValue=\"@shadcn\" />\n      </div>\n      <Button type=\"submit\">Save changes</Button>\n    </form>\n  )\n}\n\n/**\n * A drawer component with interactive goal setting demo.\n */\nconst meta = {\n  title: \"ui/Drawer\",\n  component: DrawerDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|useMediaQuery|ProfileForm/,\n} satisfies Meta<typeof DrawerDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default drawer with goal setting interface and chart visualization.\n */\nexport const Default: Story = {};\n\n/**\n * Responsive component that switches between Dialog (desktop) and Drawer (mobile).\n */\nexport const ResponsiveDialogDrawer: Story = {\n  render: () => <ResponsiveDialogDrawerDemo />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/dropdown-menu-story/dropdown-menu.stories.tsx",
      "content": "import * as React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nfunction DropdownMenuDemo() {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"start\">\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\n        <DropdownMenuGroup>\n          <DropdownMenuItem>\n            Profile\n            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Billing\n            <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Settings\n            <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Keyboard shortcuts\n            <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem>Team</DropdownMenuItem>\n          <DropdownMenuSub>\n            <DropdownMenuSubTrigger>Invite users</DropdownMenuSubTrigger>\n            <DropdownMenuPortal>\n              <DropdownMenuSubContent>\n                <DropdownMenuItem>Email</DropdownMenuItem>\n                <DropdownMenuItem>Message</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>More...</DropdownMenuItem>\n              </DropdownMenuSubContent>\n            </DropdownMenuPortal>\n          </DropdownMenuSub>\n          <DropdownMenuItem>\n            New Team\n            <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>GitHub</DropdownMenuItem>\n        <DropdownMenuItem>Support</DropdownMenuItem>\n        <DropdownMenuItem disabled>API</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          Log out\n          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\n// Dropdown Menu with Checkboxes\nfunction DropdownMenuCheckboxesDemo() {\n  const [showStatusBar, setShowStatusBar] = React.useState(true)\n  const [showActivityBar, setShowActivityBar] = React.useState(false)\n  const [showPanel, setShowPanel] = React.useState(false)\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\">\n        <DropdownMenuLabel>Appearance</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem\n          checked={showStatusBar}\n          onCheckedChange={setShowStatusBar}\n        >\n          Status Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showActivityBar}\n          onCheckedChange={setShowActivityBar}\n          disabled\n        >\n          Activity Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showPanel}\n          onCheckedChange={setShowPanel}\n        >\n          Panel\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\n// Dropdown Menu with Radio Group\nfunction DropdownMenuRadioGroupDemo() {\n  const [position, setPosition] = React.useState(\"bottom\")\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\">\n        <DropdownMenuLabel>Panel Position</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuRadioGroup value={position} onValueChange={setPosition}>\n          <DropdownMenuRadioItem value=\"top\">Top</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"bottom\">Bottom</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"right\">Right</DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\n/**\n * A comprehensive dropdown menu with shortcuts, submenus, and groups.\n */\nconst meta = {\n  title: \"ui/DropdownMenu\",\n  component: DropdownMenuDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof DropdownMenuDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default dropdown menu with all features.\n */\nexport const Default: Story = {};\n\n/**\n * Dropdown menu with checkbox items for toggling options.\n */\nexport const Checkboxes: Story = {\n  render: () => <DropdownMenuCheckboxesDemo />,\n};\n\n/**\n * Dropdown menu with radio group for selecting single option.\n */\nexport const RadioGroup: Story = {\n  render: () => <DropdownMenuRadioGroupDemo />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/form-story/form.stories.tsx",
      "content": "import { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { expect, userEvent, within } from \"storybook/test\";\nimport * as z from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\n/**\n * Building forms with React Hook Form and Zod.\n */\nconst meta: Meta<typeof Form> = {\n  title: \"ui/Form\",\n  component: Form,\n  tags: [\"autodocs\"],\n  argTypes: {},\n  render: (args) => <ProfileForm {...args} />,\n} satisfies Meta<typeof Form>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nconst formSchema = z.object({\n  username: z.string().min(6, {\n    message: \"Username must be at least 6 characters.\",\n  }),\n});\n\nconst ProfileForm = (args: Story[\"args\"]) => {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  });\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(\"onSubmit\", values);\n  }\n  return (\n    <Form {...args} {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <input\n                  className=\"border-input bg-background w-full rounded-md border px-3 py-2\"\n                  placeholder=\"username\"\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n};\n\n/**\n * The default form of the form.\n */\nexport const Default: Story = {};\n\nexport const ShouldSucceedWhenValidInput: Story = {\n  name: \"when typing a valid username, should not show an error message\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvas, step }) => {\n    await step(\"Type a valid username\", async () => {\n      await userEvent.type(\n        await canvas.findByRole(\"textbox\", { name: /username/i }),\n        \"mockuser\",\n      );\n    });\n\n    await step(\"Click the submit button\", async () => {\n      await userEvent.click(\n        await canvas.findByRole(\"button\", { name: /submit/i }),\n      );\n      expect(\n        await canvas.queryByText(/username must be at least 6 characters/i, {\n          exact: true,\n        }),\n      ).toBeNull();\n    });\n  },\n};\n\nexport const ShouldShowErrorWhenInvalidInput: Story = {\n  name: \"when typing a short username, should show an error message\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvas, step }) => {\n    await step(\"Type a short username\", async () => {\n      await userEvent.type(\n        await canvas.findByRole(\"textbox\", { name: /username/i }),\n        \"fail\",\n      );\n    });\n\n    await step(\"Click the submit button\", async () => {\n      await userEvent.click(\n        await canvas.findByRole(\"button\", { name: /submit/i }),\n      );\n      expect(\n        await canvas.queryByText(/username must be at least 6 characters/i, {\n          exact: true,\n        }),\n      ).toBeVisible();\n    });\n  },\n};\n\n/**\n * Ref 사용 예제: FormControl을 통해 Input에 ref를 전달하여 DOM 요소에 접근합니다.\n * react-hook-form의 register 대신 ref를 명시적으로 전달하는 방법을 보여줍니다.\n */\nexport const WithRef: Story = {\n  render: () => {\n    // 🎯 목적: react-hook-form과 함께 ref를 명시적으로 관리\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const formSchema = z.object({\n      email: z.string().email({ message: \"Invalid email address.\" }),\n      password: z\n        .string()\n        .min(8, { message: \"Password must be at least 8 characters.\" }),\n    });\n\n    const form = useForm<z.infer<typeof formSchema>>({\n      resolver: zodResolver(formSchema),\n      defaultValues: {\n        email: \"\",\n        password: \"\",\n      },\n    });\n\n    function onSubmit(values: z.infer<typeof formSchema>) {\n      console.log(\"Form submitted:\", values);\n    }\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field: { ref, ...fieldWithoutRef } }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      ref={(e) => {\n                        ref(e);\n                        inputRef.current = e;\n                      }}\n                      type=\"email\"\n                      placeholder=\"example@email.com\"\n                      {...fieldWithoutRef}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Your email address for account access.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Enter password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Must be at least 8 characters long.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2\">\n              <Button type=\"submit\">Submit</Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => inputRef.current?.focus()}\n              >\n                Focus Email Input\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 form ref와 validation을 테스트\n    const canvas = within(canvasElement);\n\n    // \"Focus Email Input\" 버튼으로 email input에 focus\n    const focusButton = canvas.getByRole(\"button\", {\n      name: \"Focus Email Input\",\n    });\n    await userEvent.click(focusButton);\n\n    // Email input이 포커스되었는지 확인\n    const emailInput = canvas.getByLabelText(\"Email\");\n    await expect(emailInput).toHaveFocus();\n\n    // 잘못된 이메일 입력\n    await userEvent.type(emailInput, \"invalid-email\");\n\n    // Submit 버튼 클릭\n    const submitButton = canvas.getByRole(\"button\", { name: \"Submit\" });\n    await userEvent.click(submitButton);\n\n    // Validation 에러 메시지 확인\n    const errorMessage = await canvas.findByText(\"Invalid email address.\");\n    await expect(errorMessage).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/hover-card-story/hover-card.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@/components/ui/hover-card\";\n\nfunction HoverCardDemo() {\n  return (\n    <HoverCard>\n      <HoverCardTrigger asChild>\n        <Button variant=\"link\">@nextjs</Button>\n      </HoverCardTrigger>\n      <HoverCardContent className=\"w-80\">\n        <div className=\"flex justify-between gap-4\">\n          <Avatar>\n            <AvatarImage src=\"https://github.com/vercel.png\" />\n            <AvatarFallback>VC</AvatarFallback>\n          </Avatar>\n          <div className=\"space-y-1\">\n            <h4 className=\"text-sm font-semibold\">@nextjs</h4>\n            <p className=\"text-sm\">\n              The React Framework – created and maintained by @vercel.\n            </p>\n            <div className=\"text-muted-foreground text-xs\">\n              Joined December 2021\n            </div>\n          </div>\n        </div>\n      </HoverCardContent>\n    </HoverCard>\n  );\n}\n\n/**\n * A hover card with avatar and profile information.\n */\nconst meta = {\n  title: \"ui/HoverCard\",\n  component: HoverCardDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof HoverCardDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default hover card showing user profile information.\n */\nexport const Default: Story = {};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/input-story/input.stories.tsx",
      "content": "import { expect, fn, userEvent, within } from \"storybook/test\";\n// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useRef } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\n/**\n * Displays a form input field or a component that looks like an input field.\n */\nconst meta = {\n  title: \"ui/Input\",\n  component: Input,\n  tags: [\"autodocs\"],\n  argTypes: {},\n  args: {\n    className: \"w-96\",\n    type: \"email\",\n    placeholder: \"Email\",\n    disabled: false,\n    onChange: fn(),\n  },\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof Input>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the input field.\n */\nexport const Default: Story = {};\n\n/**\n * Use the file type to allow users to select and upload files.\n */\nexport const File: Story = {\n  args: {\n    type: \"file\",\n    placeholder: undefined,\n    className: \"max-w-sm\",\n  },\n  render: (args) => (\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n      <Label htmlFor=\"picture\">Picture</Label>\n      <Input {...args} id=\"picture\" />\n    </div>\n  ),\n};\n\n/**\n * Use the `disabled` prop to make the input non-interactive and appears faded,\n * indicating that input is not currently accepted.\n */\nexport const Disabled: Story = {\n  args: { disabled: true },\n};\n\n/**\n * Use the `Label` component to includes a clear, descriptive label above or\n * alongside the input area to guide users.\n */\nexport const WithLabel: Story = {\n  render: (args) => (\n    <div className=\"grid items-center gap-1.5\">\n      <Label htmlFor=\"email\">{args.placeholder}</Label>\n      <Input {...args} id=\"email\" />\n    </div>\n  ),\n};\n\n/**\n * Use a text element below the input field to provide additional instructions\n * or information to users.\n */\nexport const WithHelperText: Story = {\n  render: (args) => (\n    <div className=\"grid items-center gap-1.5\">\n      <Label htmlFor=\"email-2\">{args.placeholder}</Label>\n      <Input {...args} id=\"email-2\" />\n      <p className=\"text-foreground/60 text-sm\">Enter your email address.</p>\n    </div>\n  ),\n};\n\n/**\n * Use the `Button` component to indicate that the input field can be submitted\n * or used to trigger an action.\n */\nexport const WithButton: Story = {\n  render: (args) => (\n    <div className=\"flex w-full max-w-sm items-center space-x-2\">\n      <Input {...args} />\n      <Button type=\"submit\" variant=\"outline\">\n        Subscribe\n      </Button>\n    </div>\n  ),\n};\n\nexport const ShouldEnterText: Story = {\n  name: \"when user enters text, should see it in the input field\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvas, step }) => {\n    const input = await canvas.findByPlaceholderText(/email/i);\n    const mockedInput = \"mocked@shadcn.com\";\n\n    await step(\"focus and type into the input field\", async () => {\n      await userEvent.click(input);\n      await userEvent.type(input, mockedInput);\n    });\n\n    expect(input).toHaveValue(mockedInput);\n  },\n};\n\n/**\n * Ref 사용 예제: Input에 ref를 전달하여 DOM 요소에 직접 접근합니다.\n * 이 예제는 ref를 통한 focus와 select 제어를 보여줍니다.\n */\nexport const WithRef: Story = {\n  render: () => {\n    // 🎯 목적: HTMLInputElement에 대한 ref를 생성하여 focus()와 select() 메서드 접근\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    return (\n      <div className=\"grid w-full max-w-sm items-center gap-4\">\n        <div className=\"grid items-center gap-1.5\">\n          <Label htmlFor=\"target-input\">Target Input</Label>\n          <Input\n            ref={inputRef}\n            id=\"target-input\"\n            type=\"text\"\n            placeholder=\"Type something...\"\n            defaultValue=\"Example text\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => inputRef.current?.focus()}\n          >\n            Focus Input\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => inputRef.current?.select()}\n          >\n            Select Text\n          </Button>\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 ref 동작을 자동으로 테스트\n    const canvas = within(canvasElement);\n    const input = canvas.getByLabelText(\"Target Input\") as HTMLInputElement;\n    const focusButton = canvas.getByRole(\"button\", { name: \"Focus Input\" });\n    const selectButton = canvas.getByRole(\"button\", { name: \"Select Text\" });\n\n    // \"Focus Input\" 버튼 클릭하여 input에 focus 트리거\n    await userEvent.click(focusButton);\n    await expect(input).toHaveFocus();\n\n    // \"Select Text\" 버튼 클릭하여 텍스트 선택 트리거\n    await userEvent.click(selectButton);\n    await expect(input.selectionStart).toBe(0);\n    await expect(input.selectionEnd).toBe(input.value.length);\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/input-otp-story/input-otp.stories.tsx",
      "content": "\"use client\"\n\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\"\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n\nfunction InputOTPDemo() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  )\n}\n\n/**\n * Accessible one-time password component with copy paste functionality.\n */\nconst meta = {\n  title: \"ui/InputOTP\",\n  component: InputOTPDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|.*Pattern$|.*Separator.*|.*Controlled$|.*Form$|FormSchema/,\n} satisfies Meta<typeof InputOTPDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default OTP input with separator.\n */\nexport const Default: Story = {};\n\n// Pattern example component\nfunction InputOTPPattern() {\n  return (\n    <InputOTP maxLength={6} pattern={REGEXP_ONLY_DIGITS_AND_CHARS}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  )\n}\n\n/**\n * OTP input with pattern validation (digits and characters only).\n */\nexport const Pattern: Story = {\n  render: () => <InputOTPPattern />,\n};\n\n// Separator example component\nfunction InputOTPWithSeparator() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={2} />\n        <InputOTPSlot index={3} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  )\n}\n\n/**\n * OTP input with multiple separators.\n */\nexport const Separator: Story = {\n  render: () => <InputOTPWithSeparator />,\n};\n\n// Separator with 4 digits example\nfunction InputOTPSeparatorFourDigits() {\n  return (\n    <InputOTP maxLength={4}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={2} />\n        <InputOTPSlot index={3} />\n      </InputOTPGroup>\n    </InputOTP>\n  )\n}\n\n/**\n * OTP input with separator for 4 digits.\n */\nexport const SeparatorFourDigits: Story = {\n  render: () => <InputOTPSeparatorFourDigits />,\n};\n\n// Controlled example component\nfunction InputOTPControlled() {\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <div className=\"space-y-2\">\n      <InputOTP\n        maxLength={6}\n        value={value}\n        onChange={(value) => setValue(value)}\n      >\n        <InputOTPGroup>\n          <InputOTPSlot index={0} />\n          <InputOTPSlot index={1} />\n          <InputOTPSlot index={2} />\n          <InputOTPSlot index={3} />\n          <InputOTPSlot index={4} />\n          <InputOTPSlot index={5} />\n        </InputOTPGroup>\n      </InputOTP>\n      <div className=\"text-center text-sm\">\n        {value === \"\" ? (\n          <>Enter your one-time password.</>\n        ) : (\n          <>You entered: {value}</>\n        )}\n      </div>\n    </div>\n  )\n}\n\n/**\n * Controlled OTP input with value display.\n */\nexport const Controlled: Story = {\n  render: () => <InputOTPControlled />,\n};\n\n// Form example component\nconst FormSchema = z.object({\n  pin: z.string().min(6, {\n    message: \"Your one-time password must be 6 characters.\",\n  }),\n})\n\nfunction InputOTPForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      pin: \"\",\n    },\n  })\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    })\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"pin\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>One-Time Password</FormLabel>\n              <FormControl>\n                <InputOTP maxLength={6} {...field}>\n                  <InputOTPGroup>\n                    <InputOTPSlot index={0} />\n                    <InputOTPSlot index={1} />\n                    <InputOTPSlot index={2} />\n                    <InputOTPSlot index={3} />\n                    <InputOTPSlot index={4} />\n                    <InputOTPSlot index={5} />\n                  </InputOTPGroup>\n                </InputOTP>\n              </FormControl>\n              <FormDescription>\n                Please enter the one-time password sent to your phone.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n\n/**\n * OTP input integrated with React Hook Form and Zod validation.\n */\nexport const WithForm: Story = {\n  render: () => <InputOTPForm />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/label-story/label.stories.tsx",
      "content": "import { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nfunction LabelDemo() {\n  return (\n    <div>\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox id=\"terms\" />\n        <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Renders an accessible label associated with controls.\n */\nconst meta = {\n  title: \"ui/Label\",\n  component: Label,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    children: \"Label\",\n    htmlFor: \"input\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Label>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the label.\n */\nexport const Default: Story = {};\n\n/**\n * Label with checkbox example.\n */\nexport const WithCheckbox: Story = {\n  render: () => <LabelDemo />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/menubar-story/menubar.stories.tsx",
      "content": "import {\n  Menubar,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from \"@/components/ui/menubar\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nfunction MenubarDemo() {\n  return (\n    <Menubar>\n      <MenubarMenu>\n        <MenubarTrigger>File</MenubarTrigger>\n        <MenubarContent>\n          <MenubarItem>\n            New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            New Window <MenubarShortcut>⌘N</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem disabled>New Incognito Window</MenubarItem>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Share</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarItem>Email link</MenubarItem>\n              <MenubarItem>Messages</MenubarItem>\n              <MenubarItem>Notes</MenubarItem>\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem>\n            Print... <MenubarShortcut>⌘P</MenubarShortcut>\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n      <MenubarMenu>\n        <MenubarTrigger>Edit</MenubarTrigger>\n        <MenubarContent>\n          <MenubarItem>\n            Undo <MenubarShortcut>⌘Z</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Redo <MenubarShortcut>⇧⌘Z</MenubarShortcut>\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Find</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarItem>Search the web</MenubarItem>\n              <MenubarSeparator />\n              <MenubarItem>Find...</MenubarItem>\n              <MenubarItem>Find Next</MenubarItem>\n              <MenubarItem>Find Previous</MenubarItem>\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem>Cut</MenubarItem>\n          <MenubarItem>Copy</MenubarItem>\n          <MenubarItem>Paste</MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n      <MenubarMenu>\n        <MenubarTrigger>View</MenubarTrigger>\n        <MenubarContent>\n          <MenubarCheckboxItem>Always Show Bookmarks Bar</MenubarCheckboxItem>\n          <MenubarCheckboxItem checked>\n            Always Show Full URLs\n          </MenubarCheckboxItem>\n          <MenubarSeparator />\n          <MenubarItem inset>\n            Reload <MenubarShortcut>⌘R</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem disabled inset>\n            Force Reload <MenubarShortcut>⇧⌘R</MenubarShortcut>\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem inset>Toggle Fullscreen</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem inset>Hide Sidebar</MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n      <MenubarMenu>\n        <MenubarTrigger>Profiles</MenubarTrigger>\n        <MenubarContent>\n          <MenubarRadioGroup value=\"benoit\">\n            <MenubarRadioItem value=\"andy\">Andy</MenubarRadioItem>\n            <MenubarRadioItem value=\"benoit\">Benoit</MenubarRadioItem>\n            <MenubarRadioItem value=\"Luis\">Luis</MenubarRadioItem>\n          </MenubarRadioGroup>\n          <MenubarSeparator />\n          <MenubarItem inset>Edit...</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem inset>Add Profile...</MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n    </Menubar>\n  );\n}\n\n/**\n * A visually persistent menu common in desktop applications that provides\n * quick access to a consistent set of commands.\n */\nconst meta = {\n  title: \"ui/Menubar\",\n  component: MenubarDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof MenubarDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the menubar with multiple menus, submenus, radio groups, and checkbox items.\n */\nexport const Default: Story = {};\n\nexport const ShouldOpenMenubar: Story = {\n  name: \"when menubar trigger is clicked, should open menu items\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <MenubarDemo />,\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step(\"click 'Edit' menubar trigger\", async () => {\n      const editTrigger = canvas.getByRole(\"menuitem\", { name: /edit/i });\n      await userEvent.click(editTrigger);\n    });\n\n    const undoItem = await canvas.findByText(/Undo/i);\n    await expect(undoItem).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/navigation-menu-story/navigation-menu.stories.tsx",
      "content": "\"use client\";\n\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { CircleCheckIcon, CircleHelpIcon, CircleIcon } from \"lucide-react\";\nimport Link from \"next/link\";\nimport * as React from \"react\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  navigationMenuTriggerStyle,\n} from \"@/components/ui/navigation-menu\";\n\nconst components: { title: string; href: string; description: string }[] = [\n  {\n    title: \"Alert Dialog\",\n    href: \"/docs/primitives/alert-dialog\",\n    description:\n      \"A modal dialog that interrupts the user with important content and expects a response.\",\n  },\n  {\n    title: \"Hover Card\",\n    href: \"/docs/primitives/hover-card\",\n    description:\n      \"For sighted users to preview content available behind a link.\",\n  },\n  {\n    title: \"Progress\",\n    href: \"/docs/primitives/progress\",\n    description:\n      \"Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.\",\n  },\n  {\n    title: \"Scroll-area\",\n    href: \"/docs/primitives/scroll-area\",\n    description: \"Visually or semantically separates content.\",\n  },\n  {\n    title: \"Tabs\",\n    href: \"/docs/primitives/tabs\",\n    description:\n      \"A set of layered sections of content—known as tab panels—that are displayed one at a time.\",\n  },\n  {\n    title: \"Tooltip\",\n    href: \"/docs/primitives/tooltip\",\n    description:\n      \"A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\",\n  },\n];\n\nfunction NavigationMenuDemo() {\n  return (\n    <NavigationMenu viewport={false}>\n      <NavigationMenuList>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Home</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid gap-2 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]\">\n              <li className=\"row-span-3\">\n                <NavigationMenuLink asChild>\n                  <Link\n                    className=\"from-muted/50 to-muted flex h-full w-full flex-col justify-end rounded-md bg-linear-to-b p-6 no-underline outline-hidden select-none focus:shadow-md\"\n                    href=\"/\"\n                  >\n                    <div className=\"mt-4 mb-2 text-lg font-medium\">\n                      shadcn/ui\n                    </div>\n                    <p className=\"text-muted-foreground text-sm leading-tight\">\n                      Beautifully designed components built with Tailwind CSS.\n                    </p>\n                  </Link>\n                </NavigationMenuLink>\n              </li>\n              <ListItem href=\"/docs\" title=\"Introduction\">\n                Re-usable components built using Radix UI and Tailwind CSS.\n              </ListItem>\n              <ListItem href=\"/docs/installation\" title=\"Installation\">\n                How to install dependencies and structure your app.\n              </ListItem>\n              <ListItem href=\"/docs/primitives/typography\" title=\"Typography\">\n                Styles for headings, paragraphs, lists...etc\n              </ListItem>\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Components</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[400px] gap-2 md:w-[500px] md:grid-cols-2 lg:w-[600px]\">\n              {components.map((component) => (\n                <ListItem\n                  key={component.title}\n                  title={component.title}\n                  href={component.href}\n                >\n                  {component.description}\n                </ListItem>\n              ))}\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuLink asChild className={navigationMenuTriggerStyle()}>\n            <Link href=\"/docs\">Docs</Link>\n          </NavigationMenuLink>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>List</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[300px] gap-4\">\n              <li>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\">\n                    <div className=\"font-medium\">Components</div>\n                    <div className=\"text-muted-foreground\">\n                      Browse all components in the library.\n                    </div>\n                  </Link>\n                </NavigationMenuLink>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\">\n                    <div className=\"font-medium\">Documentation</div>\n                    <div className=\"text-muted-foreground\">\n                      Learn how to use the library.\n                    </div>\n                  </Link>\n                </NavigationMenuLink>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\">\n                    <div className=\"font-medium\">Blog</div>\n                    <div className=\"text-muted-foreground\">\n                      Read our latest blog posts.\n                    </div>\n                  </Link>\n                </NavigationMenuLink>\n              </li>\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Simple</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[200px] gap-4\">\n              <li>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\">Components</Link>\n                </NavigationMenuLink>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\">Documentation</Link>\n                </NavigationMenuLink>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\">Blocks</Link>\n                </NavigationMenuLink>\n              </li>\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>With Icon</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[200px] gap-4\">\n              <li>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\" className=\"flex-row items-center gap-2\">\n                    <CircleHelpIcon />\n                    Backlog\n                  </Link>\n                </NavigationMenuLink>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\" className=\"flex-row items-center gap-2\">\n                    <CircleIcon />\n                    To Do\n                  </Link>\n                </NavigationMenuLink>\n                <NavigationMenuLink asChild>\n                  <Link href=\"#\" className=\"flex-row items-center gap-2\">\n                    <CircleCheckIcon />\n                    Done\n                  </Link>\n                </NavigationMenuLink>\n              </li>\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n      </NavigationMenuList>\n    </NavigationMenu>\n  );\n}\n\nfunction ListItem({\n  title,\n  children,\n  href,\n  ...props\n}: React.ComponentPropsWithoutRef<\"li\"> & { href: string }) {\n  return (\n    <li {...props}>\n      <NavigationMenuLink asChild>\n        <Link href={href}>\n          <div className=\"text-sm leading-none font-medium\">{title}</div>\n          <p className=\"text-muted-foreground line-clamp-2 text-sm leading-snug\">\n            {children}\n          </p>\n        </Link>\n      </NavigationMenuLink>\n    </li>\n  );\n}\n\n/**\n * A collection of links for navigating websites.\n */\nconst meta = {\n  title: \"ui/NavigationMenu\",\n  component: NavigationMenuDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|ListItem|components/,\n} satisfies Meta<typeof NavigationMenuDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the navigation menu with multiple variations including grid layouts, icons, and different content styles.\n */\nexport const Default: Story = {};\n\n// Link navigation item component\nfunction NavigationMenuLinkDemo() {\n  return (\n    <NavigationMenu>\n      <NavigationMenuList>\n        <NavigationMenuItem>\n          <NavigationMenuLink asChild>\n            <Link href=\"/docs\">Documentation</Link>\n          </NavigationMenuLink>\n        </NavigationMenuItem>\n      </NavigationMenuList>\n    </NavigationMenu>\n  );\n}\n\n/**\n * Navigation menu with a simple link item using Next.js Link component.\n */\nexport const LinkItem: Story = {\n  render: () => <NavigationMenuLinkDemo />,\n};\n\nexport const ShouldOpenNavigationMenu: Story = {\n  name: \"when navigation menu trigger is clicked, should show content\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <NavigationMenuDemo />,\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step(\"click 'Components' trigger to open menu\", async () => {\n      const componentsTrigger = canvas.getByRole(\"button\", {\n        name: /components/i,\n      });\n      await userEvent.click(componentsTrigger);\n    });\n\n    const alertDialogLink = await canvas.findByText(/Alert Dialog/i);\n    await expect(alertDialogLink).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/pagination-story/pagination.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\"\n\nfunction PaginationDemo() {\n  return (\n    <Pagination>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\">1</PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\" isActive>\n            2\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\">3</PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationEllipsis />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  )\n}\n\n/**\n * Pagination with page navigation, next and previous links.\n */\nconst meta = {\n  title: \"ui/Pagination\",\n  component: PaginationDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof PaginationDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the pagination with active state.\n */\nexport const Default: Story = {};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/popover-story/popover.stories.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nfunction PopoverDemo() {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\">Open popover</Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80\">\n        <div className=\"grid gap-4\">\n          <div className=\"space-y-2\">\n            <h4 className=\"leading-none font-medium\">Dimensions</h4>\n            <p className=\"text-muted-foreground text-sm\">\n              Set the dimensions for the layer.\n            </p>\n          </div>\n          <div className=\"grid gap-2\">\n            <div className=\"grid grid-cols-3 items-center gap-4\">\n              <Label htmlFor=\"width\">Width</Label>\n              <Input\n                id=\"width\"\n                defaultValue=\"100%\"\n                className=\"col-span-2 h-8\"\n              />\n            </div>\n            <div className=\"grid grid-cols-3 items-center gap-4\">\n              <Label htmlFor=\"maxWidth\">Max. width</Label>\n              <Input\n                id=\"maxWidth\"\n                defaultValue=\"300px\"\n                className=\"col-span-2 h-8\"\n              />\n            </div>\n            <div className=\"grid grid-cols-3 items-center gap-4\">\n              <Label htmlFor=\"height\">Height</Label>\n              <Input\n                id=\"height\"\n                defaultValue=\"25px\"\n                className=\"col-span-2 h-8\"\n              />\n            </div>\n            <div className=\"grid grid-cols-3 items-center gap-4\">\n              <Label htmlFor=\"maxHeight\">Max. height</Label>\n              <Input\n                id=\"maxHeight\"\n                defaultValue=\"none\"\n                className=\"col-span-2 h-8\"\n              />\n            </div>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n/**\n * Displays rich content in a portal, triggered by a button.\n */\nconst meta = {\n  title: \"ui/Popover\",\n  component: Popover,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof Popover>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the popover with a form for setting dimensions.\n */\nexport const Default: Story = {\n  render: () => <PopoverDemo />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/progress-story/progress.stories.tsx",
      "content": "\"use client\"\n\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\"\nimport { Progress } from \"@/components/ui/progress\"\n\n/**\n * Displays an indicator showing the completion progress of a task, typically\n * displayed as a progress bar.\n */\nconst meta = {\n  title: \"ui/Progress\",\n  component: Progress,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => {\n    const [progress, setProgress] = React.useState(13)\n\n    React.useEffect(() => {\n      const timer = setTimeout(() => setProgress(66), 500)\n      return () => clearTimeout(timer)\n    }, [])\n\n    return (\n      <div className=\"w-[350px]\">\n        <Progress value={progress} className=\"w-full\" />\n      </div>\n    )\n  }\n} satisfies Meta<typeof Progress>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default animated progress bar that updates from 13% to 66% after 500ms.\n */\nexport const Default: Story = {};\n\nexport function ProgressDemo() {\n  const [progress, setProgress] = React.useState(13)\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setProgress(66), 500)\n    return () => clearTimeout(timer)\n  }, [])\n\n  return (\n    <div className=\"w-[350px]\">\n      <Progress value={progress} className=\"w-full\" />\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/radio-group-story/radio-group.stories.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\n/**\n * A set of checkable buttons—known as radio buttons—where no more than one of\n * the buttons can be checked at a time.\n */\nconst meta = {\n  title: \"ui/RadioGroup\",\n  component: RadioGroup,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    defaultValue: \"comfortable\",\n    disabled: false,\n    onValueChange: fn(),\n  },\n  excludeStories: /.*Demo$|FormSchema/,\n} satisfies Meta<typeof RadioGroup>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the radio group.\n */\nexport const Default: Story = {\n  render: (args) => (\n    <RadioGroup {...args}>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"default\" id=\"r1\" />\n        <Label htmlFor=\"r1\">Default</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"comfortable\" id=\"r2\" />\n        <Label htmlFor=\"r2\">Comfortable</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"compact\" id=\"r3\" />\n        <Label htmlFor=\"r3\">Compact</Label>\n      </div>\n    </RadioGroup>\n  ),\n};\n\n/**\n * Disabled radio group.\n */\nexport const Disabled: Story = {\n  args: {\n    disabled: true,\n  },\n  render: (args) => (\n    <RadioGroup {...args}>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"default\" id=\"r1-disabled\" />\n        <Label htmlFor=\"r1-disabled\">Default</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"comfortable\" id=\"r2-disabled\" />\n        <Label htmlFor=\"r2-disabled\">Comfortable</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"compact\" id=\"r3-disabled\" />\n        <Label htmlFor=\"r3-disabled\">Compact</Label>\n      </div>\n    </RadioGroup>\n  ),\n};\n\n/**\n * Radio group integrated with React Hook Form and Zod validation.\n */\nexport const WithForm: Story = {\n  render: () => <RadioGroupFormDemo />,\n};\n\nexport function RadioGroupDemo() {\n  return (\n    <RadioGroup defaultValue=\"comfortable\">\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"default\" id=\"r1\" />\n        <Label htmlFor=\"r1\">Default</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"comfortable\" id=\"r2\" />\n        <Label htmlFor=\"r2\">Comfortable</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"compact\" id=\"r3\" />\n        <Label htmlFor=\"r3\">Compact</Label>\n      </div>\n    </RadioGroup>\n  );\n}\n\n// Form example\nconst FormSchema = z.object({\n  type: z.enum([\"all\", \"mentions\", \"none\"], {\n    message: \"You need to select a notification type.\",\n  }),\n});\n\nfunction RadioGroupFormDemo() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"type\"\n          render={({ field }) => (\n            <FormItem className=\"space-y-3\">\n              <FormLabel>Notify me about...</FormLabel>\n              <FormControl>\n                <RadioGroup\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  className=\"flex flex-col space-y-1\"\n                >\n                  <FormItem className=\"flex items-center space-y-0 space-x-3\">\n                    <FormControl>\n                      <RadioGroupItem value=\"all\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      All new messages\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-y-0 space-x-3\">\n                    <FormControl>\n                      <RadioGroupItem value=\"mentions\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      Direct messages and mentions\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-y-0 space-x-3\">\n                    <FormControl>\n                      <RadioGroupItem value=\"none\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">Nothing</FormLabel>\n                  </FormItem>\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\nexport const ShouldSelectRadioOption: Story = {\n  name: \"when user selects a radio option, should update the value\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <RadioGroup defaultValue=\"\">\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"default\" id=\"r1-test\" />\n        <Label htmlFor=\"r1-test\">Default</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"comfortable\" id=\"r2-test\" />\n        <Label htmlFor=\"r2-test\">Comfortable</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"compact\" id=\"r3-test\" />\n        <Label htmlFor=\"r3-test\">Compact</Label>\n      </div>\n    </RadioGroup>\n  ),\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step(\"select 'Comfortable' radio option\", async () => {\n      const comfortableRadio = canvas.getByLabelText(/comfortable/i);\n      await userEvent.click(comfortableRadio);\n    });\n\n    const comfortableRadio = canvas.getByLabelText(/comfortable/i);\n    await expect(comfortableRadio).toBeChecked();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/resizable-story/resizable.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\"\n\n/**\n * Accessible resizable panel groups and layouts with keyboard support.\n */\nconst meta = {\n  title: \"ui/Resizable\",\n  component: ResizablePanelGroup,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  args: {\n    direction: \"horizontal\",\n    className: \"max-w-md rounded-lg border md:min-w-[450px]\"\n  },\n  render: (args) => (\n    <ResizablePanelGroup {...args}>\n      <ResizablePanel defaultSize={50}>\n        <div className=\"flex h-[200px] items-center justify-center p-6\">\n          <span className=\"font-semibold\">One</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={50}>\n        <ResizablePanelGroup direction=\"vertical\">\n          <ResizablePanel defaultSize={25}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Two</span>\n            </div>\n          </ResizablePanel>\n          <ResizableHandle />\n          <ResizablePanel defaultSize={75}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Three</span>\n            </div>\n          </ResizablePanel>\n        </ResizablePanelGroup>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  )\n} satisfies Meta<typeof ResizablePanelGroup>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the resizable panel group.\n */\nexport const Default: Story = {};\n\n/**\n * Vertical layout for resizable panels.\n */\nexport const Vertical: Story = {\n  render: () => (\n    <ResizablePanelGroup\n      direction=\"vertical\"\n      className=\"min-h-[200px] max-w-md rounded-lg border md:min-w-[450px]\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Header</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  )\n};\n\n/**\n * Resizable handle with visible handle.\n */\nexport const WithHandle: Story = {\n  render: () => (\n    <ResizablePanelGroup\n      direction=\"horizontal\"\n      className=\"min-h-[200px] max-w-md rounded-lg border md:min-w-[450px]\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Sidebar</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  )\n};\n\nexport function ResizableDemo() {\n  return (\n    <ResizablePanelGroup\n      direction=\"horizontal\"\n      className=\"max-w-md rounded-lg border md:min-w-[450px]\"\n    >\n      <ResizablePanel defaultSize={50}>\n        <div className=\"flex h-[200px] items-center justify-center p-6\">\n          <span className=\"font-semibold\">One</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={50}>\n        <ResizablePanelGroup direction=\"vertical\">\n          <ResizablePanel defaultSize={25}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Two</span>\n            </div>\n          </ResizablePanel>\n          <ResizableHandle />\n          <ResizablePanel defaultSize={75}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Three</span>\n            </div>\n          </ResizablePanel>\n        </ResizablePanelGroup>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/scroll-area-story/scroll-area.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\"\nimport Image from \"next/image\"\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\"\nimport { Separator } from \"@/components/ui/separator\"\n\nconst tags = Array.from({ length: 50 }).map(\n  (_, i, a) => `v1.2.0-beta.${a.length - i}`\n)\n\ninterface Artwork {\n  artist: string\n  art: string\n}\n\nconst works: Artwork[] = [\n  {\n    artist: \"Ornella Binni\",\n    art: \"https://images.unsplash.com/photo-1465869185982-5a1a7522cbcb?auto=format&fit=crop&w=300&q=80\",\n  },\n  {\n    artist: \"Tom Byrom\",\n    art: \"https://images.unsplash.com/photo-1548516173-3cabfa4607e9?auto=format&fit=crop&w=300&q=80\",\n  },\n  {\n    artist: \"Vladimir Malyavko\",\n    art: \"https://images.unsplash.com/photo-1494337480532-3725c85fd2ab?auto=format&fit=crop&w=300&q=80\",\n  },\n]\n\n// Demo component from official docs\nexport function ScrollAreaDemo() {\n  return (\n    <ScrollArea className=\"h-72 w-48 rounded-md border\">\n      <div className=\"p-4\">\n        <h4 className=\"mb-4 text-sm leading-none font-medium\">Tags</h4>\n        {tags.map((tag) => (\n          <React.Fragment key={tag}>\n            <div className=\"text-sm\">{tag}</div>\n            <Separator className=\"my-2\" />\n          </React.Fragment>\n        ))}\n      </div>\n    </ScrollArea>\n  )\n}\n\n// Horizontal demo component from official docs\nexport function ScrollAreaHorizontalDemo() {\n  return (\n    <ScrollArea className=\"w-96 rounded-md border whitespace-nowrap\">\n      <div className=\"flex w-max space-x-4 p-4\">\n        {works.map((artwork) => (\n          <figure key={artwork.artist} className=\"shrink-0\">\n            <div className=\"overflow-hidden rounded-md\">\n              <Image\n                src={artwork.art}\n                alt={`Photo by ${artwork.artist}`}\n                className=\"aspect-[3/4] h-fit w-fit object-cover\"\n                width={300}\n                height={400}\n              />\n            </div>\n            <figcaption className=\"text-muted-foreground pt-2 text-xs\">\n              Photo by{\" \"}\n              <span className=\"text-foreground font-semibold\">\n                {artwork.artist}\n              </span>\n            </figcaption>\n          </figure>\n        ))}\n      </div>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  )\n}\n\n/**\n * Augments native scroll functionality for custom, cross-browser styling.\n */\nconst meta = {\n  title: \"ui/ScrollArea\",\n  component: ScrollArea,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  argTypes: {\n    className: {\n      control: 'text',\n      description: 'Additional CSS classes to apply'\n    },\n    children: {\n      control: false,\n      description: 'Content to be scrolled'\n    }\n  }\n} satisfies Meta<typeof ScrollArea>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the scroll area with vertical scrolling.\n */\nexport const Default: Story = {\n  render: () => <ScrollAreaDemo />\n};\n\n/**\n * Basic usage with simple text content.\n */\nexport const BasicUsage: Story = {\n  render: () => (\n    <ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n      Jokester began sneaking into the castle in the middle of the night and leaving \n      jokes all over the place: under the king's pillow, in his soup, even in the \n      royal toilet. The king was furious, but he couldn't seem to stop Jokester. \n      And then, one day, the people of the kingdom discovered that the jokes left \n      by Jokester were so funny that they couldn't help but laugh. And once they \n      started laughing, they couldn't stop. The laughter spread throughout the \n      kingdom, bringing joy and happiness to everyone. Even the grumpy king couldn't \n      help but chuckle at some of the jokes. From that day on, Jokester became a \n      beloved figure in the kingdom, bringing laughter and joy to all.\n    </ScrollArea>\n  )\n};\n\n/**\n * Horizontal scrolling with images.\n */\nexport const HorizontalScrolling: Story = {\n  render: () => <ScrollAreaHorizontalDemo />\n};\n\n/**\n * Vertical scrolling with custom height.\n */\nexport const CustomHeight: Story = {\n  render: () => (\n    <ScrollArea className=\"h-[400px] w-[250px] rounded-md border\">\n      <div className=\"p-4\">\n        <h4 className=\"mb-4 text-sm font-medium leading-none\">Notifications</h4>\n        {Array.from({ length: 20 }).map((_, i) => (\n          <React.Fragment key={i}>\n            <div className=\"py-2\">\n              <p className=\"text-sm font-medium\">Notification {i + 1}</p>\n              <p className=\"text-sm text-muted-foreground\">\n                This is a sample notification message that might be longer than expected and needs scrolling.\n              </p>\n            </div>\n            {i < 19 && <Separator />}\n          </React.Fragment>\n        ))}\n      </div>\n    </ScrollArea>\n  )\n};\n\n/**\n * Both horizontal and vertical scrolling.\n */\nexport const BothDirections: Story = {\n  render: () => (\n    <ScrollArea className=\"h-[300px] w-[300px] rounded-md border\">\n      <div className=\"p-4\">\n        <table className=\"w-[600px]\">\n          <thead>\n            <tr className=\"border-b\">\n              <th className=\"text-left p-2\">Name</th>\n              <th className=\"text-left p-2\">Email</th>\n              <th className=\"text-left p-2\">Status</th>\n              <th className=\"text-left p-2\">Role</th>\n              <th className=\"text-left p-2\">Last Active</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from({ length: 30 }).map((_, i) => (\n              <tr key={i} className=\"border-b\">\n                <td className=\"p-2\">User {i + 1}</td>\n                <td className=\"p-2\">user{i + 1}@example.com</td>\n                <td className=\"p-2\">Active</td>\n                <td className=\"p-2\">Member</td>\n                <td className=\"p-2\">2024-01-{(i % 28) + 1}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  )\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/select-story/select.stories.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport Link from \"next/link\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nexport function SelectDemo() {\n  return (\n    <Select>\n      <SelectTrigger className=\"w-[180px]\">\n        <SelectValue placeholder=\"Select a fruit\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>Fruits</SelectLabel>\n          <SelectItem value=\"apple\">Apple</SelectItem>\n          <SelectItem value=\"banana\">Banana</SelectItem>\n          <SelectItem value=\"blueberry\">Blueberry</SelectItem>\n          <SelectItem value=\"grapes\">Grapes</SelectItem>\n          <SelectItem value=\"pineapple\">Pineapple</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  );\n}\n\n/**\n * Displays a list of options for the user to pick from—triggered by a button.\n */\nconst meta = {\n  title: \"ui/Select\",\n  component: Select,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    defaultValue: undefined,\n    disabled: false,\n    onValueChange: fn(),\n    onOpenChange: fn(),\n  },\n  excludeStories: /.*Demo$|SelectScrollable|SelectForm/,\n} satisfies Meta<typeof Select>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the select.\n */\nexport const Default: Story = {\n  render: (args) => (\n    <Select {...args}>\n      <SelectTrigger className=\"w-[180px]\">\n        <SelectValue placeholder=\"Select a fruit\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>Fruits</SelectLabel>\n          <SelectItem value=\"apple\">Apple</SelectItem>\n          <SelectItem value=\"banana\">Banana</SelectItem>\n          <SelectItem value=\"blueberry\">Blueberry</SelectItem>\n          <SelectItem value=\"grapes\">Grapes</SelectItem>\n          <SelectItem value=\"pineapple\">Pineapple</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  ),\n};\n\n/**\n * Disabled select.\n */\nexport const Disabled: Story = {\n  args: {\n    disabled: true,\n  },\n  render: (args) => (\n    <Select {...args}>\n      <SelectTrigger className=\"w-[180px]\">\n        <SelectValue placeholder=\"Select a fruit\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>Fruits</SelectLabel>\n          <SelectItem value=\"apple\">Apple</SelectItem>\n          <SelectItem value=\"banana\">Banana</SelectItem>\n          <SelectItem value=\"blueberry\">Blueberry</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  ),\n};\n\n/**\n * Scrollable select with many timezone options.\n */\nexport const Scrollable: Story = {\n  render: () => (\n    <Select>\n      <SelectTrigger className=\"w-[280px]\">\n        <SelectValue placeholder=\"Select a timezone\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>North America</SelectLabel>\n          <SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n          <SelectItem value=\"cst\">Central Standard Time (CST)</SelectItem>\n          <SelectItem value=\"mst\">Mountain Standard Time (MST)</SelectItem>\n          <SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n          <SelectItem value=\"akst\">Alaska Standard Time (AKST)</SelectItem>\n          <SelectItem value=\"hst\">Hawaii Standard Time (HST)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Europe & Africa</SelectLabel>\n          <SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n          <SelectItem value=\"cet\">Central European Time (CET)</SelectItem>\n          <SelectItem value=\"eet\">Eastern European Time (EET)</SelectItem>\n          <SelectItem value=\"west\">\n            Western European Summer Time (WEST)\n          </SelectItem>\n          <SelectItem value=\"cat\">Central Africa Time (CAT)</SelectItem>\n          <SelectItem value=\"eat\">East Africa Time (EAT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Asia</SelectLabel>\n          <SelectItem value=\"msk\">Moscow Time (MSK)</SelectItem>\n          <SelectItem value=\"ist\">India Standard Time (IST)</SelectItem>\n          <SelectItem value=\"cst_china\">China Standard Time (CST)</SelectItem>\n          <SelectItem value=\"jst\">Japan Standard Time (JST)</SelectItem>\n          <SelectItem value=\"kst\">Korea Standard Time (KST)</SelectItem>\n          <SelectItem value=\"ist_indonesia\">\n            Indonesia Central Standard Time (WITA)\n          </SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Australia & Pacific</SelectLabel>\n          <SelectItem value=\"awst\">\n            Australian Western Standard Time (AWST)\n          </SelectItem>\n          <SelectItem value=\"acst\">\n            Australian Central Standard Time (ACST)\n          </SelectItem>\n          <SelectItem value=\"aest\">\n            Australian Eastern Standard Time (AEST)\n          </SelectItem>\n          <SelectItem value=\"nzst\">New Zealand Standard Time (NZST)</SelectItem>\n          <SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>South America</SelectLabel>\n          <SelectItem value=\"art\">Argentina Time (ART)</SelectItem>\n          <SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem>\n          <SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem>\n          <SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  ),\n};\n\nexport function SelectScrollable() {\n  return (\n    <Select>\n      <SelectTrigger className=\"w-[280px]\">\n        <SelectValue placeholder=\"Select a timezone\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>North America</SelectLabel>\n          <SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n          <SelectItem value=\"cst\">Central Standard Time (CST)</SelectItem>\n          <SelectItem value=\"mst\">Mountain Standard Time (MST)</SelectItem>\n          <SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n          <SelectItem value=\"akst\">Alaska Standard Time (AKST)</SelectItem>\n          <SelectItem value=\"hst\">Hawaii Standard Time (HST)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Europe & Africa</SelectLabel>\n          <SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n          <SelectItem value=\"cet\">Central European Time (CET)</SelectItem>\n          <SelectItem value=\"eet\">Eastern European Time (EET)</SelectItem>\n          <SelectItem value=\"west\">\n            Western European Summer Time (WEST)\n          </SelectItem>\n          <SelectItem value=\"cat\">Central Africa Time (CAT)</SelectItem>\n          <SelectItem value=\"eat\">East Africa Time (EAT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Asia</SelectLabel>\n          <SelectItem value=\"msk\">Moscow Time (MSK)</SelectItem>\n          <SelectItem value=\"ist\">India Standard Time (IST)</SelectItem>\n          <SelectItem value=\"cst_china\">China Standard Time (CST)</SelectItem>\n          <SelectItem value=\"jst\">Japan Standard Time (JST)</SelectItem>\n          <SelectItem value=\"kst\">Korea Standard Time (KST)</SelectItem>\n          <SelectItem value=\"ist_indonesia\">\n            Indonesia Central Standard Time (WITA)\n          </SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Australia & Pacific</SelectLabel>\n          <SelectItem value=\"awst\">\n            Australian Western Standard Time (AWST)\n          </SelectItem>\n          <SelectItem value=\"acst\">\n            Australian Central Standard Time (ACST)\n          </SelectItem>\n          <SelectItem value=\"aest\">\n            Australian Eastern Standard Time (AEST)\n          </SelectItem>\n          <SelectItem value=\"nzst\">New Zealand Standard Time (NZST)</SelectItem>\n          <SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>South America</SelectLabel>\n          <SelectItem value=\"art\">Argentina Time (ART)</SelectItem>\n          <SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem>\n          <SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem>\n          <SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  );\n}\n\nconst FormSchema = z.object({\n  email: z\n    .string()\n    .min(1, { message: \"Please select an email to display.\" })\n    .email({ message: \"Please select a valid email.\" }),\n});\n\nexport function SelectForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values:\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-slate-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a verified email to display\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"m@example.com\">m@example.com</SelectItem>\n                  <SelectItem value=\"m@google.com\">m@google.com</SelectItem>\n                  <SelectItem value=\"m@support.com\">m@support.com</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                You can manage email addresses in your{\" \"}\n                <Link href=\"/examples/forms\">email settings</Link>.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\n/**\n * Select with form integration.\n */\nexport const WithForm: Story = {\n  render: () => <SelectForm />,\n};\n\nexport const ShouldSelectOption: Story = {\n  name: \"when user selects an option, should update the value\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <Select>\n      <SelectTrigger className=\"w-[180px]\" data-testid=\"select-trigger\">\n        <SelectValue placeholder=\"Select a fruit\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>Fruits</SelectLabel>\n          <SelectItem value=\"apple\">Apple</SelectItem>\n          <SelectItem value=\"banana\">Banana</SelectItem>\n          <SelectItem value=\"blueberry\">Blueberry</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  ),\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const trigger = canvas.getByTestId(\"select-trigger\");\n\n    await step(\"click trigger to open select menu\", async () => {\n      await userEvent.click(trigger);\n    });\n\n    await step(\"select 'Banana' option\", async () => {\n      const bananaOption = canvas.getByRole(\"option\", { name: /banana/i });\n      await userEvent.click(bananaOption);\n    });\n\n    await expect(trigger).toHaveTextContent(/banana/i);\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/separator-story/separator.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport { Separator } from \"@/components/ui/separator\";\n\n// Demo component from official docs\nexport function SeparatorDemo() {\n  return (\n    <div>\n      <div className=\"space-y-1\">\n        <h4 className=\"text-sm leading-none font-medium\">Radix Primitives</h4>\n        <p className=\"text-muted-foreground text-sm\">\n          An open-source UI component library.\n        </p>\n      </div>\n      <Separator className=\"my-4\" />\n      <div className=\"flex h-5 items-center space-x-4 text-sm\">\n        <div>Blog</div>\n        <Separator orientation=\"vertical\" />\n        <div>Docs</div>\n        <Separator orientation=\"vertical\" />\n        <div>Source</div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Visually or semantically separates content.\n */\nconst meta = {\n  title: \"ui/Separator\",\n  component: Separator,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    orientation: \"horizontal\",\n    decorative: true,\n    className: \"w-64\",\n  },\n  excludeStories: /.*Demo$/,\n  argTypes: {\n    className: {\n      control: \"text\",\n      description: \"Additional CSS classes\",\n    },\n    orientation: {\n      control: { type: \"radio\" },\n      options: [\"horizontal\", \"vertical\"],\n      description: \"The orientation of the separator\",\n    },\n    decorative: {\n      control: \"boolean\",\n      description: \"Whether the separator is purely decorative\",\n    },\n  },\n} satisfies Meta<typeof Separator>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the separator demonstrating both orientations.\n */\nexport const Default: Story = {\n  render: () => <SeparatorDemo />,\n};\n\n/**\n * Basic horizontal separator.\n */\nexport const Horizontal: Story = {\n  args: {\n    orientation: \"horizontal\",\n    className: \"w-64\",\n  },\n};\n\n/**\n * Vertical separator.\n */\nexport const Vertical: Story = {\n  args: {\n    orientation: \"vertical\",\n    className: \"h-16\",\n  },\n};\n\n/**\n * Horizontal separator with custom width.\n */\nexport const CustomWidth: Story = {\n  args: {\n    orientation: \"horizontal\",\n    className: \"w-96\",\n  },\n};\n\n/**\n * Vertical separator with custom height.\n */\nexport const CustomHeight: Story = {\n  args: {\n    orientation: \"vertical\",\n    className: \"h-24\",\n  },\n};\n\n/**\n * Separator with custom styling.\n */\nexport const CustomStyling: Story = {\n  render: () => (\n    <div className=\"w-full max-w-md space-y-4\">\n      <Separator className=\"bg-primary\" />\n      <Separator className=\"bg-secondary h-0.5\" />\n      <Separator className=\"from-primary to-secondary h-1 bg-gradient-to-r\" />\n      <div className=\"flex items-center space-x-4\">\n        <span className=\"text-sm\">Left</span>\n        <Separator orientation=\"vertical\" className=\"bg-primary h-6\" />\n        <span className=\"text-sm\">Right</span>\n      </div>\n    </div>\n  ),\n};\n\n/**\n * Separator in a card layout.\n */\nexport const InCard: Story = {\n  render: () => (\n    <div className=\"w-[350px] rounded-lg border p-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-semibold\">Notifications</h3>\n        <span className=\"text-muted-foreground text-sm\">3 unread</span>\n      </div>\n      <Separator className=\"my-3\" />\n      <div className=\"space-y-3\">\n        <div className=\"flex items-start space-x-2\">\n          <div className=\"size-2 translate-y-1 rounded-full bg-sky-500\" />\n          <div className=\"space-y-1\">\n            <p className=\"text-sm leading-none font-medium\">New message</p>\n            <p className=\"text-muted-foreground text-sm\">\n              You have a new message from Alex\n            </p>\n          </div>\n        </div>\n        <Separator />\n        <div className=\"flex items-start space-x-2\">\n          <div className=\"size-2 translate-y-1 rounded-full bg-sky-500\" />\n          <div className=\"space-y-1\">\n            <p className=\"text-sm leading-none font-medium\">Meeting reminder</p>\n            <p className=\"text-muted-foreground text-sm\">\n              Team standup in 30 minutes\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\n/**\n * Separator in a toolbar.\n */\nexport const InToolbar: Story = {\n  render: () => (\n    <div className=\"flex items-center rounded-md border px-3\">\n      <button className=\"hover:bg-accent hover:text-accent-foreground flex h-10 items-center justify-center rounded-md px-2 text-sm\">\n        Bold\n      </button>\n      <button className=\"hover:bg-accent hover:text-accent-foreground flex h-10 items-center justify-center rounded-md px-2 text-sm\">\n        Italic\n      </button>\n      <Separator orientation=\"vertical\" className=\"mx-2 h-6\" />\n      <button className=\"hover:bg-accent hover:text-accent-foreground flex h-10 items-center justify-center rounded-md px-2 text-sm\">\n        Left\n      </button>\n      <button className=\"hover:bg-accent hover:text-accent-foreground flex h-10 items-center justify-center rounded-md px-2 text-sm\">\n        Center\n      </button>\n      <button className=\"hover:bg-accent hover:text-accent-foreground flex h-10 items-center justify-center rounded-md px-2 text-sm\">\n        Right\n      </button>\n    </div>\n  ),\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/sheet-story/sheet.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\n\n// Demo component from official docs\nexport function SheetDemo() {\n  return (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </SheetTrigger>\n      <SheetContent>\n        <SheetHeader>\n          <SheetTitle>Edit profile</SheetTitle>\n          <SheetDescription>\n            Make changes to your profile here. Click save when you're done.\n          </SheetDescription>\n        </SheetHeader>\n        <div className=\"grid flex-1 auto-rows-min gap-6 px-4\">\n          <div className=\"grid gap-3\">\n            <Label htmlFor=\"sheet-demo-name\">Name</Label>\n            <Input id=\"sheet-demo-name\" defaultValue=\"Pedro Duarte\" />\n          </div>\n          <div className=\"grid gap-3\">\n            <Label htmlFor=\"sheet-demo-username\">Username</Label>\n            <Input id=\"sheet-demo-username\" defaultValue=\"@peduarte\" />\n          </div>\n        </div>\n        <SheetFooter>\n          <Button type=\"submit\">Save changes</Button>\n          <SheetClose asChild>\n            <Button variant=\"outline\">Close</Button>\n          </SheetClose>\n        </SheetFooter>\n      </SheetContent>\n    </Sheet>\n  )\n}\n\n/**\n * Extends the Dialog component to display content that complements the main\n * content of the screen.\n */\nconst meta: Meta<typeof Sheet> = {\n  title: \"ui/Sheet\",\n  component: Sheet,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Sheet>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the sheet.\n */\nexport const Default: Story = {\n  render: () => <SheetDemo />\n};\n\n/**\n * Sheet with side prop set to right (default).\n */\nexport const SideRight: Story = {\n  render: () => (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\">Open Right</Button>\n      </SheetTrigger>\n      <SheetContent side=\"right\">\n        <SheetHeader>\n          <SheetTitle>Are you absolutely sure?</SheetTitle>\n          <SheetDescription>\n            This action cannot be undone. This will permanently delete your account\n            and remove your data from our servers.\n          </SheetDescription>\n        </SheetHeader>\n      </SheetContent>\n    </Sheet>\n  )\n};\n\n/**\n * Sheet with side prop set to left.\n */\nexport const SideLeft: Story = {\n  render: () => (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\">Open Left</Button>\n      </SheetTrigger>\n      <SheetContent side=\"left\">\n        <SheetHeader>\n          <SheetTitle>Are you absolutely sure?</SheetTitle>\n          <SheetDescription>\n            This action cannot be undone. This will permanently delete your account\n            and remove your data from our servers.\n          </SheetDescription>\n        </SheetHeader>\n      </SheetContent>\n    </Sheet>\n  )\n};\n\n/**\n * Sheet with side prop set to top.\n */\nexport const SideTop: Story = {\n  render: () => (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\">Open Top</Button>\n      </SheetTrigger>\n      <SheetContent side=\"top\">\n        <SheetHeader>\n          <SheetTitle>Are you absolutely sure?</SheetTitle>\n          <SheetDescription>\n            This action cannot be undone. This will permanently delete your account\n            and remove your data from our servers.\n          </SheetDescription>\n        </SheetHeader>\n      </SheetContent>\n    </Sheet>\n  )\n};\n\n/**\n * Sheet with side prop set to bottom.\n */\nexport const SideBottom: Story = {\n  render: () => (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\">Open Bottom</Button>\n      </SheetTrigger>\n      <SheetContent side=\"bottom\">\n        <SheetHeader>\n          <SheetTitle>Are you absolutely sure?</SheetTitle>\n          <SheetDescription>\n            This action cannot be undone. This will permanently delete your account\n            and remove your data from our servers.\n          </SheetDescription>\n        </SheetHeader>\n      </SheetContent>\n    </Sheet>\n  )\n};\n\n/**\n * Sheet with custom size.\n */\nexport const CustomSize: Story = {\n  render: () => (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\">Open Custom Size</Button>\n      </SheetTrigger>\n      <SheetContent className=\"w-[400px] sm:w-[540px]\">\n        <SheetHeader>\n          <SheetTitle>Are you absolutely sure?</SheetTitle>\n          <SheetDescription>\n            This action cannot be undone. This will permanently delete your account\n            and remove your data from our servers.\n          </SheetDescription>\n        </SheetHeader>\n      </SheetContent>\n    </Sheet>\n  )\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/sidebar-story/sidebar.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport {\n  Calendar,\n  ChevronDown,\n  ChevronRight,\n  Home,\n  Inbox,\n  MoreHorizontal,\n  Plus,\n  Search,\n  Settings,\n  User2,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\n\n// Menu items from official docs\nconst items = [\n  {\n    title: \"Home\",\n    url: \"#\",\n    icon: Home,\n  },\n  {\n    title: \"Inbox\",\n    url: \"#\",\n    icon: Inbox,\n  },\n  {\n    title: \"Calendar\",\n    url: \"#\",\n    icon: Calendar,\n  },\n  {\n    title: \"Search\",\n    url: \"#\",\n    icon: Search,\n  },\n  {\n    title: \"Settings\",\n    url: \"#\",\n    icon: Settings,\n  },\n]\n\n/**\n * A composable, themeable and customizable sidebar component.\n */\nconst meta = {\n  title: \"ui/Sidebar\",\n  component: Sidebar,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"fullscreen\",\n  },\n} satisfies Meta<typeof Sidebar>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Basic sidebar example from official docs.\n */\nexport const BasicStructure: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Sidebar with header dropdown from official docs.\n */\nexport const WithHeaderDropdown: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    Select Workspace\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Acme Inc</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Acme Corp.</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Sidebar with footer dropdown from official docs.\n */\nexport const WithFooterDropdown: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    <User2 /> Username\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Account</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Billing</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Sign out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Collapsible sidebar group from official docs.\n */\nexport const CollapsibleGroup: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <Collapsible defaultOpen className=\"group/collapsible\">\n            <SidebarGroup>\n              <SidebarGroupLabel asChild>\n                <CollapsibleTrigger>\n                  Help\n                  <ChevronDown className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\" />\n                </CollapsibleTrigger>\n              </SidebarGroupLabel>\n              <CollapsibleContent>\n                <SidebarGroupContent>\n                  <SidebarMenu>\n                    {items.map((item) => (\n                      <SidebarMenuItem key={item.title}>\n                        <SidebarMenuButton asChild>\n                          <a href={item.url}>\n                            <item.icon />\n                            <span>{item.title}</span>\n                          </a>\n                        </SidebarMenuButton>\n                      </SidebarMenuItem>\n                    ))}\n                  </SidebarMenu>\n                </SidebarGroupContent>\n              </CollapsibleContent>\n            </SidebarGroup>\n          </Collapsible>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Sidebar with menu action from official docs.\n */\nexport const WithMenuAction: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                    <SidebarMenuAction>\n                      <MoreHorizontal />\n                    </SidebarMenuAction>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Sidebar with menu badge from official docs.\n */\nexport const WithMenuBadge: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item, index) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                    {index === 1 && <SidebarMenuBadge>24</SidebarMenuBadge>}\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Sidebar with submenu from official docs.\n */\nexport const WithSubmenu: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild>\n                    <a href=\"#\">\n                      <Home />\n                      <span>Home</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n                <Collapsible defaultOpen>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton asChild>\n                      <CollapsibleTrigger>\n                        <Settings />\n                        <span>Settings</span>\n                        <ChevronRight className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-90\" />\n                      </CollapsibleTrigger>\n                    </SidebarMenuButton>\n                    <CollapsibleContent>\n                      <SidebarMenuSub>\n                        <SidebarMenuSubItem>\n                          <SidebarMenuSubButton asChild>\n                            <a href=\"#\">General</a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                        <SidebarMenuSubItem>\n                          <SidebarMenuSubButton asChild>\n                            <a href=\"#\">Team</a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                        <SidebarMenuSubItem>\n                          <SidebarMenuSubButton asChild>\n                            <a href=\"#\">Billing</a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                      </SidebarMenuSub>\n                    </CollapsibleContent>\n                  </SidebarMenuItem>\n                </Collapsible>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Controlled sidebar from official docs.\n */\nexport const Controlled: Story = {\n  render: () => {\n    const [open, setOpen] = React.useState(false)\n    \n    return (\n      <SidebarProvider open={open} onOpenChange={setOpen}>\n        <Sidebar>\n          <SidebarContent>\n            <SidebarGroup>\n              <SidebarGroupLabel>Application</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {items.map((item) => (\n                    <SidebarMenuItem key={item.title}>\n                      <SidebarMenuButton asChild>\n                        <a href={item.url}>\n                          <item.icon />\n                          <span>{item.title}</span>\n                        </a>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n        </Sidebar>\n        <main className=\"flex flex-1 flex-col gap-4 p-4\">\n          <div className=\"flex items-center gap-4\">\n            <SidebarTrigger />\n            <span>Sidebar is {open ? 'open' : 'closed'}</span>\n          </div>\n        </main>\n      </SidebarProvider>\n    )\n  }\n};\n\n/**\n * Sidebar with rail from official docs.\n */\nexport const WithRail: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n        <SidebarRail />\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  )\n};\n\n/**\n * Full sidebar example with all features from official docs.\n */\nexport const FullExample: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    Select Workspace\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Acme Inc</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Acme Corp.</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupAction>\n              <Plus /> <span className=\"sr-only\">Add Project</span>\n            </SidebarGroupAction>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    <User2 /> Username\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Account</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Billing</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Sign out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n        <SidebarRail />\n      </Sidebar>\n      <SidebarInset>\n        <header className=\"flex h-16 shrink-0 items-center gap-2 border-b px-4\">\n          <SidebarTrigger className=\"-ml-1\" />\n          <div className=\"flex-1\">\n            <h1 className=\"text-xl font-semibold\">Application</h1>\n          </div>\n        </header>\n        <main className=\"flex-1 p-4\">\n          <p className=\"text-muted-foreground\">\n            This is a full example with header, footer, groups, and rail.\n          </p>\n        </main>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/skeleton-story/skeleton.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\n// Default example from official docs\nexport function SkeletonDemo() {\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <Skeleton className=\"h-12 w-12 rounded-full\" />\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-[250px]\" />\n        <Skeleton className=\"h-4 w-[200px]\" />\n      </div>\n    </div>\n  )\n}\n\n// Card example from official docs\nexport function SkeletonCard() {\n  return (\n    <div className=\"flex flex-col space-y-3\">\n      <Skeleton className=\"h-[125px] w-[250px] rounded-xl\" />\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-[250px]\" />\n        <Skeleton className=\"h-4 w-[200px]\" />\n      </div>\n    </div>\n  )\n}\n\n/**\n * Use to show a placeholder while content is loading.\n */\nconst meta = {\n  title: \"ui/Skeleton\",\n  component: Skeleton,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|SkeletonCard/,\n  render: () => <SkeletonDemo />\n} satisfies Meta<typeof Skeleton>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the skeleton.\n */\nexport const Default: Story = {};\n\n/**\n * Skeleton as a card placeholder.\n */\nexport const Card: Story = {\n  render: () => <SkeletonCard />\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/slider-story/slider.stories.tsx",
      "content": "// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport { cn } from \"@/lib/utils\"\nimport { Slider } from \"@/components/ui/slider\";\n\ntype SliderProps = React.ComponentProps<typeof Slider>\n\nexport function SliderDemo({ className, ...props }: SliderProps) {\n  return (\n    <div className=\"w-[350px]\">\n      <Slider\n        defaultValue={[50]}\n        max={100}\n        step={1}\n        className={cn(\"w-full\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\n/**\n * An input where the user selects a value from within a given range.\n */\nconst meta = {\n  title: \"ui/Slider\",\n  component: Slider,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <SliderDemo />\n} satisfies Meta<typeof Slider>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the slider.\n */\nexport const Default: Story = {};\n\n/**\n * Use the `inverted` prop to have the slider fill from right to left.\n */\nexport const Inverted: Story = {\n  render: () => <SliderDemo inverted />\n};\n\n/**\n * Use the `disabled` prop to disable the slider.\n */\nexport const Disabled: Story = {\n  render: () => <SliderDemo disabled />\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/sonner-story/sonner.stories.tsx",
      "content": "\"use client\"\n\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { toast } from \"sonner\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Toaster } from \"@/components/ui/sonner\";\n\n// Default example from official docs\nexport function SonnerDemo() {\n  return (\n    <Button\n      variant=\"outline\"\n      onClick={() =>\n        toast(\"Event has been created\", {\n          description: \"Sunday, December 03, 2023 at 9:00 AM\",\n          action: {\n            label: \"Undo\",\n            onClick: () => console.log(\"Undo\"),\n          },\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  )\n}\n\n/**\n * An opinionated toast component for React.\n */\nconst meta: Meta<typeof Toaster> = {\n  title: \"ui/Sonner\",\n  component: Toaster,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => (\n    <div className=\"min-h-[350px] flex items-center justify-center\">\n      <SonnerDemo />\n      <Toaster />\n    </div>\n  ),\n} satisfies Meta<typeof Toaster>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the sonner toast.\n */\nexport const Default: Story = {};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/switch-story/switch.stories.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@/components/ui/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport { Switch } from \"@/components/ui/switch\";\n\n// Default example from official docs\nexport function SwitchDemo() {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Switch id=\"airplane-mode\" />\n      <Label htmlFor=\"airplane-mode\">Airplane Mode</Label>\n    </div>\n  );\n}\n\n// Form example from official docs\nconst FormSchema = z.object({\n  marketing_emails: z.boolean().default(false).optional(),\n  security_emails: z.boolean(),\n});\n\nexport function SwitchForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      security_emails: true,\n    },\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-full space-y-6\">\n        <div>\n          <h3 className=\"mb-4 text-lg font-medium\">Email Notifications</h3>\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"marketing_emails\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel>Marketing emails</FormLabel>\n                    <FormDescription>\n                      Receive emails about new products, features, and more.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"security_emails\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel>Security emails</FormLabel>\n                    <FormDescription>\n                      Receive emails about your account security.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      disabled\n                      aria-readonly\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\n/**\n * A control that allows the user to toggle between checked and not checked.\n */\nconst meta = {\n  title: \"ui/Switch\",\n  component: Switch,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    defaultChecked: false,\n    disabled: false,\n    onCheckedChange: fn(),\n  },\n  excludeStories: /.*Demo$|.*Form$/,\n} satisfies Meta<typeof Switch>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the switch.\n */\nexport const Default: Story = {};\n\n/**\n * Switch in checked state.\n */\nexport const Checked: Story = {\n  args: {\n    defaultChecked: true,\n  },\n};\n\n/**\n * Disabled switch.\n */\nexport const Disabled: Story = {\n  args: {\n    disabled: true,\n  },\n};\n\n/**\n * Disabled and checked switch.\n */\nexport const DisabledChecked: Story = {\n  args: {\n    disabled: true,\n    defaultChecked: true,\n  },\n};\n\n/**\n * Switch with label.\n */\nexport const WithLabel: Story = {\n  render: (args) => (\n    <div className=\"flex items-center space-x-2\">\n      <Switch {...args} id=\"airplane-mode\" />\n      <Label htmlFor=\"airplane-mode\">Airplane Mode</Label>\n    </div>\n  ),\n};\n\n/**\n * Switch used within a form with validation.\n */\nexport const FormExample: Story = {\n  render: () => (\n    <div className=\"w-full max-w-lg\">\n      <SwitchForm />\n      <Toaster />\n    </div>\n  ),\n};\n\nexport const ShouldToggleSwitch: Story = {\n  name: \"when user clicks switch, should toggle state\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <div className=\"flex items-center space-x-2\">\n      <Switch id=\"test-switch\" />\n      <Label htmlFor=\"test-switch\">Airplane Mode</Label>\n    </div>\n  ),\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const switchButton = canvas.getByRole(\"switch\");\n\n    await step(\"verify switch is initially unchecked\", async () => {\n      await expect(switchButton).toHaveAttribute(\"aria-checked\", \"false\");\n    });\n\n    await step(\"click switch to toggle on\", async () => {\n      await userEvent.click(switchButton);\n    });\n\n    await expect(switchButton).toHaveAttribute(\"aria-checked\", \"true\");\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/table-story/table.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\n// Data from official docs\nconst invoices = [\n  {\n    invoice: \"INV001\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$250.00\",\n    paymentMethod: \"Credit Card\",\n  },\n  {\n    invoice: \"INV002\",\n    paymentStatus: \"Pending\",\n    totalAmount: \"$150.00\",\n    paymentMethod: \"PayPal\",\n  },\n  {\n    invoice: \"INV003\",\n    paymentStatus: \"Unpaid\",\n    totalAmount: \"$350.00\",\n    paymentMethod: \"Bank Transfer\",\n  },\n  {\n    invoice: \"INV004\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$450.00\",\n    paymentMethod: \"Credit Card\",\n  },\n  {\n    invoice: \"INV005\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$550.00\",\n    paymentMethod: \"PayPal\",\n  },\n  {\n    invoice: \"INV006\",\n    paymentStatus: \"Pending\",\n    totalAmount: \"$200.00\",\n    paymentMethod: \"Bank Transfer\",\n  },\n  {\n    invoice: \"INV007\",\n    paymentStatus: \"Unpaid\",\n    totalAmount: \"$300.00\",\n    paymentMethod: \"Credit Card\",\n  },\n]\n\n// Default example from official docs\nexport function TableDemo() {\n  return (\n    <Table>\n      <TableCaption>A list of your recent invoices.</TableCaption>\n      <TableHeader>\n        <TableRow>\n          <TableHead className=\"w-[100px]\">Invoice</TableHead>\n          <TableHead>Status</TableHead>\n          <TableHead>Method</TableHead>\n          <TableHead className=\"text-right\">Amount</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {invoices.map((invoice) => (\n          <TableRow key={invoice.invoice}>\n            <TableCell className=\"font-medium\">{invoice.invoice}</TableCell>\n            <TableCell>{invoice.paymentStatus}</TableCell>\n            <TableCell>{invoice.paymentMethod}</TableCell>\n            <TableCell className=\"text-right\">{invoice.totalAmount}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell colSpan={3}>Total</TableCell>\n          <TableCell className=\"text-right\">$2,500.00</TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  )\n}\n\n/**\n * A responsive table component.\n */\nconst meta = {\n  title: \"ui/Table\",\n  component: Table,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <TableDemo />\n} satisfies Meta<typeof Table>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default table with invoice data.\n */\nexport const Default: Story = {};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/tabs-story/tabs.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\n// Default example from official docs\nexport function TabsDemo() {\n  return (\n    <Tabs defaultValue=\"account\" className=\"w-[400px]\">\n      <TabsList className=\"grid w-full grid-cols-2\">\n        <TabsTrigger value=\"account\">Account</TabsTrigger>\n        <TabsTrigger value=\"password\">Password</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"account\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Account</CardTitle>\n            <CardDescription>\n              Make changes to your account here. Click save when you're done.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input id=\"name\" defaultValue=\"Pedro Duarte\" />\n            </div>\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input id=\"username\" defaultValue=\"@peduarte\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button>Save changes</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n      <TabsContent value=\"password\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Password</CardTitle>\n            <CardDescription>\n              Change your password here. After saving, you'll be logged out.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"current\">Current password</Label>\n              <Input id=\"current\" type=\"password\" />\n            </div>\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"new\">New password</Label>\n              <Input id=\"new\" type=\"password\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button>Save password</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  );\n}\n\n/**\n * A set of layered sections of content—known as tab panels—that are displayed one at a time.\n */\nconst meta = {\n  title: \"ui/Tabs\",\n  component: Tabs,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    defaultValue: \"account\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Tabs>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default tabs with account and password sections.\n */\nexport const Default: Story = {\n  render: () => <TabsDemo />,\n};\n\nexport const ShouldSwitchTabs: Story = {\n  name: \"when tab is clicked, should switch content\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <TabsDemo />,\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step(\"click 'Password' tab\", async () => {\n      const passwordTab = canvas.getByRole(\"tab\", { name: /password/i });\n      await userEvent.click(passwordTab);\n    });\n\n    const passwordContent = canvas.getByText(/Change your password here/i);\n    await expect(passwordContent).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/textarea-story/textarea.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\n// Default example from official docs\nexport function TextareaDemo() {\n  return <Textarea placeholder=\"Type your message here.\" />;\n}\n\n// With Label example from official docs\nexport function TextareaWithLabel() {\n  return (\n    <div className=\"grid w-full gap-3\">\n      <Label htmlFor=\"message\">Your message</Label>\n      <Textarea placeholder=\"Type your message here.\" id=\"message\" />\n    </div>\n  );\n}\n\n// With Text example from official docs\nexport function TextareaWithText() {\n  return (\n    <div className=\"grid w-full gap-3\">\n      <Label htmlFor=\"message-2\">Your Message</Label>\n      <Textarea placeholder=\"Type your message here.\" id=\"message-2\" />\n      <p className=\"text-muted-foreground text-sm\">\n        Your message will be copied to the support team.\n      </p>\n    </div>\n  );\n}\n\n// With Button example from official docs\nexport function TextareaWithButton() {\n  return (\n    <div className=\"grid w-full gap-2\">\n      <Textarea placeholder=\"Type your message here.\" />\n      <Button>Send message</Button>\n    </div>\n  );\n}\n\n// Disabled example from official docs\nexport function TextareaDisabled() {\n  return <Textarea placeholder=\"Type your message here.\" disabled />;\n}\n\n/**\n * Displays a form textarea or a component that looks like a textarea.\n */\nconst meta = {\n  title: \"ui/Textarea\",\n  component: Textarea,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    placeholder: \"Type your message here.\",\n    disabled: false,\n  },\n  excludeStories: /.*Demo$|.*WithLabel$|.*WithText$|.*WithButton$|.*Disabled$/,\n} satisfies Meta<typeof Textarea>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the textarea.\n */\nexport const Default: Story = {};\n\n/**\n * Textarea with a label.\n */\nexport const WithLabel: Story = {\n  render: () => <TextareaWithLabel />,\n};\n\n/**\n * Textarea with label and helper text.\n */\nexport const WithText: Story = {\n  render: () => <TextareaWithText />,\n};\n\n/**\n * Textarea with a button.\n */\nexport const WithButton: Story = {\n  render: () => <TextareaWithButton />,\n};\n\n/**\n * Disabled textarea.\n */\nexport const Disabled: Story = {\n  args: {\n    disabled: true,\n  },\n};\n\nexport const ShouldEnterMultilineText: Story = {\n  name: \"when user enters multiline text, should see it in the textarea\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <div className=\"grid w-full gap-3\">\n      <Label htmlFor=\"message-test\">Your message</Label>\n      <Textarea placeholder=\"Type your message here.\" id=\"message-test\" />\n    </div>\n  ),\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const textarea = canvas.getByPlaceholderText(/type your message here/i);\n    const multilineMessage = \"This is line 1\\nThis is line 2\\nThis is line 3\";\n\n    await step(\"focus and type multiline text into textarea\", async () => {\n      await userEvent.click(textarea);\n      await userEvent.type(textarea, multilineMessage);\n    });\n\n    expect(textarea).toHaveValue(multilineMessage);\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/toggle-story/toggle.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { Bold, Italic, Underline } from \"lucide-react\";\n\nimport { Toggle } from \"@/components/ui/toggle\";\n\n// Default example from official docs\nexport function ToggleDemo() {\n  return (\n    <Toggle aria-label=\"Toggle italic\">\n      <Bold className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n\n// Outline example from official docs\nexport function ToggleOutline() {\n  return (\n    <Toggle variant=\"outline\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n\n// With Text example from official docs\nexport function ToggleWithText() {\n  return (\n    <Toggle aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n      Italic\n    </Toggle>\n  )\n}\n\n// Small size example from official docs\nexport function ToggleSm() {\n  return (\n    <Toggle size=\"sm\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n\n// Large size example from official docs\nexport function ToggleLg() {\n  return (\n    <Toggle size=\"lg\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n\n// Disabled example from official docs\nexport function ToggleDisabled() {\n  return (\n    <Toggle aria-label=\"Toggle italic\" disabled>\n      <Underline className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n\n/**\n * A two-state button that can be either on or off.\n */\nconst meta: Meta<typeof Toggle> = {\n  title: \"ui/Toggle\",\n  component: Toggle,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|.*Outline$|.*WithText$|.*Sm$|.*Lg$|.*Disabled$/,\n  render: () => <ToggleDemo />\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof Toggle>;\n\n/**\n * The default form of the toggle.\n */\nexport const Default: Story = {};\n\n/**\n * Toggle with outline variant.\n */\nexport const Outline: Story = {\n  render: () => <ToggleOutline />\n};\n\n/**\n * Toggle with text label.\n */\nexport const WithText: Story = {\n  render: () => <ToggleWithText />\n};\n\n/**\n * Small sized toggle.\n */\nexport const Small: Story = {\n  render: () => <ToggleSm />\n};\n\n/**\n * Large sized toggle.\n */\nexport const Large: Story = {\n  render: () => <ToggleLg />\n};\n\n/**\n * Disabled toggle.\n */\nexport const Disabled: Story = {\n  render: () => <ToggleDisabled />\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/toggle-group-story/toggle-group.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { Bold, Italic, Underline } from \"lucide-react\";\n\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\n\n// Default example from official docs\nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup variant=\"outline\" type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n\n// Outline example from official docs\nexport function ToggleGroupOutline() {\n  return (\n    <ToggleGroup type=\"multiple\" variant=\"outline\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n\n// Single example from official docs\nexport function ToggleGroupSingle() {\n  return (\n    <ToggleGroup type=\"single\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n\n// Small size example from official docs\nexport function ToggleGroupSmall() {\n  return (\n    <ToggleGroup type=\"single\" size=\"sm\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n\n// Large size example from official docs\nexport function ToggleGroupLarge() {\n  return (\n    <ToggleGroup type=\"multiple\" size=\"lg\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n\n// Disabled example from official docs\nexport function ToggleGroupDisabled() {\n  return (\n    <ToggleGroup type=\"multiple\" disabled>\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n\n\n/**\n * A set of two-state buttons that can be toggled on or off.\n */\nconst meta = {\n  title: \"ui/ToggleGroup\",\n  component: ToggleGroup,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof ToggleGroup>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the toggle group.\n */\nexport const Default: Story = {\n  args: {\n    type: \"multiple\",\n    variant: \"outline\"\n  },\n  render: () => <ToggleGroupDemo />\n};\n\n/**\n * Toggle group with outline variant.\n */\nexport const Outline: Story = {\n  args: {\n    type: \"multiple\",\n    variant: \"outline\"\n  },\n  render: () => <ToggleGroupOutline />\n};\n\n/**\n * Single selection toggle group.\n */\nexport const Single: Story = {\n  args: {\n    type: \"single\"\n  },\n  render: () => <ToggleGroupSingle />\n};\n\n/**\n * Small sized toggle group.\n */\nexport const Small: Story = {\n  args: {\n    type: \"single\",\n    size: \"sm\"\n  },\n  render: () => <ToggleGroupSmall />\n};\n\n/**\n * Large sized toggle group.\n */\nexport const Large: Story = {\n  args: {\n    type: \"multiple\",\n    size: \"lg\"\n  },\n  render: () => <ToggleGroupLarge />\n};\n\n/**\n * Disabled toggle group.\n */\nexport const Disabled: Story = {\n  args: {\n    type: \"multiple\",\n    disabled: true\n  },\n  render: () => <ToggleGroupDisabled />\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/tooltip-story/tooltip.stories.tsx",
      "content": "// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { Plus } from \"lucide-react\";\n\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\n\n/**\n * A popup that displays information related to an element when the element\n * receives keyboard focus or the mouse hovers over it.\n */\nconst meta: Meta<typeof TooltipContent> = {\n  title: \"ui/Tooltip\",\n  component: TooltipContent,\n  tags: [\"autodocs\"],\n  argTypes: {\n    side: {\n      options: [\"top\", \"bottom\", \"left\", \"right\"],\n      control: {\n        type: \"radio\",\n      },\n    },\n    children: {\n      control: \"text\",\n    },\n  },\n  args: {\n    side: \"top\",\n    children: \"Add to library\",\n  },\n  parameters: {\n    layout: \"centered\",\n  },\n  render: (args) => (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger>\n          <Plus className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Add</span>\n        </TooltipTrigger>\n        <TooltipContent {...args} />\n      </Tooltip>\n    </TooltipProvider>\n  ),\n} satisfies Meta<typeof TooltipContent>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the tooltip.\n */\nexport const Default: Story = {};\n\n/**\n * Use the `bottom` side to display the tooltip below the element.\n */\nexport const Bottom: Story = {\n  args: {\n    side: \"bottom\",\n  },\n};\n\n/**\n * Use the `left` side to display the tooltip to the left of the element.\n */\nexport const Left: Story = {\n  args: {\n    side: \"left\",\n  },\n};\n\n/**\n * Use the `right` side to display the tooltip to the right of the element.\n */\nexport const Right: Story = {\n  args: {\n    side: \"right\",\n  },\n};\n\nexport const ShouldShowOnHover: Story = {\n  name: \"when hovering over trigger, should show hover tooltip content\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement, step }) => {\n    const canvasBody = within(canvasElement.ownerDocument.body);\n    const triggerBtn = await canvasBody.findByRole(\"button\", { name: /add/i });\n\n    await step(\"hover over trigger\", async () => {\n      await userEvent.hover(triggerBtn);\n      await waitFor(() =>\n        expect(\n          canvasElement.ownerDocument.body.querySelector(\n            '[data-slot=\"tooltip-content\"]',\n          ),\n        ).toBeVisible(),\n      );\n    });\n\n    await step(\"unhover trigger\", async () => {\n      await userEvent.unhover(triggerBtn);\n      await waitFor(() =>\n        expect(\n          canvasElement.ownerDocument.body.querySelector(\n            '[data-slot=\"tooltip-content\"]',\n          ),\n        ).not.toBeVisible(),\n      );\n    });\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/tokens/color-story/color.stories.tsx",
      "content": "import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useEffect, useState } from \"react\";\n\n// 🎨 Tailwind 기본 색상 정의\nconst tailwindColors = {\n  slate: {\n    50: \"#f8fafc\",\n    100: \"#f1f5f9\",\n    200: \"#e2e8f0\",\n    300: \"#cbd5e1\",\n    400: \"#94a3b8\",\n    500: \"#64748b\",\n    600: \"#475569\",\n    700: \"#334155\",\n    800: \"#1e293b\",\n    900: \"#0f172a\",\n    950: \"#020617\",\n  },\n  gray: {\n    50: \"#f9fafb\",\n    100: \"#f3f4f6\",\n    200: \"#e5e7eb\",\n    300: \"#d1d5db\",\n    400: \"#9ca3af\",\n    500: \"#6b7280\",\n    600: \"#4b5563\",\n    700: \"#374151\",\n    800: \"#1f2937\",\n    900: \"#111827\",\n    950: \"#030712\",\n  },\n  zinc: {\n    50: \"#fafafa\",\n    100: \"#f4f4f5\",\n    200: \"#e4e4e7\",\n    300: \"#d4d4d8\",\n    400: \"#a1a1aa\",\n    500: \"#71717a\",\n    600: \"#52525b\",\n    700: \"#3f3f46\",\n    800: \"#27272a\",\n    900: \"#18181b\",\n    950: \"#09090b\",\n  },\n  neutral: {\n    50: \"#fafafa\",\n    100: \"#f5f5f5\",\n    200: \"#e5e5e5\",\n    300: \"#d4d4d4\",\n    400: \"#a3a3a3\",\n    500: \"#737373\",\n    600: \"#525252\",\n    700: \"#404040\",\n    800: \"#262626\",\n    900: \"#171717\",\n    950: \"#0a0a0a\",\n  },\n  stone: {\n    50: \"#fafaf9\",\n    100: \"#f5f5f4\",\n    200: \"#e7e5e4\",\n    300: \"#d6d3d1\",\n    400: \"#a8a29e\",\n    500: \"#78716c\",\n    600: \"#57534e\",\n    700: \"#44403c\",\n    800: \"#292524\",\n    900: \"#1c1917\",\n    950: \"#0c0a09\",\n  },\n  red: {\n    50: \"#fef2f2\",\n    100: \"#fee2e2\",\n    200: \"#fecaca\",\n    300: \"#fca5a5\",\n    400: \"#f87171\",\n    500: \"#ef4444\",\n    600: \"#dc2626\",\n    700: \"#b91c1c\",\n    800: \"#991b1b\",\n    900: \"#7f1d1d\",\n    950: \"#450a0a\",\n  },\n  orange: {\n    50: \"#fff7ed\",\n    100: \"#ffedd5\",\n    200: \"#fed7aa\",\n    300: \"#fdba74\",\n    400: \"#fb923c\",\n    500: \"#f97316\",\n    600: \"#ea580c\",\n    700: \"#c2410c\",\n    800: \"#9a3412\",\n    900: \"#7c2d12\",\n    950: \"#431407\",\n  },\n  amber: {\n    50: \"#fffbeb\",\n    100: \"#fef3c7\",\n    200: \"#fde68a\",\n    300: \"#fcd34d\",\n    400: \"#fbbf24\",\n    500: \"#f59e0b\",\n    600: \"#d97706\",\n    700: \"#b45309\",\n    800: \"#92400e\",\n    900: \"#78350f\",\n    950: \"#451a03\",\n  },\n  yellow: {\n    50: \"#fefce8\",\n    100: \"#fef9c3\",\n    200: \"#fef08a\",\n    300: \"#fde047\",\n    400: \"#facc15\",\n    500: \"#eab308\",\n    600: \"#ca8a04\",\n    700: \"#a16207\",\n    800: \"#854d0e\",\n    900: \"#713f12\",\n    950: \"#422006\",\n  },\n  lime: {\n    50: \"#f7fee7\",\n    100: \"#ecfccb\",\n    200: \"#d9f99d\",\n    300: \"#bef264\",\n    400: \"#a3e635\",\n    500: \"#84cc16\",\n    600: \"#65a30d\",\n    700: \"#4d7c0f\",\n    800: \"#3f6212\",\n    900: \"#365314\",\n    950: \"#1a2e05\",\n  },\n  green: {\n    50: \"#f0fdf4\",\n    100: \"#dcfce7\",\n    200: \"#bbf7d0\",\n    300: \"#86efac\",\n    400: \"#4ade80\",\n    500: \"#22c55e\",\n    600: \"#16a34a\",\n    700: \"#15803d\",\n    800: \"#166534\",\n    900: \"#14532d\",\n    950: \"#052e16\",\n  },\n  emerald: {\n    50: \"#ecfdf5\",\n    100: \"#d1fae5\",\n    200: \"#a7f3d0\",\n    300: \"#6ee7b7\",\n    400: \"#34d399\",\n    500: \"#10b981\",\n    600: \"#059669\",\n    700: \"#047857\",\n    800: \"#065f46\",\n    900: \"#064e3b\",\n    950: \"#022c22\",\n  },\n  teal: {\n    50: \"#f0fdfa\",\n    100: \"#ccfbf1\",\n    200: \"#99f6e4\",\n    300: \"#5eead4\",\n    400: \"#2dd4bf\",\n    500: \"#14b8a6\",\n    600: \"#0d9488\",\n    700: \"#0f766e\",\n    800: \"#115e59\",\n    900: \"#134e4a\",\n    950: \"#042f2e\",\n  },\n  cyan: {\n    50: \"#ecfeff\",\n    100: \"#cffafe\",\n    200: \"#a5f3fc\",\n    300: \"#67e8f9\",\n    400: \"#22d3ee\",\n    500: \"#06b6d4\",\n    600: \"#0891b2\",\n    700: \"#0e7490\",\n    800: \"#155e75\",\n    900: \"#164e63\",\n    950: \"#083344\",\n  },\n  sky: {\n    50: \"#f0f9ff\",\n    100: \"#e0f2fe\",\n    200: \"#bae6fd\",\n    300: \"#7dd3fc\",\n    400: \"#38bdf8\",\n    500: \"#0ea5e9\",\n    600: \"#0284c7\",\n    700: \"#0369a1\",\n    800: \"#075985\",\n    900: \"#0c4a6e\",\n    950: \"#082f49\",\n  },\n  blue: {\n    50: \"#eff6ff\",\n    100: \"#dbeafe\",\n    200: \"#bfdbfe\",\n    300: \"#93c5fd\",\n    400: \"#60a5fa\",\n    500: \"#3b82f6\",\n    600: \"#2563eb\",\n    700: \"#1d4ed8\",\n    800: \"#1e40af\",\n    900: \"#1e3a8a\",\n    950: \"#172554\",\n  },\n  indigo: {\n    50: \"#eef2ff\",\n    100: \"#e0e7ff\",\n    200: \"#c7d2fe\",\n    300: \"#a5b4fc\",\n    400: \"#818cf8\",\n    500: \"#6366f1\",\n    600: \"#4f46e5\",\n    700: \"#4338ca\",\n    800: \"#3730a3\",\n    900: \"#312e81\",\n    950: \"#1e1b4b\",\n  },\n  violet: {\n    50: \"#f5f3ff\",\n    100: \"#ede9fe\",\n    200: \"#ddd6fe\",\n    300: \"#c4b5fd\",\n    400: \"#a78bfa\",\n    500: \"#8b5cf6\",\n    600: \"#7c3aed\",\n    700: \"#6d28d9\",\n    800: \"#5b21b6\",\n    900: \"#4c1d95\",\n    950: \"#2e1065\",\n  },\n  purple: {\n    50: \"#faf5ff\",\n    100: \"#f3e8ff\",\n    200: \"#e9d5ff\",\n    300: \"#d8b4fe\",\n    400: \"#c084fc\",\n    500: \"#a855f7\",\n    600: \"#9333ea\",\n    700: \"#7e22ce\",\n    800: \"#6b21a8\",\n    900: \"#581c87\",\n    950: \"#3b0764\",\n  },\n  fuchsia: {\n    50: \"#fdf4ff\",\n    100: \"#fae8ff\",\n    200: \"#f5d0fe\",\n    300: \"#f0abfc\",\n    400: \"#e879f9\",\n    500: \"#d946ef\",\n    600: \"#c026d3\",\n    700: \"#a21caf\",\n    800: \"#86198f\",\n    900: \"#701a75\",\n    950: \"#4a044e\",\n  },\n  pink: {\n    50: \"#fdf2f8\",\n    100: \"#fce7f3\",\n    200: \"#fbcfe8\",\n    300: \"#f9a8d4\",\n    400: \"#f472b6\",\n    500: \"#ec4899\",\n    600: \"#db2777\",\n    700: \"#be185d\",\n    800: \"#9d174d\",\n    900: \"#831843\",\n    950: \"#500724\",\n  },\n  rose: {\n    50: \"#fff1f2\",\n    100: \"#ffe4e6\",\n    200: \"#fecdd3\",\n    300: \"#fda4af\",\n    400: \"#fb7185\",\n    500: \"#f43f5e\",\n    600: \"#e11d48\",\n    700: \"#be123c\",\n    800: \"#9f1239\",\n    900: \"#881337\",\n    950: \"#4c0519\",\n  },\n};\n\ntype Color = {\n  name: string;\n  value: string;\n  description?: string;\n};\n\n// 🎨 shadcn 토큰 색상 타일 컴포넌트 (다크모드 감지 포함)\nconst ColorTile = ({ value }: Pick<Color, \"value\">) => {\n  const [colorValue, setColorValue] = useState(\"\");\n\n  useEffect(() => {\n    // 🌓 CSS 변수 값을 읽어서 표시용으로만 사용\n    const updateColor = () => {\n      const styles = getComputedStyle(document.documentElement);\n      const cssValue = styles.getPropertyValue(value);\n      setColorValue(cssValue.trim());\n    };\n\n    // 초기 로드 시 색상 읽기\n    updateColor();\n\n    // 🔄 MutationObserver로 다크모드 실시간 감지\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === \"attributes\" &&\n          mutation.attributeName === \"class\"\n        ) {\n          updateColor();\n        }\n      });\n    });\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [value]);\n\n  // 🎨 Tailwind v4: CSS 변수 값이 이미 \"hsl(0 0% 100%)\" 형식 (hsl() 포함)\n  // React 인라인 스타일 호환을 위해 공백을 쉼표로 변환\n  const hslValue = colorValue.replace(/hsl\\(([^)]+)\\)/, (match, values) => {\n    return `hsl(${values.replace(/\\s+/g, \", \")})`;\n  });\n\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <div\n        className=\"size-20 rounded-md border\"\n        style={{ backgroundColor: hslValue || \"transparent\" }}\n      />\n      <p className=\"text-center text-xs opacity-70\">{value}</p>\n      <p className=\"text-center font-mono text-xs\">{colorValue}</p>\n    </div>\n  );\n};\n\n/**\n * 🎨 shadcn/ui 디자인 시스템 색상 토큰 및 Tailwind CSS 색상 팔레트\n *\n * 이 스토리는 두 가지 색상 시스템을 제공합니다:\n * 1. **shadcn Design Tokens**: 프로젝트에서 사용되는 디자인 시스템 토큰 (CSS 변수)\n * 2. **Tailwind Palette**: Tailwind CSS의 전체 색상 팔레트 (22개 색상 × 11개 shade)\n *\n * 다크모드 전환 시 shadcn 토큰 값이 실시간으로 업데이트됩니다.\n */\nconst meta: Meta<{\n  colors: Color[];\n}> = {\n  title: \"foundation/Color\",\n  tags: [\"autodocs\"],\n  argTypes: {},\n  render: (args) => (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>Name</TableHead>\n          <TableHead>Description</TableHead>\n          <TableHead>\n            <span className=\"sr-only\">Preview</span>\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {args.colors.map(({ name, value, description }) => (\n          <TableRow key={name}>\n            <TableCell className=\"font-medium\">{name}</TableCell>\n            <TableCell className=\"text-muted-foreground text-sm\">\n              {description}\n            </TableCell>\n            <TableCell>\n              <ColorTile value={value} />\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 🎯 Primary: 주요 색상 토큰\n *\n * 애플리케이션의 배경, 텍스트, 주요 브랜드 색상 등 기본 색상 토큰입니다.\n * 다크모드 전환 시 자동으로 업데이트됩니다.\n */\nexport const Primary: Story = {\n  args: {\n    colors: [\n      {\n        name: \"Background\",\n        value: \"--background\",\n        description: \"애플리케이션의 메인 배경 색상\",\n      },\n      {\n        name: \"Foreground\",\n        value: \"--foreground\",\n        description: \"애플리케이션의 메인 텍스트 색상\",\n      },\n      {\n        name: \"Primary\",\n        value: \"--primary\",\n        description: \"주요 액션을 위한 브랜드 색상\",\n      },\n      {\n        name: \"Primary Foreground\",\n        value: \"--primary-foreground\",\n        description: \"Primary 배경 위의 텍스트 색상\",\n      },\n      {\n        name: \"Secondary\",\n        value: \"--secondary\",\n        description: \"덜 중요한 액션을 위한 보조 색상\",\n      },\n      {\n        name: \"Secondary Foreground\",\n        value: \"--secondary-foreground\",\n        description: \"Secondary 배경 위의 텍스트 색상\",\n      },\n    ],\n  },\n};\n\n/**\n * 🗂️ Surface: 표면 색상 토큰\n *\n * 카드, 팝오버 등 UI 표면 요소를 위한 색상 토큰입니다.\n */\nexport const Surface: Story = {\n  args: {\n    colors: [\n      {\n        name: \"Card\",\n        value: \"--card\",\n        description: \"카드 컴포넌트의 배경 색상\",\n      },\n      {\n        name: \"Card Foreground\",\n        value: \"--card-foreground\",\n        description: \"Card 배경 위의 텍스트 색상\",\n      },\n      {\n        name: \"Popover\",\n        value: \"--popover\",\n        description: \"팝오버 컴포넌트의 배경 색상\",\n      },\n      {\n        name: \"Popover Foreground\",\n        value: \"--popover-foreground\",\n        description: \"Popover 배경 위의 텍스트 색상\",\n      },\n    ],\n  },\n};\n\n/**\n * ⚡ State: 상태 및 유틸리티 색상 토큰\n *\n * 비활성화, 강조, 파괴적 액션 등 다양한 상태를 나타내는 색상 토큰입니다.\n */\nexport const State: Story = {\n  args: {\n    colors: [\n      {\n        name: \"Muted\",\n        value: \"--muted\",\n        description: \"비활성화/뮤트된 요소의 배경 색상\",\n      },\n      {\n        name: \"Muted Foreground\",\n        value: \"--muted-foreground\",\n        description: \"보조 텍스트의 색상\",\n      },\n      {\n        name: \"Accent\",\n        value: \"--accent\",\n        description: \"강조 및 하이라이트를 위한 색상\",\n      },\n      {\n        name: \"Accent Foreground\",\n        value: \"--accent-foreground\",\n        description: \"Accent 배경 위의 텍스트 색상\",\n      },\n      {\n        name: \"Destructive\",\n        value: \"--destructive\",\n        description: \"파괴적/에러 액션을 위한 색상\",\n      },\n      {\n        name: \"Destructive Foreground\",\n        value: \"--destructive-foreground\",\n        description: \"Destructive 배경 위의 텍스트 색상\",\n      },\n    ],\n  },\n};\n\n/**\n * 🔲 Border: 테두리 및 입력 색상 토큰\n *\n * 폼 컨트롤과 구분선을 위한 색상 토큰입니다.\n */\nexport const Border: Story = {\n  args: {\n    colors: [\n      {\n        name: \"Border\",\n        value: \"--border\",\n        description: \"UI 요소의 기본 테두리 색상\",\n      },\n      {\n        name: \"Input\",\n        value: \"--input\",\n        description: \"입력 필드의 테두리 색상\",\n      },\n      {\n        name: \"Ring\",\n        value: \"--ring\",\n        description: \"포커스 링 색상\",\n      },\n    ],\n  },\n};\n\n/**\n * 📊 Chart: 차트 색상 팔레트\n *\n * 데이터 시각화 컴포넌트를 위한 색상 팔레트입니다.\n */\nexport const Chart: Story = {\n  args: {\n    colors: [\n      {\n        name: \"Chart 1\",\n        value: \"--chart-1\",\n        description: \"차트 팔레트의 첫 번째 색상\",\n      },\n      {\n        name: \"Chart 2\",\n        value: \"--chart-2\",\n        description: \"차트 팔레트의 두 번째 색상\",\n      },\n      {\n        name: \"Chart 3\",\n        value: \"--chart-3\",\n        description: \"차트 팔레트의 세 번째 색상\",\n      },\n      {\n        name: \"Chart 4\",\n        value: \"--chart-4\",\n        description: \"차트 팔레트의 네 번째 색상\",\n      },\n      {\n        name: \"Chart 5\",\n        value: \"--chart-5\",\n        description: \"차트 팔레트의 다섯 번째 색상\",\n      },\n    ],\n  },\n};\n\n/**\n * 🧭 Sidebar: 사이드바 색상 토큰\n *\n * 내비게이션 사이드바 컴포넌트를 위한 색상 토큰입니다.\n */\nexport const Sidebar: Story = {\n  args: {\n    colors: [\n      {\n        name: \"Sidebar\",\n        value: \"--sidebar\",\n        description: \"사이드바의 배경 색상\",\n      },\n      {\n        name: \"Sidebar Foreground\",\n        value: \"--sidebar-foreground\",\n        description: \"사이드바의 텍스트 색상\",\n      },\n      {\n        name: \"Sidebar Primary\",\n        value: \"--sidebar-primary\",\n        description: \"사이드바의 주요 색상\",\n      },\n      {\n        name: \"Sidebar Primary Foreground\",\n        value: \"--sidebar-primary-foreground\",\n        description: \"Sidebar Primary 배경 위의 텍스트 색상\",\n      },\n      {\n        name: \"Sidebar Accent\",\n        value: \"--sidebar-accent\",\n        description: \"사이드바의 강조 색상\",\n      },\n      {\n        name: \"Sidebar Accent Foreground\",\n        value: \"--sidebar-accent-foreground\",\n        description: \"Sidebar Accent 배경 위의 텍스트 색상\",\n      },\n      {\n        name: \"Sidebar Border\",\n        value: \"--sidebar-border\",\n        description: \"사이드바의 테두리 색상\",\n      },\n      {\n        name: \"Sidebar Ring\",\n        value: \"--sidebar-ring\",\n        description: \"사이드바의 포커스 링 색상\",\n      },\n    ],\n  },\n};\n\n/**\n * 🎨 Tailwind Palette: Tailwind CSS 전체 색상 팔레트\n *\n * Tailwind CSS의 22개 색상 시스템 (각 11개 shade: 50-950)과 shadcn 토큰을 함께 보여줍니다.\n * 다크모드 전환 시 shadcn 토큰 값이 실시간으로 업데이트됩니다.\n */\nexport const TailwindPalette: Story = {\n  render: () => {\n    const [tokens, setTokens] = useState<Record<string, string>>({});\n    const [isDarkMode, setIsDarkMode] = useState(false);\n\n    // 🌓 CSS 변수 값을 가져오는 함수 (다크모드 실시간 감지)\n    const updateTokens = () => {\n      const styles = getComputedStyle(document.documentElement);\n      const tokenList = [\n        \"--background\",\n        \"--foreground\",\n        \"--primary\",\n        \"--primary-foreground\",\n        \"--secondary\",\n        \"--secondary-foreground\",\n        \"--muted\",\n        \"--muted-foreground\",\n        \"--accent\",\n        \"--accent-foreground\",\n        \"--destructive\",\n        \"--destructive-foreground\",\n        \"--border\",\n        \"--input\",\n        \"--ring\",\n        \"--card\",\n        \"--card-foreground\",\n        \"--popover\",\n        \"--popover-foreground\",\n        \"--chart-1\",\n        \"--chart-2\",\n        \"--chart-3\",\n        \"--chart-4\",\n        \"--chart-5\",\n        \"--sidebar\",\n        \"--sidebar-foreground\",\n        \"--sidebar-primary\",\n        \"--sidebar-primary-foreground\",\n        \"--sidebar-accent\",\n        \"--sidebar-accent-foreground\",\n        \"--sidebar-border\",\n        \"--sidebar-ring\",\n      ];\n      const newValues: Record<string, string> = {};\n      tokenList.forEach((token) => {\n        newValues[token] = styles.getPropertyValue(token).trim();\n      });\n      setTokens(newValues);\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\n    };\n\n    // 🔄 초기 로드 및 다크모드 변경 감지\n    useEffect(() => {\n      updateTokens();\n\n      // MutationObserver로 클래스 변경 감지\n      const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (\n            mutation.type === \"attributes\" &&\n            mutation.attributeName === \"class\"\n          ) {\n            updateTokens();\n          }\n        });\n      });\n\n      observer.observe(document.documentElement, {\n        attributes: true,\n        attributeFilter: [\"class\"],\n      });\n\n      return () => {\n        observer.disconnect();\n      };\n    }, []);\n\n    // 단일 컬러 박스 컴포넌트\n    const ColorBox = ({ name, value }: { name: string; value: string }) => (\n      <div key={name} style={{ textAlign: \"center\" }}>\n        <div\n          style={{\n            background: value || \"transparent\",\n            width: \"100%\",\n            height: \"60px\",\n            borderRadius: \"8px\",\n            border: isDarkMode ? \"1px solid #333\" : \"1px solid #e5e5e5\",\n          }}\n        />\n        <p style={{ fontSize: \"12px\", marginTop: \"4px\" }}>{name}</p>\n        <code style={{ fontSize: \"10px\" }}>{value || \"-\"}</code>\n      </div>\n    );\n\n    // Tailwind 팔레트 렌더링 함수\n    const renderTailwindColors = (\n      colors: Record<string, string | Record<string, string>>,\n      parent = \"\",\n    ) => {\n      return Object.entries(colors).map(([name, value]) => {\n        const key = parent ? `${parent}-${name}` : name;\n        if (typeof value === \"string\") {\n          return <ColorBox key={key} name={key} value={value} />;\n        }\n        if (typeof value === \"object\") {\n          return (\n            <div key={key} style={{ marginBottom: \"2rem\", width: \"100%\" }}>\n              <h3\n                style={{ marginBottom: \"0.5rem\", textTransform: \"capitalize\" }}\n              >\n                {name}\n              </h3>\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: \"repeat(11, 1fr)\",\n                  gap: \"0.5rem\",\n                }}\n              >\n                {renderTailwindColors(value, name)}\n              </div>\n            </div>\n          );\n        }\n        return null;\n      });\n    };\n\n    // Tailwind 클래스 매핑으로 shadcn 토큰 표시\n    const tokenClassMap: Record<string, string> = {\n      \"--background\": \"bg-background\",\n      \"--foreground\": \"bg-foreground\",\n      \"--primary\": \"bg-primary\",\n      \"--primary-foreground\": \"bg-primary-foreground\",\n      \"--secondary\": \"bg-secondary\",\n      \"--secondary-foreground\": \"bg-secondary-foreground\",\n      \"--muted\": \"bg-muted\",\n      \"--muted-foreground\": \"bg-muted-foreground\",\n      \"--accent\": \"bg-accent\",\n      \"--accent-foreground\": \"bg-accent-foreground\",\n      \"--destructive\": \"bg-destructive\",\n      \"--destructive-foreground\": \"bg-destructive-foreground\",\n      \"--border\": \"bg-border\",\n      \"--input\": \"bg-input\",\n      \"--ring\": \"bg-ring\",\n      \"--card\": \"bg-card\",\n      \"--card-foreground\": \"bg-card-foreground\",\n      \"--popover\": \"bg-popover\",\n      \"--popover-foreground\": \"bg-popover-foreground\",\n      \"--chart-1\": \"bg-chart-1\",\n      \"--chart-2\": \"bg-chart-2\",\n      \"--chart-3\": \"bg-chart-3\",\n      \"--chart-4\": \"bg-chart-4\",\n      \"--chart-5\": \"bg-chart-5\",\n      \"--sidebar\": \"bg-[hsl(var(--sidebar))]\",\n      \"--sidebar-foreground\": \"bg-[hsl(var(--sidebar-foreground))]\",\n      \"--sidebar-primary\": \"bg-[hsl(var(--sidebar-primary))]\",\n      \"--sidebar-primary-foreground\":\n        \"bg-[hsl(var(--sidebar-primary-foreground))]\",\n      \"--sidebar-accent\": \"bg-[hsl(var(--sidebar-accent))]\",\n      \"--sidebar-accent-foreground\":\n        \"bg-[hsl(var(--sidebar-accent-foreground))]\",\n      \"--sidebar-border\": \"bg-[hsl(var(--sidebar-border))]\",\n      \"--sidebar-ring\": \"bg-[hsl(var(--sidebar-ring))]\",\n    };\n\n    return (\n      <div>\n        {/* 현재 테마 표시 */}\n        <div\n          style={{\n            marginBottom: \"1rem\",\n            padding: \"0.5rem\",\n            background: isDarkMode ? \"#333\" : \"#f5f5f5\",\n            borderRadius: \"4px\",\n          }}\n        >\n          <strong>Current Theme:</strong>{\" \"}\n          {isDarkMode ? \"Dark Mode\" : \"Light Mode\"}\n        </div>\n\n        {/* shadcn 토큰 */}\n        <h2 style={{ marginBottom: \"1rem\" }}>Shadcn Design Tokens</h2>\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: \"repeat(6, 1fr)\",\n            gap: \"1rem\",\n            marginBottom: \"2rem\",\n          }}\n        >\n          {Object.entries(tokenClassMap).map(([token, className]) => {\n            const value = tokens[token];\n            return (\n              <div key={token} style={{ textAlign: \"center\" }}>\n                <div\n                  className={className}\n                  style={{\n                    width: \"100%\",\n                    height: \"60px\",\n                    borderRadius: \"8px\",\n                    border:\n                      token === \"--card\" || token === \"--background\"\n                        ? isDarkMode\n                          ? \"2px solid #666\"\n                          : \"2px solid #ccc\"\n                        : isDarkMode\n                          ? \"1px solid #333\"\n                          : \"1px solid #e5e5e5\",\n                  }}\n                />\n                <p style={{ fontSize: \"12px\", marginTop: \"4px\" }}>{token}</p>\n                <code style={{ fontSize: \"10px\" }}>\n                  {value || \"loading...\"}\n                </code>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Tailwind 팔레트 */}\n        <h2 style={{ marginBottom: \"1rem\" }}>Tailwind Color Palette</h2>\n        {renderTailwindColors(tailwindColors)}\n      </div>\n    );\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/tokens/radius-story/radius.stories.tsx",
      "content": "import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\ntype Radius = {\n  name: string;\n  value: string;\n};\n\nconst RadiusTile = ({ value }: Pick<Radius, \"value\">) => {\n  const style = window.getComputedStyle(document.body);\n  const radius = style.getPropertyValue(value);\n\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <div\n        className=\"bg-card size-20 border-2\"\n        style={{ borderRadius: radius }}\n      />\n      <p className=\"text-center text-xs opacity-70\">{value}</p>\n      <p className=\"text-center text-xs\">{radius}</p>\n    </div>\n  );\n};\n\n/**\n * Radius tokens for the design system\n */\nconst meta: Meta<{\n  radius: Radius[];\n}> = {\n  title: \"foundation/Radius\",\n  tags: [\"autodocs\"],\n  argTypes: {},\n  render: (args) => (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>Name</TableHead>\n          <TableHead>\n            <span className=\"sr-only\">Preview</span>\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {args.radius.map(({ name, value }) => (\n          <TableRow key={name}>\n            <TableCell>{name}</TableCell>\n            <TableCell>\n              <RadiusTile value={value} />\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Border radius tokens used for UI elements like buttons, cards, and modals.\n */\nexport const Core: Story = {\n  args: {\n    radius: [\n      { name: \"xs\", value: \"--radius-xs\" },\n      { name: \"sm\", value: \"--radius-sm\" },\n      { name: \"md\", value: \"--radius-md\" },\n      { name: \"lg\", value: \"--radius-lg\" },\n    ],\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/tokens/shadow-story/shadow.stories.tsx",
      "content": "import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\ntype Shadow = {\n  name: string;\n  value: string;\n};\n\nconst ShadowTile = ({ value }: Pick<Shadow, \"value\">) => {\n  const style = window.getComputedStyle(document.body);\n  const shadow = style.getPropertyValue(value);\n\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <div\n        className=\"bg-card size-20 rounded-md\"\n        style={{ boxShadow: shadow }}\n      />\n      <p className=\"text-center text-xs opacity-70\">{value}</p>\n      <p className=\"text-center text-xs\">{shadow}</p>\n    </div>\n  );\n};\n\n/**\n * Shadow tokens for the design system\n */\nconst meta: Meta<{\n  shadow: Shadow[];\n}> = {\n  title: \"foundation/Shadow\",\n  tags: [\"autodocs\"],\n  argTypes: {},\n  render: (args) => (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>Name</TableHead>\n          <TableHead>\n            <span className=\"sr-only shadow-2xl\">Preview</span>\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {args.shadow.map(({ name, value }) => (\n          <TableRow key={name}>\n            <TableCell>{name}</TableCell>\n            <TableCell>\n              <ShadowTile value={value} />\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Box shadow tokens used for UI elements like cards, modals, and overlays.\n */\nexport const Core: Story = {\n  args: {\n    shadow: [\n      { name: \"xxs\", value: \"--shadow-2xs\" },\n      { name: \"xs\", value: \"--shadow-xs\" },\n      { name: \"sm\", value: \"--shadow-sm\" },\n      { name: \"md\", value: \"--shadow-md\" },\n      { name: \"lg\", value: \"--shadow-lg\" },\n      { name: \"xl\", value: \"--shadow-xl\" },\n      { name: \"2xl\", value: \"--shadow-2xl\" },\n    ],\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/tokens/spacing-story/spacing.stories.tsx",
      "content": "import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\ntype Spacing = {\n  name: string;\n  value: number;\n};\n\nconst SpacingRow = ({ value, name }: Spacing) => {\n  const style = window.getComputedStyle(document.body);\n  const size = style.getPropertyValue(\"--spacing\");\n  const rem = parseFloat(size) * value;\n  const pixels = parseFloat(size) * 16 * value;\n  return (\n    <TableRow>\n      <TableCell>{name}</TableCell>\n      <TableCell>{rem}rem</TableCell>\n      <TableCell>{pixels}px</TableCell>\n      <TableCell className=\"w-full\">\n        <div className=\"bg-muted border\">\n          <div className=\"bg-primary h-4\" style={{ width: pixels }} />\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n};\n\n/**\n * Spacing tokens for the design system\n */\nconst meta: Meta<{\n  scale: Spacing[];\n}> = {\n  title: \"foundation/Spacing\",\n  tags: [\"autodocs\"],\n  argTypes: {},\n  render: (args) => (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>Name</TableHead>\n          <TableHead>Size</TableHead>\n          <TableHead>Pixels</TableHead>\n          <TableHead className=\"hidden sm:table-cell\">\n            <span className=\"sr-only\">Preview</span>\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {args.scale.map(({ name, value }, idx) => (\n          <SpacingRow key={idx} value={value} name={name} />\n        ))}\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Spacing values used for padding, margins, and layout.\n */\nexport const Core: Story = {\n  args: {\n    scale: [\n      { name: \"x-1\", value: 1 },\n      { name: \"x-4\", value: 4 },\n      { name: \"x-8\", value: 8 },\n      { name: \"x-12\", value: 12 },\n      { name: \"x-16\", value: 16 },\n      { name: \"x-20\", value: 20 },\n      { name: \"x-24\", value: 24 },\n      { name: \"x-28\", value: 28 },\n      { name: \"x-32\", value: 32 },\n      { name: \"x-36\", value: 36 },\n      { name: \"x-40\", value: 40 },\n      { name: \"x-44\", value: 44 },\n      { name: \"x-48\", value: 48 },\n      { name: \"x-52\", value: 52 },\n      { name: \"x-56\", value: 56 },\n      { name: \"x-60\", value: 60 },\n      { name: \"x-64\", value: 64 },\n      { name: \"x-68\", value: 68 },\n      { name: \"x-72\", value: 72 },\n      { name: \"x-76\", value: 76 },\n      { name: \"x-80\", value: 80 },\n    ],\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/tokens/typography-story/typography.stories.tsx",
      "content": "import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport type { CSSProperties, ReactNode } from \"react\";\n\ntype Typography = {\n  name: string;\n  value: string;\n};\n\nconst TypographyRow = ({\n  value,\n  name,\n  styleKey,\n  children,\n}: {\n  value: string;\n  name: string;\n  styleKey: keyof CSSProperties;\n  children?: ReactNode;\n}) => {\n  const style = window.getComputedStyle(document.body);\n  const styleValue = style.getPropertyValue(value);\n  return (\n    <TableRow>\n      <TableCell>{name}</TableCell>\n      <TableCell>\n        {styleValue.split(\",\").map((v, idx) => (\n          <p key={`prop-${idx}`}>{v}</p>\n        ))}\n      </TableCell>\n      <TableCell>\n        <div style={{ [styleKey]: styleValue }} className=\"line-clamp-1\">\n          {children}\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n};\n\n/**\n * Typography tokens for the design system.\n */\nconst meta: Meta<{\n  children: string;\n  key: keyof CSSProperties;\n  property: Typography[];\n}> = {\n  title: \"foundation/Typography/Tokens\",\n  tags: [\"autodocs\"],\n  argTypes: {},\n  args: {\n    children: \"Typeface\",\n  },\n  render: (args) => (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>Name</TableHead>\n          <TableHead>Property</TableHead>\n          <TableHead>\n            <span className=\"sr-only\">Preview</span>\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {args.property.map(({ name, value }) => (\n          <TypographyRow\n            key={name}\n            name={name}\n            value={value}\n            styleKey={args.key}\n          >\n            {args.children}\n          </TypographyRow>\n        ))}\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Font family tokens for the design system.\n */\nexport const FontFamily: Story = {\n  args: {\n    key: \"fontFamily\",\n    property: [\n      { name: \"sans\", value: \"--font-sans\" },\n      { name: \"serif\", value: \"--font-serif\" },\n      { name: \"mono\", value: \"--font-mono\" },\n    ],\n  },\n};\n\n/**\n * Font size tokens for the design system.\n */\nexport const FontSize: Story = {\n  args: {\n    key: \"fontSize\",\n    property: [\n      { name: \"xs\", value: \"--text-xs\" },\n      { name: \"sm\", value: \"--text-sm\" },\n      { name: \"base\", value: \"--text-base\" },\n      { name: \"lg\", value: \"--text-lg\" },\n      { name: \"xl\", value: \"--text-xl\" },\n      { name: \"2xl\", value: \"--text-2xl\" },\n      { name: \"3xl\", value: \"--text-3xl\" },\n      { name: \"4xl\", value: \"--text-4xl\" },\n      { name: \"5xl\", value: \"--text-5xl\" },\n      { name: \"6xl\", value: \"--text-6xl\" },\n    ],\n  },\n};\n\n/**\n * Font weight tokens for the design system.\n */\nexport const FontWeight: Story = {\n  args: {\n    key: \"fontWeight\",\n    property: [\n      { name: \"thin\", value: \"--font-weight-thin\" },\n      { name: \"extralight\", value: \"--font-weight-extralight\" },\n      { name: \"light\", value: \"--font-weight-light\" },\n      { name: \"normal\", value: \"--font-weight-normal\" },\n      { name: \"medium\", value: \"--font-weight-medium\" },\n      { name: \"semibold\", value: \"--font-weight-semibold\" },\n      { name: \"bold\", value: \"--font-weight-bold\" },\n      { name: \"extrabold\", value: \"--font-weight-extrabold\" },\n      { name: \"black\", value: \"--font-weight-black\" },\n    ],\n  },\n};\n\n/**\n * Letter Spacing tokens for the design system.\n */\nexport const LetterSpacing: Story = {\n  args: {\n    key: \"letterSpacing\",\n    property: [\n      { name: \"tighter\", value: \"--tracking-tighter\" },\n      { name: \"tight\", value: \"--tracking-tight\" },\n      { name: \"normal\", value: \"--tracking-normal\" },\n      { name: \"wide\", value: \"--tracking-wide\" },\n      { name: \"wider\", value: \"--tracking-wider\" },\n      { name: \"widest\", value: \"--tracking-widest\" },\n    ],\n  },\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/pie-chart-story/pie-charts.stories.tsx",
      "content": "import { ChartContainer } from \"@/components/ui/chart\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\n// Import all pie chart components\nimport { ChartPieDonut } from \"./pie-chart-donut\";\nimport { ChartPieDonutActive } from \"./pie-chart-donut-active\";\nimport { ChartPieDonutText } from \"./pie-chart-donut-text\";\nimport { ChartPieInteractive } from \"./pie-chart-interactive\";\nimport { ChartPieLabel } from \"./pie-chart-label\";\nimport { ChartPieLabelCustom } from \"./pie-chart-label-custom\";\nimport { ChartPieLabelList } from \"./pie-chart-label-list\";\nimport { ChartPieLegend } from \"./pie-chart-legend\";\nimport { ChartPieSeparatorNone } from \"./pie-chart-separator-none\";\nimport { ChartPieSimple } from \"./pie-chart-simple\";\nimport { ChartPieStacked } from \"./pie-chart-stacked\";\n\nconst meta = {\n  title: \"ui/Chart/Pie Charts\",\n  component: ChartContainer,\n  tags: [\"autodocs\"],\n} satisfies Meta<typeof ChartContainer>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Simple: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieSimple />,\n};\n\nexport const SeparatorNone: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieSeparatorNone />,\n};\n\nexport const Label: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieLabel />,\n};\n\nexport const LabelCustom: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieLabelCustom />,\n};\n\nexport const LabelList: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieLabelList />,\n};\n\nexport const Legend: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieLegend />,\n};\n\nexport const Donut: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieDonut />,\n};\n\nexport const DonutActive: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieDonutActive />,\n};\n\nexport const DonutText: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieDonutText />,\n};\n\nexport const Stacked: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieStacked />,\n};\n\nexport const Interactive: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartPieInteractive />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/line-chart-story/line-charts.stories.tsx",
      "content": "import { ChartContainer } from \"@/components/ui/chart\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\n// Import all line chart components\nimport { ChartLineDefault } from \"./line-chart-default\";\nimport { ChartLineDots } from \"./line-chart-dots\";\nimport { ChartLineDotsColors } from \"./line-chart-dots-colors\";\nimport { ChartLineDotsCustom } from \"./line-chart-dots-custom\";\nimport { ChartLineInteractive } from \"./line-chart-interactive\";\nimport { ChartLineLabel } from \"./line-chart-label\";\nimport { ChartLineLabelCustom } from \"./line-chart-label-custom\";\nimport { ChartLineLinear } from \"./line-chart-linear\";\nimport { ChartLineMultiple } from \"./line-chart-multiple\";\nimport { ChartLineStep } from \"./line-chart-step\";\n\nconst meta = {\n  title: \"ui/Chart/Line Charts\",\n  component: ChartContainer,\n  tags: [\"autodocs\"],\n} satisfies Meta<typeof ChartContainer>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineDefault />,\n};\n\nexport const Interactive: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineInteractive />,\n};\n\nexport const Linear: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineLinear />,\n};\n\nexport const Step: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineStep />,\n};\n\nexport const Multiple: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineMultiple />,\n};\n\nexport const Dots: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineDots />,\n};\n\nexport const DotsCustom: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineDotsCustom />,\n};\n\nexport const DotsColors: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineDotsColors />,\n};\n\nexport const Label: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineLabel />,\n};\n\nexport const LabelCustom: Story = {\n  // @ts-expect-error - Storybook 타입 시스템이 component: ChartContainer와 render 함수 조합을 올바르게 처리하지 못합니다\n  args: {},\n  render: () => <ChartLineLabelCustom />,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/bar-chart-story/bar-charts.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { ChartContainer } from \"@/components/ui/chart\";\nimport { ChartBarInteractive } from \"./bar-chart-interactive\";\nimport { ChartBarDefault } from \"./bar-chart-default\";\nimport { ChartBarHorizontal } from \"./bar-chart-horizontal\";\nimport { ChartBarMultiple } from \"./bar-chart-multiple\";\nimport { ChartBarStacked } from \"./bar-chart-stacked\";\nimport { ChartBarLabel } from \"./bar-chart-label\";\nimport { ChartBarLabelCustom } from \"./bar-chart-label-custom\";\nimport { ChartBarMixed } from \"./bar-chart-mixed\";\nimport { ChartBarActive } from \"./bar-chart-active\";\nimport { ChartBarNegative } from \"./bar-chart-negative\";\n\nconst meta = {\n  title: \"ui/Chart/Bar Charts\",\n  component: ChartContainer,\n  tags: [\"autodocs\"],\n} satisfies Meta<typeof ChartContainer>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Interactive bar chart with chart type selector\n */\nexport const Interactive: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarInteractive />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A simple bar chart\n */\nexport const Default: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarDefault />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Horizontal bar chart\n */\nexport const Horizontal: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarHorizontal />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Multiple bars side by side\n */\nexport const Multiple: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarMultiple />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Stacked bar chart with legend\n */\nexport const Stacked: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarStacked />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Bar chart with labels on top\n */\nexport const Label: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarLabel />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Bar chart with custom label positioning\n */\nexport const LabelCustom: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarLabelCustom />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Bar chart with different colors for each bar\n */\nexport const Mixed: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarMixed />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Bar chart with active state highlighting\n */\nexport const Active: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarActive />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Bar chart supporting negative values\n */\nexport const Negative: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartBarNegative />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/area-chart-story/area-charts.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { ChartContainer } from \"@/components/ui/chart\";\nimport { ChartAreaInteractive } from \"./area-chart-interactive\";\nimport { ChartAreaDefault } from \"./area-chart-default\";\nimport { ChartAreaLinear } from \"./area-chart-linear\";\nimport { ChartAreaStep } from \"./area-chart-step\";\nimport { ChartAreaLegend } from \"./area-chart-legend\";\nimport { ChartAreaStacked } from \"./area-chart-stacked\";\nimport { ChartAreaStackedExpand } from \"./area-chart-stacked-expand\";\nimport { ChartAreaIcons } from \"./area-chart-icons\";\nimport { ChartAreaGradient } from \"./area-chart-gradient\";\nimport { ChartAreaAxes } from \"./area-chart-axes\";\n\nconst meta = {\n  title: \"ui/Chart/Area Charts\",\n  component: ChartContainer,\n  tags: [\"autodocs\"],\n} satisfies Meta<typeof ChartContainer>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Interactive area chart with time range selector\n */\nexport const Interactive: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaInteractive />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A simple area chart showing desktop visitors\n */\nexport const Default: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaDefault />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Area chart with linear interpolation\n */\nexport const Linear: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaLinear />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Area chart with step interpolation\n */\nexport const Step: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaStep />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Area chart with legend showing multiple data series\n */\nexport const Legend: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaLegend />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Stacked area chart showing desktop and mobile visitors\n */\nexport const Stacked: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaStacked />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Stacked area chart with expanded view (100% stacked)\n */\nexport const StackedExpanded: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaStackedExpand />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Area chart with icons in the legend\n */\nexport const Icons: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaIcons />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Area chart with gradient fill\n */\nexport const Gradient: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaGradient />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * Area chart with both X and Y axes\n */\nexport const Axes: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartAreaAxes />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};",
      "type": "registry:component"
    },
    {
      "path": "src/registry/atoms/radar-chart-story/radar-charts.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { ChartContainer } from \"@/components/ui/chart\";\nimport { ChartRadarDefault } from \"./radar-chart-default\";\nimport { ChartRadarDots } from \"./radar-chart-dots\";\nimport { ChartRadarLinesOnly } from \"./radar-chart-lines-only\";\nimport { ChartRadarLabelCustom } from \"./radar-chart-label-custom\";\nimport { ChartRadarGridCustom } from \"./radar-chart-grid-custom\";\nimport { ChartRadarGridNone } from \"./radar-chart-grid-none\";\nimport { ChartRadarGridCircle } from \"./radar-chart-grid-circle\";\nimport { ChartRadarGridCircleNoLines } from \"./radar-chart-grid-circle-no-lines\";\nimport { ChartRadarGridCircleFill } from \"./radar-chart-grid-circle-fill\";\nimport { ChartRadarGridFill } from \"./radar-chart-grid-fill\";\nimport { ChartRadarMultiple } from \"./radar-chart-multiple\";\nimport { ChartRadarLegend } from \"./radar-chart-legend\";\n\nconst meta = {\n  title: \"ui/Chart/Radar Charts\",\n  component: ChartContainer,\n  tags: [\"autodocs\"],\n} satisfies Meta<typeof ChartContainer>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * A simple radar chart showing desktop visitors\n */\nexport const RadarDefault: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarDefault />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with dots on data points\n */\nexport const RadarDots: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarDots />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with lines only (no fill)\n */\nexport const RadarLinesOnly: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarLinesOnly />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with custom label formatting\n */\nexport const RadarLabelCustom: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarLabelCustom />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with custom grid configuration\n */\nexport const RadarGridCustom: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarGridCustom />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with no grid\n */\nexport const RadarGridNone: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarGridNone />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with circular grid\n */\nexport const RadarGridCircle: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarGridCircle />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with circular grid without radial lines\n */\nexport const RadarGridCircleNoLines: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarGridCircleNoLines />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with filled circular grid\n */\nexport const RadarGridCircleFill: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarGridCircleFill />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with filled grid\n */\nexport const RadarGridFill: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarGridFill />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with multiple data series\n */\nexport const RadarMultiple: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarMultiple />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n\n/**\n * A radar chart with legend for multiple series\n */\nexport const RadarLegend: Story = {\n  args: {\n    config: {},\n    children: <div />,\n  },\n  render: () => <ChartRadarLegend />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};",
      "type": "registry:component"
    }
  ],
  "categories": [
    "utility",
    "collection",
    "storybook"
  ]
}