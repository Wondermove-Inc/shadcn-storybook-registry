{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-otp-story",
  "type": "registry:component",
  "title": "Input OTP Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating OTP input component usage and variants",
  "dependencies": [
    "input-otp"
  ],
  "registryDependencies": [
    "input-otp"
  ],
  "files": [
    {
      "path": "src/registry/atoms/input-otp-story/input-otp.stories.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nfunction InputOTPDemo() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  );\n}\n\n/**\n * Accessible one-time password component with copy paste functionality.\n */\nconst meta = {\n  title: \"ui/InputOTP\",\n  component: InputOTPDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories:\n    /.*Demo$|.*Pattern$|.*Separator.*|.*Controlled$|.*Form$|FormSchema/,\n} satisfies Meta<typeof InputOTPDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default OTP input with separator.\n */\nexport const Default: Story = {};\n\n// Pattern example component\nfunction InputOTPPattern() {\n  return (\n    <InputOTP maxLength={6} pattern={REGEXP_ONLY_DIGITS_AND_CHARS}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  );\n}\n\n/**\n * OTP input with pattern validation (digits and characters only).\n */\nexport const Pattern: Story = {\n  render: () => <InputOTPPattern />,\n};\n\n// Separator example component\nfunction InputOTPWithSeparator() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={2} />\n        <InputOTPSlot index={3} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  );\n}\n\n/**\n * OTP input with multiple separators.\n */\nexport const Separator: Story = {\n  render: () => <InputOTPWithSeparator />,\n};\n\n// Separator with 4 digits example\nfunction InputOTPSeparatorFourDigits() {\n  return (\n    <InputOTP maxLength={4}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={2} />\n        <InputOTPSlot index={3} />\n      </InputOTPGroup>\n    </InputOTP>\n  );\n}\n\n/**\n * OTP input with separator for 4 digits.\n */\nexport const SeparatorFourDigits: Story = {\n  render: () => <InputOTPSeparatorFourDigits />,\n};\n\n// Controlled example component\nfunction InputOTPControlled() {\n  const [value, setValue] = React.useState(\"\");\n\n  return (\n    <div className=\"space-y-2\">\n      <InputOTP\n        maxLength={6}\n        value={value}\n        onChange={(value) => setValue(value)}\n      >\n        <InputOTPGroup>\n          <InputOTPSlot index={0} />\n          <InputOTPSlot index={1} />\n          <InputOTPSlot index={2} />\n          <InputOTPSlot index={3} />\n          <InputOTPSlot index={4} />\n          <InputOTPSlot index={5} />\n        </InputOTPGroup>\n      </InputOTP>\n      <div className=\"text-center text-sm\">\n        {value === \"\" ? (\n          <>Enter your one-time password.</>\n        ) : (\n          <>You entered: {value}</>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Controlled OTP input with value display.\n */\nexport const Controlled: Story = {\n  render: () => <InputOTPControlled />,\n};\n\nexport const ShouldAcceptOTPInput: Story = {\n  name: \"when user types OTP, should display entered values\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <InputOTPControlled />,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Input OTP가 사용자 입력을 받아 각 슬롯에 표시하고, 값을 추적하는지 확인\n    const inputs = canvas.getAllByRole(\"textbox\");\n    await expect(inputs.length).toBeGreaterThan(0);\n\n    // 첫 번째 입력 필드에 OTP 입력\n    await userEvent.type(inputs[0], \"123456\");\n\n    // 입력한 값이 표시되는지 확인\n    await waitFor(async () => {\n      const displayText = await canvas.findByText(/you entered: 123456/i);\n      await expect(displayText).toBeInTheDocument();\n    });\n  },\n};\n\nexport const ShouldAutoFocus: Story = {\n  name: \"when user types 6-digit OTP, should auto-focus next slot\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [value, setValue] = React.useState(\"\");\n    const [complete, setComplete] = React.useState(false);\n\n    return (\n      <div className=\"space-y-4\">\n        <InputOTP\n          maxLength={6}\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n            if (newValue.length === 6) {\n              setComplete(true);\n            }\n          }}\n        >\n          <InputOTPGroup>\n            <InputOTPSlot index={0} />\n            <InputOTPSlot index={1} />\n            <InputOTPSlot index={2} />\n          </InputOTPGroup>\n          <InputOTPSeparator />\n          <InputOTPGroup>\n            <InputOTPSlot index={3} />\n            <InputOTPSlot index={4} />\n            <InputOTPSlot index={5} />\n          </InputOTPGroup>\n        </InputOTP>\n        <div className=\"text-center text-sm\" data-testid=\"status\">\n          {complete ? (\n            <span className=\"text-green-600\">✓ OTP Complete: {value}</span>\n          ) : (\n            <span>Enter OTP ({value.length}/6)</span>\n          )}\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: 6자리 OTP 입력 시 자동으로 다음 슬롯으로 포커스가 이동하고, 완료 시 상태가 업데이트되는지 확인\n\n    // 초기 상태 확인\n    const status = canvas.getByTestId(\"status\");\n    await expect(status).toHaveTextContent(\"Enter OTP (0/6)\");\n\n    // 첫 번째 textbox 찾기\n    const inputs = canvas.getAllByRole(\"textbox\");\n    await expect(inputs.length).toBeGreaterThan(0);\n\n    // 6자리 OTP 입력\n    await userEvent.type(inputs[0], \"123456\");\n\n    // 완료 상태 확인\n    await waitFor(\n      () => {\n        expect(status).toHaveTextContent(\"✓ OTP Complete: 123456\");\n      },\n      { timeout: 2000 },\n    );\n  },\n};\n\n// Form example component\nconst FormSchema = z.object({\n  pin: z.string().min(6, {\n    message: \"Your one-time password must be 6 characters.\",\n  }),\n});\n\nfunction InputOTPForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      pin: \"\",\n    },\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"pin\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>One-Time Password</FormLabel>\n              <FormControl>\n                <InputOTP maxLength={6} {...field}>\n                  <InputOTPGroup>\n                    <InputOTPSlot index={0} />\n                    <InputOTPSlot index={1} />\n                    <InputOTPSlot index={2} />\n                    <InputOTPSlot index={3} />\n                    <InputOTPSlot index={4} />\n                    <InputOTPSlot index={5} />\n                  </InputOTPGroup>\n                </InputOTP>\n              </FormControl>\n              <FormDescription>\n                Please enter the one-time password sent to your phone.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\n/**\n * OTP input integrated with React Hook Form and Zod validation.\n */\nexport const WithForm: Story = {\n  render: () => <InputOTPForm />,\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "input",
    "otp",
    "form"
  ]
}