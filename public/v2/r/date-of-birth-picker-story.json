{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-of-birth-picker-story",
  "type": "registry:component",
  "title": "Date of Birth Picker Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating date of birth picker with year/month selection and validation",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "calendar",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/atoms/date-of-birth-picker-story/date-of-birth-picker.stories.tsx",
      "content": "\"use client\";\n\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { ChevronDownIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\n\nconst meta: Meta = {\n  title: \"ui/Calendar/Blocks/Date of Birth Picker\",\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n    const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n    return (\n      <div className=\"flex flex-col gap-3\">\n        <Label htmlFor=\"date\" className=\"px-1\">\n          Date of birth\n        </Label>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              id=\"date\"\n              className=\"w-48 justify-between font-normal\"\n            >\n              {date ? date.toLocaleDateString() : \"Select date\"}\n              <ChevronDownIcon />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              captionLayout=\"dropdown\"\n              onSelect={(date) => {\n                setDate(date);\n                setOpen(false);\n              }}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n    );\n  },\n};\n\nexport const ShouldSelectBirthDate: Story = {\n  name: \"when user clicks trigger and selects birth date, should display selected date\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n    const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n    return (\n      <div className=\"flex flex-col gap-3\">\n        <Label htmlFor=\"date\" className=\"px-1\">\n          Date of birth\n        </Label>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              id=\"date\"\n              className=\"w-48 justify-between font-normal\"\n            >\n              {date ? date.toLocaleDateString() : \"Select date\"}\n              <ChevronDownIcon />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              captionLayout=\"dropdown\"\n              onSelect={(date) => {\n                setDate(date);\n                setOpen(false);\n              }}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Date of Birth Picker가 트리거 버튼 클릭으로 열리고, 날짜 선택 후 표시되는지 확인\n    const triggerButton = canvas.getByRole(\"button\", { name: /select date/i });\n    await expect(triggerButton).toBeInTheDocument();\n\n    // 트리거 버튼 클릭하여 Calendar 열기\n    await userEvent.click(triggerButton);\n\n    // Calendar가 열렸는지 확인 (날짜 버튼 확인)\n    await waitFor(async () => {\n      const dateButtons = await canvas.findAllByRole(\"button\");\n      await expect(dateButtons.length).toBeGreaterThan(1);\n    });\n\n    // 날짜 버튼 찾기 (15일 선택)\n    const dateButtons = canvas.getAllByRole(\"button\");\n    const date15Button = dateButtons.find(\n      (button) => button.textContent?.trim() === \"15\",\n    );\n\n    if (date15Button) {\n      // 날짜 클릭\n      await userEvent.click(date15Button);\n\n      // 선택된 날짜가 버튼에 표시되는지 확인 (Popover가 닫히고 날짜가 표시됨)\n      await waitFor(() => {\n        expect(triggerButton.textContent).not.toMatch(/select date/i);\n      });\n    }\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "calendar",
    "date-picker",
    "form"
  ]
}