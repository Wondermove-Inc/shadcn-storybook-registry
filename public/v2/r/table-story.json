{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-story",
  "type": "registry:component",
  "title": "Table Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating table component usage and variants",
  "registryDependencies": [
    "table"
  ],
  "files": [
    {
      "path": "src/registry/atoms/table-story/table.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\n// Data from official docs\nconst invoices = [\n  {\n    invoice: \"INV001\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$250.00\",\n    paymentMethod: \"Credit Card\",\n  },\n  {\n    invoice: \"INV002\",\n    paymentStatus: \"Pending\",\n    totalAmount: \"$150.00\",\n    paymentMethod: \"PayPal\",\n  },\n  {\n    invoice: \"INV003\",\n    paymentStatus: \"Unpaid\",\n    totalAmount: \"$350.00\",\n    paymentMethod: \"Bank Transfer\",\n  },\n  {\n    invoice: \"INV004\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$450.00\",\n    paymentMethod: \"Credit Card\",\n  },\n  {\n    invoice: \"INV005\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$550.00\",\n    paymentMethod: \"PayPal\",\n  },\n  {\n    invoice: \"INV006\",\n    paymentStatus: \"Pending\",\n    totalAmount: \"$200.00\",\n    paymentMethod: \"Bank Transfer\",\n  },\n  {\n    invoice: \"INV007\",\n    paymentStatus: \"Unpaid\",\n    totalAmount: \"$300.00\",\n    paymentMethod: \"Credit Card\",\n  },\n];\n\n// Default example from official docs\nexport function TableDemo() {\n  return (\n    <Table>\n      <TableCaption>A list of your recent invoices.</TableCaption>\n      <TableHeader>\n        <TableRow>\n          <TableHead className=\"w-[100px]\">Invoice</TableHead>\n          <TableHead>Status</TableHead>\n          <TableHead>Method</TableHead>\n          <TableHead className=\"text-right\">Amount</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {invoices.map((invoice) => (\n          <TableRow key={invoice.invoice}>\n            <TableCell className=\"font-medium\">{invoice.invoice}</TableCell>\n            <TableCell>{invoice.paymentStatus}</TableCell>\n            <TableCell>{invoice.paymentMethod}</TableCell>\n            <TableCell className=\"text-right\">{invoice.totalAmount}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell colSpan={3}>Total</TableCell>\n          <TableCell className=\"text-right\">$2,500.00</TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n}\n\n/**\n * A responsive table component.\n */\nconst meta = {\n  title: \"ui/Table\",\n  component: Table,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <TableDemo />,\n} satisfies Meta<typeof Table>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default table with invoice data.\n */\nexport const Default: Story = {};\n\n/**\n * 테이블 정렬 기능을 테스트합니다.\n */\nexport const ShouldSortTableByColumn: Story = {\n  name: \"when user clicks column header, should sort table data by that column\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [sortKey, setSortKey] = React.useState<\n      \"invoice\" | \"paymentStatus\" | \"totalAmount\" | null\n    >(null);\n    const [sortOrder, setSortOrder] = React.useState<\"asc\" | \"desc\">(\"asc\");\n\n    const handleSort = (key: \"invoice\" | \"paymentStatus\" | \"totalAmount\") => {\n      if (sortKey === key) {\n        setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n      } else {\n        setSortKey(key);\n        setSortOrder(\"asc\");\n      }\n    };\n\n    const sortedInvoices = React.useMemo(() => {\n      if (!sortKey) return invoices;\n\n      return [...invoices].sort((a, b) => {\n        const aVal = a[sortKey];\n        const bVal = b[sortKey];\n\n        if (sortKey === \"totalAmount\") {\n          const aNum = parseFloat(aVal.replace(\"$\", \"\"));\n          const bNum = parseFloat(bVal.replace(\"$\", \"\"));\n          return sortOrder === \"asc\" ? aNum - bNum : bNum - aNum;\n        }\n\n        return sortOrder === \"asc\"\n          ? aVal.localeCompare(bVal)\n          : bVal.localeCompare(aVal);\n      });\n    }, [sortKey, sortOrder]);\n\n    return (\n      <Table>\n        <TableCaption>A list of your recent invoices.</TableCaption>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-[100px]\">\n              <button\n                onClick={() => handleSort(\"invoice\")}\n                className=\"font-medium\"\n              >\n                Invoice{\" \"}\n                {sortKey === \"invoice\" && (sortOrder === \"asc\" ? \"↑\" : \"↓\")}\n              </button>\n            </TableHead>\n            <TableHead>\n              <button\n                onClick={() => handleSort(\"paymentStatus\")}\n                className=\"font-medium\"\n              >\n                Status{\" \"}\n                {sortKey === \"paymentStatus\" &&\n                  (sortOrder === \"asc\" ? \"↑\" : \"↓\")}\n              </button>\n            </TableHead>\n            <TableHead>Method</TableHead>\n            <TableHead className=\"text-right\">\n              <button\n                onClick={() => handleSort(\"totalAmount\")}\n                className=\"font-medium\"\n              >\n                Amount{\" \"}\n                {sortKey === \"totalAmount\" && (sortOrder === \"asc\" ? \"↑\" : \"↓\")}\n              </button>\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {sortedInvoices.map((invoice) => (\n            <TableRow key={invoice.invoice}>\n              <TableCell className=\"font-medium\">{invoice.invoice}</TableCell>\n              <TableCell>{invoice.paymentStatus}</TableCell>\n              <TableCell>{invoice.paymentMethod}</TableCell>\n              <TableCell className=\"text-right\">\n                {invoice.totalAmount}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TableCell colSpan={3}>Total</TableCell>\n            <TableCell className=\"text-right\">$2,500.00</TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: 테이블 컬럼 헤더 클릭 시 해당 컬럼으로 정렬되는지 확인\n\n    // Invoice 컬럼으로 정렬\n    const invoiceHeader = canvas.getByRole(\"button\", { name: /Invoice/i });\n    await expect(invoiceHeader).toBeInTheDocument();\n    await userEvent.click(invoiceHeader);\n\n    // 정렬 표시(↑) 확인\n    await expect(invoiceHeader).toHaveTextContent(\"↑\");\n\n    // 첫 번째 행이 INV001인지 확인 (오름차순)\n    const cells = canvas.getAllByRole(\"cell\");\n    await expect(cells[0]).toHaveTextContent(\"INV001\");\n\n    // 다시 클릭하여 내림차순 정렬\n    await userEvent.click(invoiceHeader);\n    await expect(invoiceHeader).toHaveTextContent(\"↓\");\n\n    // 첫 번째 행이 INV007인지 확인 (내림차순)\n    const cellsDesc = canvas.getAllByRole(\"cell\");\n    await expect(cellsDesc[0]).toHaveTextContent(\"INV007\");\n\n    // Amount 컬럼으로 정렬\n    const amountHeader = canvas.getByRole(\"button\", { name: /Amount/i });\n    await userEvent.click(amountHeader);\n\n    // Amount로 정렬 표시 확인\n    await expect(amountHeader).toHaveTextContent(\"↑\");\n\n    // 첫 번째 행이 $150.00인지 확인 (가장 작은 금액)\n    const amountCells = canvas.getAllByRole(\"cell\");\n    const firstAmountCell = amountCells.find((cell: HTMLElement) =>\n      cell.textContent?.includes(\"$\"),\n    );\n    await expect(firstAmountCell).toHaveTextContent(\"$150.00\");\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "table",
    "data"
  ]
}