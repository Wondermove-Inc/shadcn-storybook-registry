{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar-story",
  "type": "registry:component",
  "title": "Avatar Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating avatar component usage and variants",
  "registryDependencies": [
    "avatar"
  ],
  "files": [
    {
      "path": "src/registry/atoms/avatar-story/avatar.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { expect, waitFor, within } from \"storybook/test\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport function AvatarDemo() {\n  return (\n    <div className=\"flex flex-row flex-wrap items-center gap-12\">\n      <Avatar>\n        <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n        <AvatarFallback>CN</AvatarFallback>\n      </Avatar>\n      <Avatar className=\"rounded-lg\">\n        <AvatarImage\n          src=\"https://github.com/evilrabbit.png\"\n          alt=\"@evilrabbit\"\n        />\n        <AvatarFallback>ER</AvatarFallback>\n      </Avatar>\n      <div className=\"*:data-[slot=avatar]:ring-background flex -space-x-2 *:data-[slot=avatar]:ring-2 *:data-[slot=avatar]:grayscale\">\n        <Avatar>\n          <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n          <AvatarFallback>CN</AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarImage src=\"https://github.com/leerob.png\" alt=\"@leerob\" />\n          <AvatarFallback>LR</AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarImage\n            src=\"https://github.com/evilrabbit.png\"\n            alt=\"@evilrabbit\"\n          />\n          <AvatarFallback>ER</AvatarFallback>\n        </Avatar>\n      </div>\n    </div>\n  );\n}\n\n/**\n * An image element with a fallback for representing the user.\n */\nconst meta = {\n  title: \"ui/Avatar\",\n  component: Avatar,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <AvatarDemo />,\n} satisfies Meta<typeof Avatar>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the avatar.\n */\nexport const Default: Story = {};\n\n/**\n * Basic avatar with image and fallback.\n */\nexport const Basic: Story = {\n  render: () => (\n    <Avatar>\n      <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n      <AvatarFallback>CN</AvatarFallback>\n    </Avatar>\n  ),\n};\n\n/**\n * Avatar with rounded corners.\n */\nexport const Rounded: Story = {\n  render: () => (\n    <Avatar className=\"rounded-lg\">\n      <AvatarImage src=\"https://github.com/evilrabbit.png\" alt=\"@evilrabbit\" />\n      <AvatarFallback>ER</AvatarFallback>\n    </Avatar>\n  ),\n};\n\n/**\n * Stacked avatars with grayscale effect.\n */\nexport const Stacked: Story = {\n  render: () => (\n    <div className=\"*:data-[slot=avatar]:ring-background flex -space-x-2 *:data-[slot=avatar]:ring-2 *:data-[slot=avatar]:grayscale\">\n      <Avatar>\n        <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n        <AvatarFallback>CN</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage src=\"https://github.com/leerob.png\" alt=\"@leerob\" />\n        <AvatarFallback>LR</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage\n          src=\"https://github.com/evilrabbit.png\"\n          alt=\"@evilrabbit\"\n        />\n        <AvatarFallback>ER</AvatarFallback>\n      </Avatar>\n    </div>\n  ),\n};\n\n/**\n * Avatar with only fallback (no image).\n */\nexport const FallbackOnly: Story = {\n  render: () => (\n    <Avatar>\n      <AvatarFallback>AB</AvatarFallback>\n    </Avatar>\n  ),\n};\n\n/**\n * Avatar Ïù¥ÎØ∏ÏßÄ Ìè¥Î∞±ÏùÑ ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§.\n */\nexport const ShouldShowFallbackOnImageError: Story = {\n  name: \"when image fails to load, should display fallback text\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <div className=\"flex gap-4\">\n      <Avatar>\n        <AvatarImage\n          src=\"https://invalid-url-that-will-fail.example/image.png\"\n          alt=\"@invalid\"\n        />\n        <AvatarFallback data-testid=\"fallback\">FB</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n        <AvatarFallback>CN</AvatarFallback>\n      </Avatar>\n    </div>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // üéØ Î™©Ï†Å: Ïù¥ÎØ∏ÏßÄ Î°úÎî© Ïã§Ìå® Ïãú fallback ÌÖçÏä§Ìä∏Í∞Ä ÌëúÏãúÎêòÎäîÏßÄ ÌôïÏù∏\n\n    // FallbackÏù¥ ÌëúÏãúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞\n    await waitFor(\n      async () => {\n        const fallback = await canvas.findByTestId(\"fallback\");\n        await expect(fallback).toBeInTheDocument();\n        await expect(fallback).toHaveTextContent(\"FB\");\n      },\n      { timeout: 3000 },\n    );\n\n    // Îëê Î≤àÏß∏ AvatarÎäî Ï†ïÏÉÅ Ïù¥ÎØ∏ÏßÄÏù¥ÎØÄÎ°ú imgÍ∞Ä Î°úÎìúÎêòÏñ¥Ïïº Ìï®\n    const images = canvas.getAllByRole(\"img\");\n    await waitFor(\n      () => {\n        // ÏµúÏÜå ÌïòÎÇòÏùò Ïù¥ÎØ∏ÏßÄÍ∞Ä Î°úÎìúÎê®\n        expect(images.length).toBeGreaterThan(0);\n      },\n      { timeout: 3000 },\n    );\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "avatar",
    "profile"
  ]
}