{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert-story",
  "type": "registry:component",
  "title": "Alert Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating alert component usage and variants",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "alert"
  ],
  "files": [
    {
      "path": "src/registry/atoms/alert-story/alert.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { AlertCircleIcon, CheckCircle2Icon, PopcornIcon } from \"lucide-react\";\nimport { expect, within } from \"storybook/test\";\n\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n\nexport function AlertDemo() {\n  return (\n    <div className=\"grid w-full max-w-xl items-start gap-4\">\n      <Alert>\n        <CheckCircle2Icon />\n        <AlertTitle>Success! Your changes have been saved</AlertTitle>\n        <AlertDescription>\n          This is an alert with icon, title and description.\n        </AlertDescription>\n      </Alert>\n      <Alert>\n        <PopcornIcon />\n        <AlertTitle>\n          This Alert has a title and an icon. No description.\n        </AlertTitle>\n      </Alert>\n      <Alert variant=\"destructive\">\n        <AlertCircleIcon />\n        <AlertTitle>Unable to process your payment.</AlertTitle>\n        <AlertDescription>\n          <p>Please verify your billing information and try again.</p>\n          <ul className=\"list-inside list-disc text-sm\">\n            <li>Check your card details</li>\n            <li>Ensure sufficient funds</li>\n            <li>Verify billing address</li>\n          </ul>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n}\n\n/**\n * Displays a callout for user attention.\n */\nconst meta = {\n  title: \"ui/Alert\",\n  component: Alert,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    variant: \"default\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Alert>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the alert.\n */\nexport const Default: Story = {\n  render: () => <AlertDemo />,\n};\n\n/**\n * Success alert with icon, title and description.\n */\nexport const Success: Story = {\n  render: () => (\n    <Alert>\n      <CheckCircle2Icon />\n      <AlertTitle>Success! Your changes have been saved</AlertTitle>\n      <AlertDescription>\n        This is an alert with icon, title and description.\n      </AlertDescription>\n    </Alert>\n  ),\n};\n\n/**\n * Alert with title and icon only, no description.\n */\nexport const TitleOnly: Story = {\n  render: () => (\n    <Alert>\n      <PopcornIcon />\n      <AlertTitle>\n        This Alert has a title and an icon. No description.\n      </AlertTitle>\n    </Alert>\n  ),\n};\n\n/**\n * Destructive alert with list content.\n */\nexport const Destructive: Story = {\n  render: () => (\n    <Alert variant=\"destructive\">\n      <AlertCircleIcon />\n      <AlertTitle>Unable to process your payment.</AlertTitle>\n      <AlertDescription>\n        <p>Please verify your billing information and try again.</p>\n        <ul className=\"list-inside list-disc text-sm\">\n          <li>Check your card details</li>\n          <li>Ensure sufficient funds</li>\n          <li>Verify billing address</li>\n        </ul>\n      </AlertDescription>\n    </Alert>\n  ),\n};\n\nexport const ShouldRenderAlert: Story = {\n  name: \"when rendered, should display alert content\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <Alert data-testid=\"test-alert\">\n      <CheckCircle2Icon />\n      <AlertTitle>Success! Your changes have been saved</AlertTitle>\n      <AlertDescription>\n        This is an alert with icon, title and description.\n      </AlertDescription>\n    </Alert>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Alert가 올바르게 렌더링되고 텍스트가 표시되는지 확인\n    const alert = canvas.getByTestId(\"test-alert\");\n    await expect(alert).toBeInTheDocument();\n\n    const title = canvas.getByText(\"Success! Your changes have been saved\");\n    await expect(title).toBeInTheDocument();\n\n    const description = canvas.getByText(\n      /alert with icon, title and description/i,\n    );\n    await expect(description).toBeInTheDocument();\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "alert",
    "feedback"
  ]
}