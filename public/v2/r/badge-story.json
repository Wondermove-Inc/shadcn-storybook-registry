{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge-story",
  "type": "registry:component",
  "title": "Badge Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating badge component usage and variants",
  "registryDependencies": [
    "badge"
  ],
  "files": [
    {
      "path": "src/registry/atoms/badge-story/badge.stories.tsx",
      "content": "import React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { BadgeCheckIcon } from \"lucide-react\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function BadgeDemo() {\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <div className=\"flex w-full flex-wrap gap-2\">\n        <Badge>Badge</Badge>\n        <Badge variant=\"secondary\">Secondary</Badge>\n        <Badge variant=\"destructive\">Destructive</Badge>\n        <Badge variant=\"outline\">Outline</Badge>\n      </div>\n      <div className=\"flex w-full flex-wrap gap-2\">\n        <Badge\n          variant=\"secondary\"\n          className=\"bg-blue-500 text-white dark:bg-blue-600\"\n        >\n          <BadgeCheckIcon />\n          Verified\n        </Badge>\n        <Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\">\n          8\n        </Badge>\n        <Badge\n          className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n          variant=\"destructive\"\n        >\n          99\n        </Badge>\n        <Badge\n          className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n          variant=\"outline\"\n        >\n          20+\n        </Badge>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Displays a badge or a component that looks like a badge.\n */\nconst meta = {\n  title: \"ui/Badge\",\n  component: Badge,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    children: \"Badge\",\n    variant: \"default\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Badge>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the badge.\n */\nexport const Default: Story = {};\n\n/**\n * Secondary badge variant.\n */\nexport const Secondary: Story = {\n  args: {\n    variant: \"secondary\",\n    children: \"Secondary\",\n  },\n};\n\n/**\n * Destructive badge variant.\n */\nexport const Destructive: Story = {\n  args: {\n    variant: \"destructive\",\n    children: \"Destructive\",\n  },\n};\n\n/**\n * Outline badge variant.\n */\nexport const Outline: Story = {\n  args: {\n    variant: \"outline\",\n    children: \"Outline\",\n  },\n};\n\n/**\n * Badge with icon.\n */\nexport const WithIcon: Story = {\n  render: () => (\n    <Badge\n      variant=\"secondary\"\n      className=\"bg-blue-500 text-white dark:bg-blue-600\"\n    >\n      <BadgeCheckIcon />\n      Verified\n    </Badge>\n  ),\n};\n\n/**\n * Numeric badge examples.\n */\nexport const Numeric: Story = {\n  render: () => (\n    <div className=\"flex flex-wrap gap-2\">\n      <Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\">\n        8\n      </Badge>\n      <Badge\n        className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n        variant=\"destructive\"\n      >\n        99\n      </Badge>\n      <Badge\n        className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\n        variant=\"outline\"\n      >\n        20+\n      </Badge>\n    </div>\n  ),\n};\n\n/**\n * Badge variant 변경을 테스트합니다.\n */\nexport const ShouldChangeVariant: Story = {\n  name: \"when user clicks buttons, should change badge variant dynamically\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [variant, setVariant] = React.useState<\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    >(\"default\");\n\n    return (\n      <div className=\"flex flex-col items-center gap-4\">\n        <Badge variant={variant} data-testid=\"badge\">\n          {variant.charAt(0).toUpperCase() + variant.slice(1)} Badge\n        </Badge>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setVariant(\"default\")}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            Default\n          </button>\n          <button\n            onClick={() => setVariant(\"secondary\")}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            Secondary\n          </button>\n          <button\n            onClick={() => setVariant(\"destructive\")}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            Destructive\n          </button>\n          <button\n            onClick={() => setVariant(\"outline\")}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            Outline\n          </button>\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Badge variant가 버튼 클릭에 따라 동적으로 변경되는지 확인\n\n    // 초기 상태 확인 (default)\n    const badge = canvas.getByTestId(\"badge\");\n    await expect(badge).toBeInTheDocument();\n    await expect(badge).toHaveTextContent(\"Default Badge\");\n\n    // Secondary 버튼 클릭\n    const secondaryButton = canvas.getByRole(\"button\", { name: /Secondary/i });\n    await userEvent.click(secondaryButton);\n    await expect(badge).toHaveTextContent(\"Secondary Badge\");\n\n    // Destructive 버튼 클릭\n    const destructiveButton = canvas.getByRole(\"button\", {\n      name: /Destructive/i,\n    });\n    await userEvent.click(destructiveButton);\n    await expect(badge).toHaveTextContent(\"Destructive Badge\");\n\n    // Outline 버튼 클릭\n    const outlineButton = canvas.getByRole(\"button\", { name: /Outline/i });\n    await userEvent.click(outlineButton);\n    await expect(badge).toHaveTextContent(\"Outline Badge\");\n\n    // 다시 Default로 돌아가기\n    const defaultButton = canvas.getByRole(\"button\", { name: /Default/i });\n    await userEvent.click(defaultButton);\n    await expect(badge).toHaveTextContent(\"Default Badge\");\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "badge",
    "indicator"
  ]
}