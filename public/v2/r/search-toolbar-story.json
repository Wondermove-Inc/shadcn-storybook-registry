{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "search-toolbar-story",
  "type": "registry:component",
  "title": "SearchToolbar Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories for code editor search toolbar with input field, search options toggles, and navigation controls",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input-group",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/registry/templates/contents/search-toolbar.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  ArrowUp,\n  ArrowDown,\n  X,\n  CaseSensitive,\n  WholeWord,\n  Regex,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupInput,\n  InputGroupButton,\n} from \"@/components/ui/input-group\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\n/**\n * 🎯 목적: 검색 툴바 컴포넌트 Props 타입 정의\n */\ninterface SearchToolbarProps {\n  /** 🎯 목적: 검색어 값 */\n  searchValue?: string;\n  /** 🎯 목적: 검색어 변경 핸들러 */\n  onSearchChange?: (value: string) => void;\n  /** 🎯 목적: 검색 실행 핸들러 */\n  onSearch?: (value: string) => void;\n  /** 🎯 목적: 이전 검색 결과로 이동 */\n  onPrevious?: () => void;\n  /** 🎯 목적: 다음 검색 결과로 이동 */\n  onNext?: () => void;\n  /** 🎯 목적: 검색 툴바 닫기 */\n  onClose?: () => void;\n  /** 🎯 목적: 대소문자 구분 토글 */\n  onCaseSensitiveToggle?: (enabled: boolean) => void;\n  /** 🎯 목적: 전체 단어 일치 토글 */\n  onWholeWordToggle?: (enabled: boolean) => void;\n  /** 🎯 목적: 정규식 사용 토글 */\n  onRegexToggle?: (enabled: boolean) => void;\n  /** 🎯 목적: 플레이스홀더 텍스트 */\n  placeholder?: string;\n  /** 🎯 목적: 검색 결과 정보 */\n  resultsInfo?: string;\n  /** 🎯 목적: 검색 결과 정보 텍스트 커스텀 클래스명 */\n  resultsInfoClassName?: string;\n  /** 🎯 목적: 대소문자 구분 활성화 상태 */\n  caseSensitive?: boolean;\n  /** 🎯 목적: 전체 단어 일치 활성화 상태 */\n  wholeWord?: boolean;\n  /** 🎯 목적: 정규식 사용 활성화 상태 */\n  useRegex?: boolean;\n  /** 🎯 목적: 비활성화 상태 */\n  disabled?: boolean;\n  /** 🎯 목적: 커스텀 클래스명 */\n  className?: string;\n}\n\n/**\n * 🎯 목적: 코드 에디터형 검색 툴바 컴포넌트\n *\n * ✨ 특징:\n * - 검색 입력 필드 (히스토리 힌트 포함)\n * - 대소문자 구분 및 전체 단어 일치 토글\n * - 이전/다음 검색 결과 네비게이션\n * - 검색 결과 정보 표시\n * - 검색 툴바 닫기 기능\n * - 다크 테마 지원\n */\nexport function SearchToolbar({\n  searchValue = \"\",\n  onSearchChange,\n  onSearch,\n  onPrevious,\n  onNext,\n  onClose,\n  onCaseSensitiveToggle,\n  onWholeWordToggle,\n  onRegexToggle,\n  placeholder = \"Find (↑↓ for history)\",\n  resultsInfo = \"No results\",\n  resultsInfoClassName = \"\",\n  caseSensitive = false,\n  wholeWord = false,\n  useRegex = false,\n  disabled = false,\n  className = \"\",\n}: SearchToolbarProps) {\n  const [searchInput, setSearchInput] = React.useState(searchValue);\n\n  /**\n   * 🎯 목적: 검색어 입력 처리\n   */\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSearchInput(value);\n    onSearchChange?.(value);\n  };\n\n  /**\n   * 🎯 목적: 검색 실행 처리 (Enter 키)\n   */\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      onSearch?.(searchInput);\n    }\n  };\n\n  /**\n   * 🎯 목적: 대소문자 구분 토글 처리\n   */\n  const handleCaseSensitiveClick = () => {\n    onCaseSensitiveToggle?.(!caseSensitive);\n  };\n\n  /**\n   * 🎯 목적: 전체 단어 일치 토글 처리\n   */\n  const handleWholeWordClick = () => {\n    onWholeWordToggle?.(!wholeWord);\n  };\n\n  /**\n   * 🎯 목적: 정규식 사용 토글 처리\n   */\n  const handleRegexClick = () => {\n    onRegexToggle?.(!useRegex);\n  };\n\n  React.useEffect(() => {\n    setSearchInput(searchValue);\n  }, [searchValue]);\n\n  return (\n    <div\n      className={`bg-background flex items-center gap-2 rounded-r-lg border py-1.5 pr-2 pl-2.5 shadow-sm ${disabled ? \"opacity-50\" : \"\"} ${className}`}\n    >\n      {/* 검색 입력 그룹 */}\n      <InputGroup style={{ width: \"var(--input-group-width, 300px)\" }}>\n        <InputGroupInput\n          value={searchInput}\n          onChange={handleSearchInputChange}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          disabled={disabled}\n          className=\"text-sm\"\n        />\n        <InputGroupAddon align=\"inline-end\" className=\"gap-0.5\">\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <InputGroupButton\n                variant=\"ghost\"\n                size=\"icon-xs\"\n                onClick={handleCaseSensitiveClick}\n                disabled={disabled}\n                className={`${caseSensitive ? \"bg-primary text-primary-foreground\" : \"text-muted-foreground hover:text-foreground\"}`}\n                aria-label=\"Match Case\"\n              >\n                <CaseSensitive className=\"h-4 w-4\" />\n              </InputGroupButton>\n            </TooltipTrigger>\n            <TooltipContent side=\"top\" sideOffset={5}>\n              <p>Match Case</p>\n            </TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <InputGroupButton\n                variant=\"ghost\"\n                size=\"icon-xs\"\n                onClick={handleWholeWordClick}\n                disabled={disabled}\n                className={`${wholeWord ? \"bg-primary text-primary-foreground\" : \"text-muted-foreground hover:text-foreground\"}`}\n                aria-label=\"Match Whole Word\"\n              >\n                <WholeWord className=\"h-4 w-4\" />\n              </InputGroupButton>\n            </TooltipTrigger>\n            <TooltipContent side=\"top\" sideOffset={5}>\n              <p>Match Whole Word</p>\n            </TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <InputGroupButton\n                variant=\"ghost\"\n                size=\"icon-xs\"\n                onClick={handleRegexClick}\n                disabled={disabled}\n                className={`${useRegex ? \"bg-primary text-primary-foreground\" : \"text-muted-foreground hover:text-foreground\"}`}\n                aria-label=\"Use Regular Expression\"\n              >\n                <Regex className=\"h-4 w-4\" />\n              </InputGroupButton>\n            </TooltipTrigger>\n            <TooltipContent side=\"top\" sideOffset={5}>\n              <p>Use Regular Expression</p>\n            </TooltipContent>\n          </Tooltip>\n        </InputGroupAddon>\n      </InputGroup>\n\n      {/* 검색 결과 정보 */}\n      <div\n        className={`w-[74px] text-sm whitespace-nowrap ${resultsInfoClassName || \"text-muted-foreground\"}`}\n      >\n        {resultsInfo}\n      </div>\n\n      {/* 네비게이션 버튼들 */}\n      <div className=\"flex items-center\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onPrevious}\n          disabled={disabled}\n          className=\"h-8 w-8 p-0 opacity-50 hover:opacity-100\"\n        >\n          <ArrowUp className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onNext}\n          disabled={disabled}\n          className=\"h-8 w-8 p-0 opacity-50 hover:opacity-100\"\n        >\n          <ArrowDown className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onClose}\n          disabled={disabled}\n          className=\"h-8 w-8 p-0\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/templates/contents/search-toolbar.stories.tsx",
      "content": "import React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SearchToolbar } from \"./search-toolbar\";\n\n/**\n * SearchToolbar 컴포넌트 - 코드 에디터형 검색 툴바\n *\n * 코드 에디터에서 사용되는 검색 툴바 컴포넌트를 제공합니다.\n * 검색 입력 필드, 대소문자/전체단어 토글, 네비게이션 버튼을 포함합니다.\n *\n * 🎯 목적: 코드나 텍스트에서 효율적인 검색 및 네비게이션\n *\n */\nconst meta: Meta<typeof SearchToolbar> = {\n  title: \"templates/Contents/SearchToolbar\",\n  component: SearchToolbar,\n  parameters: {\n    layout: \"centered\",\n    docs: {\n      description: {\n        component: `\n코드 에디터에서 사용되는 SearchToolbar 컴포넌트입니다. 검색 입력과 네비게이션 기능을 제공합니다.\n\n\n        `,\n      },\n    },\n  },\n  tags: [\"autodocs\"],\n  argTypes: {\n    searchValue: {\n      control: \"text\",\n      description: \"검색어 값\",\n    },\n    placeholder: {\n      control: \"text\",\n      description: \"플레이스홀더 텍스트\",\n    },\n    resultsInfo: {\n      control: \"text\",\n      description: \"검색 결과 정보\",\n    },\n    caseSensitive: {\n      control: \"boolean\",\n      description: \"대소문자 구분 활성화\",\n    },\n    wholeWord: {\n      control: \"boolean\",\n      description: \"전체 단어 일치 활성화\",\n    },\n    disabled: {\n      control: \"boolean\",\n      description: \"비활성화 상태\",\n    },\n  },\n} satisfies Meta<typeof SearchToolbar>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 🎯 목적: SearchToolbar를 Resizable로 감싸는 래퍼 컴포넌트\n */\ninterface ResizableSearchToolbarProps {\n  children: React.ReactNode;\n  defaultWidth?: number;\n}\n\nconst ResizableSearchToolbar: React.FC<ResizableSearchToolbarProps> = ({\n  children,\n}) => {\n  const [toolbarWidth, setToolbarWidth] = React.useState(500);\n\n  return (\n    <div\n      className=\"relative inline-block\"\n      style={{ width: `${toolbarWidth}px` }}\n    >\n      {/* 좌측 드래그 핸들 */}\n      <div\n        className=\"bg-border hover:bg-primary/50 absolute top-0 left-0 h-full w-1 cursor-ew-resize transition-colors\"\n        onMouseDown={(e) => {\n          e.preventDefault();\n          const startX = e.clientX;\n          const startWidth = toolbarWidth;\n\n          const handleMouseMove = (e: MouseEvent) => {\n            const deltaX = startX - e.clientX;\n            const newWidth = Math.max(500, startWidth + deltaX);\n            setToolbarWidth(newWidth);\n          };\n\n          const handleMouseUp = () => {\n            document.removeEventListener(\"mousemove\", handleMouseMove);\n            document.removeEventListener(\"mouseup\", handleMouseUp);\n          };\n\n          document.addEventListener(\"mousemove\", handleMouseMove);\n          document.addEventListener(\"mouseup\", handleMouseUp);\n        }}\n      />\n\n      {/* SearchToolbar를 감싸는 div에 동적 width 적용 */}\n      <div\n        style={\n          {\n            \"--input-group-width\": `${Math.max(300, toolbarWidth - 200)}px`,\n          } as React.CSSProperties\n        }\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\n/**\n * 기본 SearchToolbar - 기본 검색 툴바 레이아웃\n */\nexport const Default: Story = {\n  render: () => {\n    const [caseSensitive, setCaseSensitive] = React.useState(false);\n    const [wholeWord, setWholeWord] = React.useState(false);\n    const [useRegex, setUseRegex] = React.useState(false);\n\n    return (\n      <TooltipProvider delayDuration={300}>\n        <div className=\"flex w-full justify-center\">\n          <ResizableSearchToolbar>\n            <SearchToolbar\n              caseSensitive={caseSensitive}\n              wholeWord={wholeWord}\n              useRegex={useRegex}\n              onSearchChange={(value) => console.log(\"Search changed:\", value)}\n              onSearch={(value) => console.log(\"Search executed:\", value)}\n              onPrevious={() => console.log(\"Previous clicked\")}\n              onNext={() => console.log(\"Next clicked\")}\n              onClose={() => console.log(\"Close clicked\")}\n              onCaseSensitiveToggle={(enabled) => {\n                setCaseSensitive(enabled);\n                console.log(\"Case sensitive toggle:\", enabled);\n              }}\n              onWholeWordToggle={(enabled) => {\n                setWholeWord(enabled);\n                console.log(\"Whole word toggle:\", enabled);\n              }}\n              onRegexToggle={(enabled) => {\n                setUseRegex(enabled);\n                console.log(\"Regex toggle:\", enabled);\n              }}\n            />\n          </ResizableSearchToolbar>\n        </div>\n      </TooltipProvider>\n    );\n  },\n};\n\n/**\n * 검색어가 입력된 상태\n */\nexport const WithSearchValue: Story = {\n  render: () => {\n    const [caseSensitive, setCaseSensitive] = React.useState(false);\n    const [wholeWord, setWholeWord] = React.useState(false);\n    const [useRegex, setUseRegex] = React.useState(false);\n\n    return (\n      <TooltipProvider delayDuration={300}>\n        <div className=\"flex w-full justify-center\">\n          <ResizableSearchToolbar>\n            <SearchToolbar\n              searchValue=\"function\"\n              resultsInfo=\"3 of 12\"\n              caseSensitive={caseSensitive}\n              wholeWord={wholeWord}\n              useRegex={useRegex}\n              onSearchChange={(value) => console.log(\"Search changed:\", value)}\n              onSearch={(value) => console.log(\"Search executed:\", value)}\n              onPrevious={() => console.log(\"Previous clicked\")}\n              onNext={() => console.log(\"Next clicked\")}\n              onClose={() => console.log(\"Close clicked\")}\n              onCaseSensitiveToggle={(enabled) => {\n                setCaseSensitive(enabled);\n                console.log(\"Case sensitive toggle:\", enabled);\n              }}\n              onWholeWordToggle={(enabled) => {\n                setWholeWord(enabled);\n                console.log(\"Whole word toggle:\", enabled);\n              }}\n              onRegexToggle={(enabled) => {\n                setUseRegex(enabled);\n                console.log(\"Regex toggle:\", enabled);\n              }}\n            />\n          </ResizableSearchToolbar>\n        </div>\n      </TooltipProvider>\n    );\n  },\n};\n\n/**\n * 검색 결과가 없는 상태\n */\nexport const NoResults: Story = {\n  render: () => (\n    <TooltipProvider delayDuration={300}>\n      <div className=\"flex w-full justify-center\">\n        <ResizableSearchToolbar>\n          <SearchToolbar\n            searchValue=\"xyz123\"\n            resultsInfo=\"No results\"\n            resultsInfoClassName=\"text-destructive\"\n            onSearchChange={(value) => console.log(\"Search changed:\", value)}\n            onSearch={(value) => console.log(\"Search executed:\", value)}\n            onPrevious={() => console.log(\"Previous clicked\")}\n            onNext={() => console.log(\"Next clicked\")}\n            onClose={() => console.log(\"Close clicked\")}\n            onCaseSensitiveToggle={(enabled) =>\n              console.log(\"Case sensitive toggle:\", enabled)\n            }\n            onWholeWordToggle={(enabled) =>\n              console.log(\"Whole word toggle:\", enabled)\n            }\n            onRegexToggle={(enabled) => console.log(\"Regex toggle:\", enabled)}\n          />\n        </ResizableSearchToolbar>\n      </div>\n    </TooltipProvider>\n  ),\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "templates",
    "storybook",
    "search",
    "contents",
    "toolbar"
  ]
}