{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resizable-story",
  "type": "registry:component",
  "title": "Resizable Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating resizable component usage and variants",
  "registryDependencies": [
    "resizable"
  ],
  "files": [
    {
      "path": "src/registry/atoms/resizable-story/resizable.stories.tsx",
      "content": "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\";\nimport { expect, within } from \"storybook/test\";\n\n/**\n * Accessible resizable panel groups and layouts with keyboard support.\n */\nconst meta = {\n  title: \"ui/Resizable\",\n  component: ResizablePanelGroup,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  argTypes: {\n    direction: {\n      control: \"radio\",\n      options: [\"horizontal\", \"vertical\"],\n      description: \"The direction of the resizable panel group\",\n    },\n  },\n  args: {\n    direction: \"horizontal\",\n    className: \"max-w-md rounded-lg border md:min-w-[450px]\",\n  },\n  render: (args) => (\n    <ResizablePanelGroup {...args}>\n      <ResizablePanel defaultSize={50}>\n        <div className=\"flex h-[200px] items-center justify-center p-6\">\n          <span className=\"font-semibold\">One</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={50}>\n        <ResizablePanelGroup direction=\"vertical\">\n          <ResizablePanel defaultSize={25}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Two</span>\n            </div>\n          </ResizablePanel>\n          <ResizableHandle />\n          <ResizablePanel defaultSize={75}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Three</span>\n            </div>\n          </ResizablePanel>\n        </ResizablePanelGroup>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  ),\n} satisfies Meta<typeof ResizablePanelGroup>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the resizable panel group.\n */\nexport const Default: Story = {};\n\n/**\n * Vertical layout for resizable panels.\n */\nexport const Vertical: Story = {\n  render: () => (\n    <ResizablePanelGroup\n      direction=\"vertical\"\n      className=\"min-h-[200px] max-w-md rounded-lg border md:min-w-[450px]\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Header</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  ),\n};\n\n/**\n * Resizable handle with visible handle.\n */\nexport const WithHandle: Story = {\n  render: () => (\n    <ResizablePanelGroup\n      direction=\"horizontal\"\n      className=\"min-h-[200px] max-w-md rounded-lg border md:min-w-[450px]\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Sidebar</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  ),\n};\n\nexport function ResizableDemo() {\n  return (\n    <ResizablePanelGroup\n      direction=\"horizontal\"\n      className=\"max-w-md rounded-lg border md:min-w-[450px]\"\n    >\n      <ResizablePanel defaultSize={50}>\n        <div className=\"flex h-[200px] items-center justify-center p-6\">\n          <span className=\"font-semibold\">One</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={50}>\n        <ResizablePanelGroup direction=\"vertical\">\n          <ResizablePanel defaultSize={25}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Two</span>\n            </div>\n          </ResizablePanel>\n          <ResizableHandle />\n          <ResizablePanel defaultSize={75}>\n            <div className=\"flex h-full items-center justify-center p-6\">\n              <span className=\"font-semibold\">Three</span>\n            </div>\n          </ResizablePanel>\n        </ResizablePanelGroup>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  );\n}\n\nexport const ShouldRenderResizablePanels: Story = {\n  name: \"when resizable panels are rendered, should display all panels and handles\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [leftSize, setLeftSize] = React.useState(50);\n    const [rightSize, setRightSize] = React.useState(50);\n\n    return (\n      <div className=\"w-full\">\n        <ResizablePanelGroup\n          direction=\"horizontal\"\n          className=\"max-w-md rounded-lg border md:min-w-[450px]\"\n          data-testid=\"resizable-group\"\n        >\n          <ResizablePanel\n            defaultSize={leftSize}\n            onResize={(size) => setLeftSize(size)}\n            data-testid=\"left-panel\"\n          >\n            <div className=\"flex h-[200px] items-center justify-center p-6\">\n              <span className=\"font-semibold\" data-testid=\"left-content\">\n                Left Panel\n              </span>\n            </div>\n          </ResizablePanel>\n          <ResizableHandle withHandle data-testid=\"resize-handle\" />\n          <ResizablePanel\n            defaultSize={rightSize}\n            onResize={(size) => setRightSize(size)}\n            data-testid=\"right-panel\"\n          >\n            <div className=\"flex h-[200px] items-center justify-center p-6\">\n              <span className=\"font-semibold\" data-testid=\"right-content\">\n                Right Panel\n              </span>\n            </div>\n          </ResizablePanel>\n        </ResizablePanelGroup>\n        <div\n          className=\"text-muted-foreground mt-4 text-center text-sm\"\n          data-testid=\"size-display\"\n        >\n          Left: {Math.round(leftSize)}% | Right: {Math.round(rightSize)}%\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Resizable 컴포넌트가 패널과 핸들을 올바르게 렌더링하고 초기 크기를 표시하는지 확인\n\n    // Resizable Group 존재 확인\n    const resizableGroup = canvas.getByTestId(\"resizable-group\");\n    await expect(resizableGroup).toBeInTheDocument();\n\n    // 왼쪽 패널 확인\n    const leftPanel = canvas.getByTestId(\"left-panel\");\n    await expect(leftPanel).toBeInTheDocument();\n    const leftContent = canvas.getByTestId(\"left-content\");\n    await expect(leftContent).toHaveTextContent(\"Left Panel\");\n\n    // 오른쪽 패널 확인\n    const rightPanel = canvas.getByTestId(\"right-panel\");\n    await expect(rightPanel).toBeInTheDocument();\n    const rightContent = canvas.getByTestId(\"right-content\");\n    await expect(rightContent).toHaveTextContent(\"Right Panel\");\n\n    // Resize Handle 확인\n    const resizeHandle = canvas.getByTestId(\"resize-handle\");\n    await expect(resizeHandle).toBeInTheDocument();\n\n    // 초기 크기 표시 확인 (50% / 50%)\n    const sizeDisplay = canvas.getByTestId(\"size-display\");\n    await expect(sizeDisplay).toHaveTextContent(/Left: 50% \\| Right: 50%/);\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "resizable",
    "layout"
  ]
}