{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "month-year-selector-story",
  "type": "registry:component",
  "title": "Month Year Selector Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating month and year selection component for quick date navigation",
  "dependencies": [
    "date-fns"
  ],
  "registryDependencies": [
    "calendar",
    "select"
  ],
  "files": [
    {
      "path": "src/registry/atoms/month-year-selector-story/month-year-selector.stories.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\n\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst meta: Meta = {\n  title: \"ui/Calendar/Blocks/Month and Year Selector\",\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: () => {\n    const [dropdown, setDropdown] =\n      React.useState<React.ComponentProps<typeof Calendar>[\"captionLayout\"]>(\n        \"dropdown\",\n      );\n    const [date, setDate] = React.useState<Date | undefined>(\n      new Date(2025, 5, 12),\n    );\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Calendar\n          mode=\"single\"\n          defaultMonth={date}\n          selected={date}\n          onSelect={setDate}\n          captionLayout={dropdown}\n          className=\"rounded-lg border shadow-sm\"\n        />\n        <div className=\"flex flex-col gap-3\">\n          <Label htmlFor=\"dropdown\" className=\"px-1\">\n            Dropdown\n          </Label>\n          <Select\n            value={dropdown}\n            onValueChange={(value) =>\n              setDropdown(\n                value as React.ComponentProps<typeof Calendar>[\"captionLayout\"],\n              )\n            }\n          >\n            <SelectTrigger\n              id=\"dropdown\"\n              size=\"sm\"\n              className=\"bg-background w-full\"\n            >\n              <SelectValue placeholder=\"Dropdown\" />\n            </SelectTrigger>\n            <SelectContent align=\"center\">\n              <SelectItem value=\"dropdown\">Month and Year</SelectItem>\n              <SelectItem value=\"dropdown-months\">Month Only</SelectItem>\n              <SelectItem value=\"dropdown-years\">Year Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const ShouldChangeDropdownMode: Story = {\n  name: \"when changing dropdown mode, should update calendar display\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [dropdown, setDropdown] =\n      React.useState<React.ComponentProps<typeof Calendar>[\"captionLayout\"]>(\n        \"dropdown\",\n      );\n    const [date, setDate] = React.useState<Date | undefined>(\n      new Date(2025, 5, 12),\n    );\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Calendar\n          mode=\"single\"\n          defaultMonth={date}\n          selected={date}\n          onSelect={setDate}\n          captionLayout={dropdown}\n          className=\"rounded-lg border shadow-sm\"\n        />\n        <div className=\"flex flex-col gap-3\">\n          <Label htmlFor=\"dropdown\" className=\"px-1\">\n            Dropdown\n          </Label>\n          <Select\n            value={dropdown}\n            onValueChange={(value) =>\n              setDropdown(\n                value as React.ComponentProps<typeof Calendar>[\"captionLayout\"],\n              )\n            }\n          >\n            <SelectTrigger\n              id=\"dropdown\"\n              size=\"sm\"\n              className=\"bg-background w-full\"\n              data-testid=\"dropdown-trigger\"\n            >\n              <SelectValue placeholder=\"Dropdown\" />\n            </SelectTrigger>\n            <SelectContent align=\"center\">\n              <SelectItem value=\"dropdown\">Month and Year</SelectItem>\n              <SelectItem value=\"dropdown-months\">Month Only</SelectItem>\n              <SelectItem value=\"dropdown-years\">Year Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // üéØ Î™©Ï†Å: Dropdown Î™®Îìú Î≥ÄÍ≤Ω Ïãú CalendarÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏóÖÎç∞Ïù¥Ìä∏ÎêòÎäîÏßÄ ÌôïÏù∏\n    const dropdownTrigger = canvas.getByTestId(\"dropdown-trigger\");\n    await expect(dropdownTrigger).toBeInTheDocument();\n\n    // Dropdown Ïó¥Í∏∞\n    await userEvent.click(dropdownTrigger);\n\n    await waitFor(\n      () => {\n        // \"Month Only\" ÏòµÏÖò ÏÑ†ÌÉù\n        const monthOnlyOption = canvas.getByRole(\"option\", {\n          name: /month only/i,\n        });\n        expect(monthOnlyOption).toBeInTheDocument();\n      },\n      { timeout: 2000 },\n    );\n\n    // \"Month Only\" ÏÑ†ÌÉù\n    const monthOnlyOption = canvas.getByRole(\"option\", { name: /month only/i });\n    await userEvent.click(monthOnlyOption);\n\n    await waitFor(\n      () => {\n        // DropdownÏù¥ \"Month Only\"Î°ú Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏\n        expect(dropdownTrigger).toHaveTextContent(/month only/i);\n      },\n      { timeout: 2000 },\n    );\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "calendar",
    "selector"
  ]
}