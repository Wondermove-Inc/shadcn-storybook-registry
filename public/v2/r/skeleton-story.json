{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "skeleton-story",
  "type": "registry:component",
  "title": "Skeleton Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating skeleton component usage and variants",
  "registryDependencies": [
    "skeleton"
  ],
  "files": [
    {
      "path": "src/registry/atoms/skeleton-story/skeleton.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport * as React from \"react\";\nimport { expect, waitFor, within } from \"storybook/test\";\n\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\n// Default example from official docs\nexport function SkeletonDemo() {\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <Skeleton className=\"h-12 w-12 rounded-full\" />\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-[250px]\" />\n        <Skeleton className=\"h-4 w-[200px]\" />\n      </div>\n    </div>\n  );\n}\n\n// Card example from official docs\nexport function SkeletonCard() {\n  return (\n    <div className=\"flex flex-col space-y-3\">\n      <Skeleton className=\"h-[125px] w-[250px] rounded-xl\" />\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-[250px]\" />\n        <Skeleton className=\"h-4 w-[200px]\" />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Use to show a placeholder while content is loading.\n */\nconst meta = {\n  title: \"ui/Skeleton\",\n  component: Skeleton,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|SkeletonCard/,\n  argTypes: {\n    className: {\n      control: \"text\",\n      description:\n        \"Additional CSS classes for styling (e.g., 'h-12 w-12 rounded-full')\",\n    },\n  },\n  args: {\n    className: \"h-12 w-[250px]\",\n  },\n  render: (args) => <Skeleton className={args.className} />,\n} satisfies Meta<typeof Skeleton>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the skeleton.\n */\nexport const Default: Story = {};\n\n/**\n * Skeleton as a card placeholder.\n */\nexport const Card: Story = {\n  render: () => <SkeletonCard />,\n};\n\n/**\n * Skeleton 로딩 상태를 테스트합니다.\n */\nexport const ShouldShowLoadingState: Story = {\n  name: \"when loading, should display skeleton, then show actual content\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [loading, setLoading] = React.useState(true);\n\n    React.useEffect(() => {\n      const timer = setTimeout(() => setLoading(false), 2000);\n      return () => clearTimeout(timer);\n    }, []);\n\n    return (\n      <div className=\"flex items-center space-x-4\">\n        {loading ? (\n          <>\n            <Skeleton\n              className=\"h-12 w-12 rounded-full\"\n              data-testid=\"skeleton-avatar\"\n            />\n            <div className=\"space-y-2\">\n              <Skeleton\n                className=\"h-4 w-[250px]\"\n                data-testid=\"skeleton-line1\"\n              />\n              <Skeleton\n                className=\"h-4 w-[200px]\"\n                data-testid=\"skeleton-line2\"\n              />\n            </div>\n          </>\n        ) : (\n          <>\n            <div\n              className=\"flex h-12 w-12 items-center justify-center rounded-full bg-gray-200 dark:bg-gray-700\"\n              data-testid=\"actual-avatar\"\n            >\n              👤\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"h-4 w-[250px]\" data-testid=\"actual-line1\">\n                John Doe\n              </div>\n              <div className=\"h-4 w-[200px]\" data-testid=\"actual-line2\">\n                Software Engineer\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: 로딩 중일 때 Skeleton이 표시되고, 로딩 완료 후 실제 콘텐츠가 표시되는지 확인\n\n    // 초기 로딩 상태 확인 (Skeleton 표시)\n    const skeletonAvatar = canvas.getByTestId(\"skeleton-avatar\");\n    await expect(skeletonAvatar).toBeInTheDocument();\n\n    const skeletonLine1 = canvas.getByTestId(\"skeleton-line1\");\n    await expect(skeletonLine1).toBeInTheDocument();\n\n    const skeletonLine2 = canvas.getByTestId(\"skeleton-line2\");\n    await expect(skeletonLine2).toBeInTheDocument();\n\n    // 로딩 완료 대기 (2초 후 실제 콘텐츠 표시)\n    await waitFor(\n      async () => {\n        const actualAvatar = await canvas.findByTestId(\"actual-avatar\");\n        await expect(actualAvatar).toBeInTheDocument();\n\n        const actualLine1 = canvas.getByTestId(\"actual-line1\");\n        await expect(actualLine1).toHaveTextContent(\"John Doe\");\n\n        const actualLine2 = canvas.getByTestId(\"actual-line2\");\n        await expect(actualLine2).toHaveTextContent(\"Software Engineer\");\n      },\n      { timeout: 3000 },\n    );\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "skeleton",
    "loading"
  ]
}