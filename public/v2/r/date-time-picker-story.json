{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-picker-story",
  "type": "registry:component",
  "title": "Date Time Picker Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating combined date and time picker with hour/minute selection",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "calendar",
    "popover",
    "button",
    "select"
  ],
  "files": [
    {
      "path": "src/registry/atoms/date-time-picker-story/date-time-picker.stories.tsx",
      "content": "\"use client\";\n\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { ChevronDownIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\n\nconst meta: Meta = {\n  title: \"ui/Calendar/Blocks/Date and Time Picker\",\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n    const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n    return (\n      <div className=\"flex gap-4\">\n        <div className=\"flex flex-col gap-3\">\n          <Label htmlFor=\"date-picker\" className=\"px-1\">\n            Date\n          </Label>\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                id=\"date-picker\"\n                className=\"w-32 justify-between font-normal\"\n              >\n                {date ? date.toLocaleDateString() : \"Select date\"}\n                <ChevronDownIcon />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent\n              className=\"w-auto overflow-hidden p-0\"\n              align=\"start\"\n            >\n              <Calendar\n                mode=\"single\"\n                selected={date}\n                captionLayout=\"dropdown\"\n                onSelect={(date) => {\n                  setDate(date);\n                  setOpen(false);\n                }}\n              />\n            </PopoverContent>\n          </Popover>\n        </div>\n        <div className=\"flex flex-col gap-3\">\n          <Label htmlFor=\"time-picker\" className=\"px-1\">\n            Time\n          </Label>\n          <Input\n            type=\"time\"\n            id=\"time-picker\"\n            step=\"1\"\n            defaultValue=\"10:30:00\"\n            className=\"bg-background appearance-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\"\n          />\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const ShouldSelectDateAndTime: Story = {\n  name: \"when user selects date and enters time, should display both values\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n    const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n    return (\n      <div className=\"flex gap-4\">\n        <div className=\"flex flex-col gap-3\">\n          <Label htmlFor=\"date-picker\" className=\"px-1\">\n            Date\n          </Label>\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                id=\"date-picker\"\n                className=\"w-32 justify-between font-normal\"\n              >\n                {date ? date.toLocaleDateString() : \"Select date\"}\n                <ChevronDownIcon />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent\n              className=\"w-auto overflow-hidden p-0\"\n              align=\"start\"\n            >\n              <Calendar\n                mode=\"single\"\n                selected={date}\n                captionLayout=\"dropdown\"\n                onSelect={(date) => {\n                  setDate(date);\n                  setOpen(false);\n                }}\n              />\n            </PopoverContent>\n          </Popover>\n        </div>\n        <div className=\"flex flex-col gap-3\">\n          <Label htmlFor=\"time-picker\" className=\"px-1\">\n            Time\n          </Label>\n          <Input\n            type=\"time\"\n            id=\"time-picker\"\n            step=\"1\"\n            defaultValue=\"10:30:00\"\n            className=\"bg-background appearance-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\"\n          />\n        </div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: DateTime Picker가 날짜와 시간을 모두 선택할 수 있는지 확인\n    const dateButton = canvas.getByRole(\"button\", { name: /select date/i });\n    await expect(dateButton).toBeInTheDocument();\n\n    // 날짜 선택: 트리거 버튼 클릭\n    await userEvent.click(dateButton);\n\n    // Calendar가 열렸는지 확인\n    await waitFor(async () => {\n      const dateButtons = await canvas.findAllByRole(\"button\");\n      await expect(dateButtons.length).toBeGreaterThan(1);\n    });\n\n    // 날짜 버튼 찾기 (15일 선택)\n    const dateButtons = canvas.getAllByRole(\"button\");\n    const date15Button = dateButtons.find(\n      (button) => button.textContent?.trim() === \"15\",\n    );\n\n    if (date15Button) {\n      // 날짜 클릭\n      await userEvent.click(date15Button);\n\n      // 날짜가 선택되었는지 확인 (버튼 텍스트 변경)\n      await waitFor(() => {\n        expect(dateButton.textContent).not.toMatch(/select date/i);\n      });\n    }\n\n    // 시간 입력: time input 찾기\n    const timeInput = canvas.getByRole(\"textbox\", { name: /time/i });\n    await expect(timeInput).toBeInTheDocument();\n\n    // 시간 값 확인 (기본값이 설정되어 있음)\n    await expect(timeInput).toHaveValue(\"10:30:00\");\n\n    // 시간 변경\n    await userEvent.clear(timeInput);\n    await userEvent.type(timeInput, \"14:30:00\");\n\n    // 변경된 시간 값 확인\n    await waitFor(() => {\n      expect(timeInput).toHaveValue(\"14:30:00\");\n    });\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "calendar",
    "date-picker",
    "time-picker"
  ]
}