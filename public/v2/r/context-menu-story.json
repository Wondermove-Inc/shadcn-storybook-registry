{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "context-menu-story",
  "type": "registry:component",
  "title": "Context Menu Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating context menu component usage and variants",
  "registryDependencies": [
    "context-menu"
  ],
  "files": [
    {
      "path": "src/registry/atoms/context-menu-story/context-menu.stories.tsx",
      "content": "\"use client\";\n\nimport {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\n\n/**\n * Displays a menu to the user ‚Äî such as a set of actions or functions ‚Äî\n * triggered by a button.\n */\nconst meta = {\n  title: \"ui/ContextMenu\",\n  component: ContextMenu,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => (\n    <ContextMenu>\n      <ContextMenuTrigger className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\">\n        Right click here\n      </ContextMenuTrigger>\n      <ContextMenuContent className=\"w-52\">\n        <ContextMenuItem inset>\n          Back\n          <ContextMenuShortcut>‚åò[</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset disabled>\n          Forward\n          <ContextMenuShortcut>‚åò]</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset>\n          Reload\n          <ContextMenuShortcut>‚åòR</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger>\n          <ContextMenuSubContent className=\"w-44\">\n            <ContextMenuItem>Save Page...</ContextMenuItem>\n            <ContextMenuItem>Create Shortcut...</ContextMenuItem>\n            <ContextMenuItem>Name Window...</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem>Developer Tools</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem variant=\"destructive\">Delete</ContextMenuItem>\n          </ContextMenuSubContent>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem checked>\n          Show Bookmarks\n        </ContextMenuCheckboxItem>\n        <ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem>\n        <ContextMenuSeparator />\n        <ContextMenuRadioGroup value=\"pedro\">\n          <ContextMenuLabel inset>People</ContextMenuLabel>\n          <ContextMenuRadioItem value=\"pedro\">\n            Pedro Duarte\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"colm\">Colm Tuite</ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenu>\n  ),\n} satisfies Meta<typeof ContextMenu>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the context menu with all features.\n */\nexport const Default: Story = {};\n\nexport const ShouldOpenContextMenu: Story = {\n  name: \"when right click on trigger, should open context menu\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // üéØ Î™©Ï†Å: Context MenuÍ∞Ä Ïö∞ÌÅ¥Î¶≠ÏúºÎ°ú Ïó¥Î¶¨Í≥†, Î©îÎâ¥ ÏïÑÏù¥ÌÖú ÏÑ†ÌÉùÏù¥ Í∞ÄÎä•ÌïúÏßÄ ÌôïÏù∏\n    const trigger = canvas.getByText(/right click here/i);\n    await expect(trigger).toBeInTheDocument();\n\n    // Ìä∏Î¶¨Í±∞Ïóê Ïö∞ÌÅ¥Î¶≠ÌïòÏó¨ Ïª®ÌÖçÏä§Ìä∏ Î©îÎâ¥ Ïó¥Í∏∞\n    await userEvent.pointer([\n      { target: trigger },\n      { keys: \"[MouseRight]\", target: trigger },\n    ]);\n\n    // Î©îÎâ¥Í∞Ä Ïó¥Î†∏ÎäîÏßÄ ÌôïÏù∏ (Î©îÎâ¥ ÏïÑÏù¥ÌÖú ÌôïÏù∏)\n    await waitFor(async () => {\n      const backItem = await canvas.findByRole(\"menuitem\", {\n        name: /back/i,\n      });\n      await expect(backItem).toBeInTheDocument();\n    });\n\n    // Îã§Î•∏ Î©îÎâ¥ ÏïÑÏù¥ÌÖúÎì§ÎèÑ ÌôïÏù∏\n    const reloadItem = canvas.getByRole(\"menuitem\", { name: /reload/i });\n    await expect(reloadItem).toBeInTheDocument();\n\n    // Î©îÎâ¥ ÏïÑÏù¥ÌÖú ÌÅ¥Î¶≠\n    await userEvent.click(reloadItem);\n  },\n};\n\nexport const ShouldOpenSubmenuAndToggleItems: Story = {\n  name: \"when hovering submenu trigger, should open submenu and toggle checkbox items\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <ContextMenu>\n      <ContextMenuTrigger\n        className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\"\n        data-testid=\"context-trigger\"\n      >\n        Right click here\n      </ContextMenuTrigger>\n      <ContextMenuContent className=\"w-52\">\n        <ContextMenuItem data-testid=\"back-item\">Back</ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger data-testid=\"submenu-trigger\">\n            More Tools\n          </ContextMenuSubTrigger>\n          <ContextMenuSubContent className=\"w-44\">\n            <ContextMenuItem data-testid=\"save-page-item\">\n              Save Page...\n            </ContextMenuItem>\n            <ContextMenuItem data-testid=\"developer-tools-item\">\n              Developer Tools\n            </ContextMenuItem>\n          </ContextMenuSubContent>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem\n          data-testid=\"bookmarks-checkbox\"\n          defaultChecked\n        >\n          Show Bookmarks\n        </ContextMenuCheckboxItem>\n        <ContextMenuCheckboxItem data-testid=\"urls-checkbox\">\n          Show Full URLs\n        </ContextMenuCheckboxItem>\n        <ContextMenuSeparator />\n        <ContextMenuRadioGroup value=\"pedro\">\n          <ContextMenuLabel>People</ContextMenuLabel>\n          <ContextMenuRadioItem value=\"pedro\" data-testid=\"pedro-radio\">\n            Pedro Duarte\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"colm\" data-testid=\"colm-radio\">\n            Colm Tuite\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenu>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // üéØ Î™©Ï†Å: Context MenuÏùò ÏÑúÎ∏åÎ©îÎâ¥ Ïó¥Í∏∞, Ï≤¥ÌÅ¨Î∞ïÏä§/ÎùºÎîîÏò§ ÏïÑÏù¥ÌÖú ÌÜ†Í∏Ä Í∏∞Îä• ÌôïÏù∏\n\n    // Ìä∏Î¶¨Í±∞ Ïö∞ÌÅ¥Î¶≠ÌïòÏó¨ Ïª®ÌÖçÏä§Ìä∏ Î©îÎâ¥ Ïó¥Í∏∞\n    const trigger = canvas.getByTestId(\"context-trigger\");\n    await expect(trigger).toBeInTheDocument();\n\n    await userEvent.pointer([\n      { target: trigger },\n      { keys: \"[MouseRight]\", target: trigger },\n    ]);\n\n    // Î©îÎâ¥Í∞Ä Ïó¥Î†∏ÎäîÏßÄ ÌôïÏù∏\n    await waitFor(async () => {\n      const backItem = await canvas.findByTestId(\"back-item\");\n      await expect(backItem).toBeInTheDocument();\n    });\n\n    // ÏÑúÎ∏åÎ©îÎâ¥ Ìä∏Î¶¨Í±∞ ÌôïÏù∏\n    const submenuTrigger = canvas.getByTestId(\"submenu-trigger\");\n    await expect(submenuTrigger).toBeInTheDocument();\n\n    // ÏÑúÎ∏åÎ©îÎâ¥ Ìä∏Î¶¨Í±∞Ïóê Ìò∏Î≤ÑÌïòÏó¨ ÏÑúÎ∏åÎ©îÎâ¥ Ïó¥Í∏∞\n    await userEvent.hover(submenuTrigger);\n\n    // ÏÑúÎ∏åÎ©îÎâ¥ ÏïÑÏù¥ÌÖúÏù¥ ÎÇòÌÉÄÎÇòÎäîÏßÄ ÌôïÏù∏\n    await waitFor(async () => {\n      const savePageItem = await canvas.findByTestId(\"save-page-item\");\n      await expect(savePageItem).toBeInTheDocument();\n    });\n\n    // ÏÑúÎ∏åÎ©îÎâ¥ÏóêÏÑú ÎÇòÍ∞ÄÍ∏∞\n    await userEvent.unhover(submenuTrigger);\n\n    // Ï≤¥ÌÅ¨Î∞ïÏä§ ÏïÑÏù¥ÌÖú ÌôïÏù∏\n    const bookmarksCheckbox = canvas.getByTestId(\"bookmarks-checkbox\");\n    await expect(bookmarksCheckbox).toBeInTheDocument();\n    await expect(bookmarksCheckbox).toHaveAttribute(\"data-state\", \"checked\");\n\n    // Ï≤¥ÌÅ¨Î∞ïÏä§ ÌÅ¥Î¶≠ÌïòÏó¨ ÌÜ†Í∏Ä (checked ‚Üí unchecked)\n    await userEvent.click(bookmarksCheckbox);\n    await expect(bookmarksCheckbox).toHaveAttribute(\"data-state\", \"unchecked\");\n\n    // Î©îÎâ¥Î•º Îã§Ïãú Ïó¥Ïñ¥ÏÑú ÎùºÎîîÏò§ ÏïÑÏù¥ÌÖú ÌÖåÏä§Ìä∏\n    await userEvent.pointer([\n      { target: trigger },\n      { keys: \"[MouseRight]\", target: trigger },\n    ]);\n\n    await waitFor(async () => {\n      const pedroRadio = await canvas.findByTestId(\"pedro-radio\");\n      await expect(pedroRadio).toBeInTheDocument();\n    });\n\n    // PedroÍ∞Ä ÏÑ†ÌÉùÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏\n    const pedroRadio = canvas.getByTestId(\"pedro-radio\");\n    await expect(pedroRadio).toHaveAttribute(\"data-state\", \"checked\");\n\n    // Colm ÏÑ†ÌÉù\n    const colmRadio = canvas.getByTestId(\"colm-radio\");\n    await userEvent.click(colmRadio);\n    await expect(colmRadio).toHaveAttribute(\"data-state\", \"checked\");\n  },\n};\n\nexport function ContextMenuDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenuTrigger className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\">\n        Right click here\n      </ContextMenuTrigger>\n      <ContextMenuContent className=\"w-52\">\n        <ContextMenuItem inset>\n          Back\n          <ContextMenuShortcut>‚åò[</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset disabled>\n          Forward\n          <ContextMenuShortcut>‚åò]</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuItem inset>\n          Reload\n          <ContextMenuShortcut>‚åòR</ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger>\n          <ContextMenuSubContent className=\"w-44\">\n            <ContextMenuItem>Save Page...</ContextMenuItem>\n            <ContextMenuItem>Create Shortcut...</ContextMenuItem>\n            <ContextMenuItem>Name Window...</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem>Developer Tools</ContextMenuItem>\n            <ContextMenuSeparator />\n            <ContextMenuItem variant=\"destructive\">Delete</ContextMenuItem>\n          </ContextMenuSubContent>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem checked>\n          Show Bookmarks\n        </ContextMenuCheckboxItem>\n        <ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem>\n        <ContextMenuSeparator />\n        <ContextMenuRadioGroup value=\"pedro\">\n          <ContextMenuLabel inset>People</ContextMenuLabel>\n          <ContextMenuRadioItem value=\"pedro\">\n            Pedro Duarte\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"colm\">Colm Tuite</ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenu>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "menu",
    "context"
  ]
}