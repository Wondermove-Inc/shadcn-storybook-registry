{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cognito-story",
  "type": "registry:component",
  "title": "Cognito Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "AWS Cognito-style comprehensive authentication template with login, signup, password reset, email verification, and social login flows",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "card",
    "field",
    "input"
  ],
  "files": [
    {
      "path": "src/registry/templates/cognito-story/cognito-template.tsx",
      "content": "import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Field,\n  FieldDescription,\n  FieldGroup,\n  FieldLabel,\n  FieldSeparator,\n} from \"@/components/ui/field\";\nimport { Input } from \"@/components/ui/input\";\nimport { Eye, EyeOff, ArrowLeft, GalleryVerticalEnd } from \"lucide-react\";\n\n/**\n * 🎯 목적: shadcn/ui login-03 블록 원본 (변형 없음)\n */\nexport function LoginForm({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      className={cn(\"flex w-full max-w-sm flex-col gap-6\", className)}\n      {...props}\n    >\n      <a href=\"#\" className=\"flex items-center gap-2 self-center font-medium\">\n        <div className=\"bg-primary text-primary-foreground flex size-6 items-center justify-center rounded-md\">\n          <GalleryVerticalEnd className=\"size-4\" />\n        </div>\n        Acme Inc.\n      </a>\n      <Card>\n        <div\n          className=\"px-0 pb-0 text-center\"\n          style={{ paddingBottom: \"0\", marginBottom: \"0\" }}\n        >\n          <CardDescription>\n            Login with your Apple or Google account\n          </CardDescription>\n        </div>\n        <CardContent>\n          <form>\n            <FieldGroup className=\"gap-6\">\n              <Field>\n                <Button variant=\"outline\" type=\"button\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                    <path\n                      d=\"M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701\"\n                      fill=\"currentColor\"\n                    />\n                  </svg>\n                  Login with Apple\n                </Button>\n                <Button variant=\"outline\" type=\"button\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                    <path\n                      d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\"\n                      fill=\"currentColor\"\n                    />\n                  </svg>\n                  Login with Google\n                </Button>\n              </Field>\n              <FieldSeparator className=\"*:data-[slot=field-separator-content]:bg-card\">\n                Or continue with\n              </FieldSeparator>\n              <Field>\n                <FieldLabel htmlFor=\"email\">Email</FieldLabel>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"m@example.com\"\n                  required\n                />\n              </Field>\n              <Field>\n                <div className=\"flex items-center\">\n                  <FieldLabel htmlFor=\"password\">Password</FieldLabel>\n                  <a\n                    href=\"#\"\n                    className=\"ml-auto text-sm underline-offset-4 hover:underline\"\n                  >\n                    Forgot your password?\n                  </a>\n                </div>\n                <Input id=\"password\" type=\"password\" required />\n              </Field>\n              <Field>\n                <Button type=\"submit\">Login</Button>\n                <FieldDescription className=\"text-center\">\n                  Don&apos;t have an account? <a href=\"#\">Sign up</a>\n                </FieldDescription>\n              </Field>\n            </FieldGroup>\n          </form>\n        </CardContent>\n      </Card>\n      <FieldDescription className=\"px-6 text-center\">\n        By clicking continue, you agree to our <a href=\"#\">Terms of Service</a>{\" \"}\n        and <a href=\"#\">Privacy Policy</a>.\n      </FieldDescription>\n    </div>\n  );\n}\n\n/**\n * 🎯 목적: AWS Cognito 인증 시스템에서 사용되는 다양한 인증 폼들을 제공하는 종합 템플릿\n * 로그인, 회원가입, 비밀번호 재설정, 비밀번호 변경, 이메일 인증 등의 기능을 포함\n */\n\ntype AuthView =\n  | \"login\"\n  | \"signup\"\n  | \"forgot-password\"\n  | \"reset-password\"\n  | \"verify-email\"\n  | \"change-password\";\n\ninterface CognitoTemplateProps extends React.ComponentProps<\"div\"> {\n  /** 초기 표시할 인증 뷰 */\n  initialView?: AuthView;\n  /** 비밀번호 표시/숨기기 토글 활성화 */\n  enablePasswordToggle?: boolean;\n  /** 소셜 로그인 활성화 */\n  enableSocialLogin?: boolean;\n  /** 브랜딩 로고 URL */\n  logoUrl?: string;\n  /** 애플리케이션 이름 */\n  appName?: string;\n}\n\nexport function CognitoTemplate({\n  className,\n  initialView = \"login\",\n  enablePasswordToggle = true,\n  enableSocialLogin = true,\n  logoUrl,\n  appName = \"Your App\",\n  ...props\n}: CognitoTemplateProps) {\n  const [currentView, setCurrentView] = React.useState<AuthView>(initialView);\n  const [showPassword, setShowPassword] = React.useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = React.useState(false);\n\n  /**\n   * 🎯 목적: 비밀번호 입력 필드의 표시/숨기기 상태를 토글\n   */\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  /**\n   * 🎯 목적: 비밀번호 확인 필드의 표시/숨기기 상태를 토글\n   */\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  /**\n   * 🎯 목적: 이전 뷰로 돌아가기 (네비게이션 헬퍼)\n   */\n  const goBack = () => {\n    setCurrentView(\"login\");\n  };\n\n  /**\n   * 🎯 목적: 소셜 로그인 버튼들을 렌더링\n   */\n  const renderSocialButtons = () => {\n    if (!enableSocialLogin) return null;\n\n    return (\n      <Field>\n        <Button variant=\"outline\" type=\"button\" className=\"w-full\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            className=\"mr-2 h-4 w-4\"\n          >\n            <path\n              d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n          Continue with Google\n        </Button>\n        <Button variant=\"outline\" type=\"button\" className=\"w-full\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            className=\"mr-2 h-4 w-4\"\n          >\n            <path\n              d=\"M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701\"\n              fill=\"currentColor\"\n            />\n          </svg>\n          Continue with Apple\n        </Button>\n      </Field>\n    );\n  };\n\n  /**\n   * 🎯 목적: 비밀번호 입력 필드를 렌더링 (토글 기능 포함)\n   */\n  const renderPasswordField = (\n    id: string,\n    label: string,\n    value: boolean,\n    toggle: () => void,\n    placeholder?: string,\n  ) => (\n    <Field>\n      <FieldLabel htmlFor={id}>{label}</FieldLabel>\n      <div className=\"relative\">\n        <Input\n          id={id}\n          type={value ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          required\n          className=\"pr-10\"\n        />\n        {enablePasswordToggle && (\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute top-0 right-0 h-full px-3 py-2 hover:bg-transparent\"\n            onClick={toggle}\n          >\n            {value ? (\n              <EyeOff className=\"h-4 w-4\" />\n            ) : (\n              <Eye className=\"h-4 w-4\" />\n            )}\n            <span className=\"sr-only\">\n              {value ? \"비밀번호 숨기기\" : \"비밀번호 표시\"}\n            </span>\n          </Button>\n        )}\n      </div>\n    </Field>\n  );\n\n  /**\n   * 🎯 목적: 헤더 영역을 렌더링 (로고, 제목, 설명)\n   */\n  const renderHeader = (\n    title: string,\n    description: string,\n    showBackButton = false,\n  ) => (\n    <CardHeader className=\"text-center\">\n      {showBackButton && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute top-4 left-4\"\n          onClick={goBack}\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          <span className=\"sr-only\">뒤로 가기</span>\n        </Button>\n      )}\n      {logoUrl && (\n        <div className=\"mx-auto mb-4\">\n          <img src={logoUrl} alt={`${appName} 로고`} className=\"h-12 w-auto\" />\n        </div>\n      )}\n      <CardTitle className=\"text-xl\">{title}</CardTitle>\n      <CardDescription>{description}</CardDescription>\n    </CardHeader>\n  );\n\n  /**\n   * 🎯 목적: 로그인 폼을 렌더링\n   */\n  const renderLoginForm = () => (\n    <Card>\n      {renderHeader(\"Welcome back\", `Sign in to your ${appName} account`)}\n      <CardContent>\n        <form>\n          <FieldGroup>\n            {renderSocialButtons()}\n            {enableSocialLogin && (\n              <FieldSeparator className=\"*:data-[slot=field-separator-content]:bg-card\">\n                Or continue with email\n              </FieldSeparator>\n            )}\n            <Field>\n              <FieldLabel htmlFor=\"email\">Email</FieldLabel>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                required\n              />\n            </Field>\n            {renderPasswordField(\n              \"password\",\n              \"Password\",\n              showPassword,\n              togglePasswordVisibility,\n              \"Enter your password\",\n            )}\n            <Field>\n              <Button type=\"submit\" className=\"w-full\">\n                Sign In\n              </Button>\n            </Field>\n            <Field>\n              <div className=\"flex justify-between text-sm\">\n                <button\n                  type=\"button\"\n                  onClick={() => setCurrentView(\"forgot-password\")}\n                  className=\"text-muted-foreground underline-offset-4 hover:underline\"\n                >\n                  Forgot password?\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setCurrentView(\"signup\")}\n                  className=\"text-muted-foreground underline-offset-4 hover:underline\"\n                >\n                  Create account\n                </button>\n              </div>\n            </Field>\n          </FieldGroup>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  /**\n   * 🎯 목적: 회원가입 폼을 렌더링\n   */\n  const renderSignupForm = () => (\n    <Card>\n      {renderHeader(\"Create account\", `Create a new ${appName} account`, true)}\n      <CardContent>\n        <form>\n          <FieldGroup>\n            {renderSocialButtons()}\n            {enableSocialLogin && (\n              <FieldSeparator className=\"*:data-[slot=field-separator-content]:bg-card\">\n                Or continue with email\n              </FieldSeparator>\n            )}\n            <Field>\n              <FieldLabel htmlFor=\"signup-email\">Email</FieldLabel>\n              <Input\n                id=\"signup-email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                required\n              />\n            </Field>\n            {renderPasswordField(\n              \"signup-password\",\n              \"Password\",\n              showPassword,\n              togglePasswordVisibility,\n              \"Create a password\",\n            )}\n            {renderPasswordField(\n              \"confirm-password\",\n              \"Confirm Password\",\n              showConfirmPassword,\n              toggleConfirmPasswordVisibility,\n              \"Confirm your password\",\n            )}\n            <Field>\n              <Button type=\"submit\" className=\"w-full\">\n                Create Account\n              </Button>\n            </Field>\n            <Field>\n              <FieldDescription className=\"text-center\">\n                Already have an account?{\" \"}\n                <button\n                  type=\"button\"\n                  onClick={() => setCurrentView(\"login\")}\n                  className=\"underline-offset-4 hover:underline\"\n                >\n                  Sign in\n                </button>\n              </FieldDescription>\n            </Field>\n          </FieldGroup>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  /**\n   * 🎯 목적: 비밀번호 재설정 요청 폼을 렌더링\n   */\n  const renderForgotPasswordForm = () => (\n    <Card>\n      {renderHeader(\n        \"Forgot password?\",\n        \"Enter your email to reset your password\",\n        true,\n      )}\n      <CardContent>\n        <form>\n          <FieldGroup>\n            <Field>\n              <FieldLabel htmlFor=\"reset-email\">Email</FieldLabel>\n              <Input\n                id=\"reset-email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                required\n              />\n            </Field>\n            <Field>\n              <Button type=\"submit\" className=\"w-full\">\n                Send Reset Link\n              </Button>\n            </Field>\n            <Field>\n              <FieldDescription className=\"text-center\">\n                Remember your password?{\" \"}\n                <button\n                  type=\"button\"\n                  onClick={() => setCurrentView(\"login\")}\n                  className=\"underline-offset-4 hover:underline\"\n                >\n                  Back to sign in\n                </button>\n              </FieldDescription>\n            </Field>\n          </FieldGroup>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  /**\n   * 🎯 목적: 비밀번호 재설정 폼을 렌더링\n   */\n  const renderResetPasswordForm = () => (\n    <Card>\n      {renderHeader(\"Reset password\", \"Enter your new password\", true)}\n      <CardContent>\n        <form>\n          <FieldGroup>\n            <Field>\n              <FieldLabel htmlFor=\"verification-code\">\n                Verification Code\n              </FieldLabel>\n              <Input\n                id=\"verification-code\"\n                type=\"text\"\n                placeholder=\"Enter 6-digit code\"\n                required\n              />\n            </Field>\n            {renderPasswordField(\n              \"new-password\",\n              \"New Password\",\n              showPassword,\n              togglePasswordVisibility,\n              \"Enter new password\",\n            )}\n            {renderPasswordField(\n              \"confirm-new-password\",\n              \"Confirm New Password\",\n              showConfirmPassword,\n              toggleConfirmPasswordVisibility,\n              \"Confirm new password\",\n            )}\n            <Field>\n              <Button type=\"submit\" className=\"w-full\">\n                Reset Password\n              </Button>\n            </Field>\n          </FieldGroup>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  /**\n   * 🎯 목적: 이메일 인증 폼을 렌더링\n   */\n  const renderVerifyEmailForm = () => (\n    <Card>\n      {renderHeader(\n        \"Verify your email\",\n        \"Enter the verification code sent to your email\",\n        true,\n      )}\n      <CardContent>\n        <form>\n          <FieldGroup>\n            <Field>\n              <FieldLabel htmlFor=\"verify-code\">Verification Code</FieldLabel>\n              <Input\n                id=\"verify-code\"\n                type=\"text\"\n                placeholder=\"Enter 6-digit code\"\n                required\n              />\n            </Field>\n            <Field>\n              <Button type=\"submit\" className=\"w-full\">\n                Verify Email\n              </Button>\n            </Field>\n            <Field>\n              <FieldDescription className=\"text-center\">\n                Didn't receive a code?{\" \"}\n                <button\n                  type=\"button\"\n                  className=\"underline-offset-4 hover:underline\"\n                >\n                  Resend code\n                </button>\n              </FieldDescription>\n            </Field>\n          </FieldGroup>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  /**\n   * 🎯 목적: 비밀번호 변경 폼을 렌더링 (로그인된 사용자용)\n   */\n  const renderChangePasswordForm = () => (\n    <Card>\n      {renderHeader(\"Change password\", \"Update your account password\", true)}\n      <CardContent>\n        <form>\n          <FieldGroup>\n            {renderPasswordField(\n              \"current-password\",\n              \"Current Password\",\n              showPassword,\n              togglePasswordVisibility,\n              \"Enter current password\",\n            )}\n            {renderPasswordField(\n              \"new-password-change\",\n              \"New Password\",\n              showConfirmPassword,\n              toggleConfirmPasswordVisibility,\n              \"Enter new password\",\n            )}\n            <Field>\n              <Button type=\"submit\" className=\"w-full\">\n                Update Password\n              </Button>\n            </Field>\n          </FieldGroup>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  /**\n   * 🎯 목적: 현재 선택된 뷰에 따라 적절한 폼을 렌더링\n   */\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case \"signup\":\n        return renderSignupForm();\n      case \"forgot-password\":\n        return renderForgotPasswordForm();\n      case \"reset-password\":\n        return renderResetPasswordForm();\n      case \"verify-email\":\n        return renderVerifyEmailForm();\n      case \"change-password\":\n        return renderChangePasswordForm();\n      default:\n        return renderLoginForm();\n    }\n  };\n\n  return (\n    <div\n      className={cn(\"flex w-full max-w-sm flex-col gap-6\", className)}\n      {...props}\n    >\n      {renderCurrentView()}\n      <FieldDescription className=\"px-6 text-center text-xs\">\n        By continuing, you agree to our{\" \"}\n        <a href=\"#\" className=\"underline-offset-4 hover:underline\">\n          Terms of Service\n        </a>{\" \"}\n        and{\" \"}\n        <a href=\"#\" className=\"underline-offset-4 hover:underline\">\n          Privacy Policy\n        </a>\n        .\n      </FieldDescription>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/templates/cognito-story/cognito.stories.tsx",
      "content": "import * as React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { LoginForm, CognitoTemplate } from \"./cognito-template\";\n\n/**\n * AWS Cognito 인증 시스템을 위한 종합적인 템플릿입니다.\n * 로그인, 회원가입, 비밀번호 재설정, 이메일 인증 등 모든 인증 플로우를 포함합니다.\n *\n * 기능:\n * - 6가지 인증 뷰 (로그인, 회원가입, 비밀번호 재설정, 비밀번호 변경, 이메일 인증, 비밀번호 재설정)\n * - 소셜 로그인 (Google, Apple)\n * - 비밀번호 표시/숨기기 토글\n * - 브랜딩 지원 (로고, 앱 이름)\n * - 완전한 접근성 지원\n * - 라이트/다크 테마 지원\n */\nconst meta: Meta<typeof CognitoTemplate> = {\n  title: \"templates/Cognito\",\n  component: CognitoTemplate,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n    docs: {\n      description: {\n        component: `\nAWS Cognito 스타일의 종합적인 인증 템플릿입니다. 실제 프로덕션 환경에서 바로 사용할 수 있도록 설계되었습니다.\n\n## 주요 특징\n\n- **완전한 인증 플로우**: 로그인부터 비밀번호 재설정까지 모든 과정\n- **소셜 로그인**: Google, Apple 등 소셜 로그인 지원\n- **사용자 경험**: 직관적인 네비게이션과 명확한 상태 표시\n- **접근성**: WCAG 가이드라인 준수, 키보드 네비게이션 지원\n- **반응형**: 모바일 퍼스트 디자인\n- **브랜딩**: 커스텀 로고와 앱 이름 지원\n\n## 사용 사례\n\n- SaaS 애플리케이션 인증 시스템\n- 모바일 앱 로그인 화면\n- B2B 대시보드 접근 제어\n- 이커머스 고객 계정 관리\n        `,\n      },\n    },\n  },\n  argTypes: {\n    initialView: {\n      control: { type: \"select\" },\n      options: [\n        \"login\",\n        \"signup\",\n        \"forgot-password\",\n        \"reset-password\",\n        \"verify-email\",\n        \"change-password\",\n      ],\n      description: \"초기에 표시할 인증 뷰를 선택합니다\",\n    },\n    enablePasswordToggle: {\n      control: { type: \"boolean\" },\n      description: \"비밀번호 표시/숨기기 버튼을 활성화합니다\",\n    },\n    enableSocialLogin: {\n      control: { type: \"boolean\" },\n      description: \"소셜 로그인 버튼들을 표시합니다\",\n    },\n    logoUrl: {\n      control: { type: \"text\" },\n      description: \"브랜딩 로고 이미지 URL\",\n    },\n    appName: {\n      control: { type: \"text\" },\n      description: \"애플리케이션 또는 서비스 이름\",\n    },\n  },\n  args: {\n    enablePasswordToggle: true,\n    enableSocialLogin: true,\n    appName: \"Your App\",\n  },\n} satisfies Meta<typeof CognitoTemplate>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 로그인 화면입니다.\n * shadcn/ui의 login-03 블록을 완전히 그대로 사용합니다.\n */\nexport const Default: Story = {\n  render: () => <LoginForm />,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"bg-background flex min-h-svh flex-col items-center justify-center p-6 md:p-10\">\n        <div className=\"w-full max-w-sm\">\n          <Story />\n        </div>\n      </div>\n    ),\n  ],\n};\n\n/**\n * 로그인 화면의 클린한 버전입니다.\n * 소셜 로그인 없이 이메일/비밀번호만 사용합니다.\n */\nexport const LoginOnly: Story = {\n  args: {\n    enableSocialLogin: false,\n  },\n};\n\n/**\n * 회원가입 화면입니다.\n * 새 계정 생성을 위한 폼을 표시합니다.\n */\nexport const SignUp: Story = {\n  args: {\n    initialView: \"signup\",\n  },\n};\n\n/**\n * 비밀번호 재설정 요청 화면입니다.\n * 이메일 주소 입력으로 재설정 링크를 요청합니다.\n */\nexport const ForgotPassword: Story = {\n  args: {\n    initialView: \"forgot-password\",\n  },\n};\n\n/**\n * 비밀번호 재설정 화면입니다.\n * 인증 코드와 새 비밀번호를 입력합니다.\n */\nexport const ResetPassword: Story = {\n  args: {\n    initialView: \"reset-password\",\n  },\n};\n\n/**\n * 이메일 인증 화면입니다.\n * 회원가입 후 이메일로 받은 인증 코드를 입력합니다.\n */\nexport const VerifyEmail: Story = {\n  args: {\n    initialView: \"verify-email\",\n  },\n};\n\n/**\n * 비밀번호 변경 화면입니다.\n * 로그인된 사용자가 현재 비밀번호를 새 비밀번호로 변경합니다.\n */\nexport const ChangePassword: Story = {\n  args: {\n    initialView: \"change-password\",\n  },\n};\n\n/**\n * 접근성 테스트용 스토리입니다.\n * 키보드 네비게이션과 스크린 리더 지원을 확인합니다.\n */\nexport const AccessibilityTest: Story = {\n  args: {\n    enablePasswordToggle: true,\n    enableSocialLogin: true,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            id: \"color-contrast\",\n            enabled: true,\n          },\n          {\n            id: \"keyboard-navigation\",\n            enabled: true,\n          },\n        ],\n      },\n    },\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "templates",
    "storybook",
    "authentication",
    "cognito",
    "forms",
    "login"
  ]
}