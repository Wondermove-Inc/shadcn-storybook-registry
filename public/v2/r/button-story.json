{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-story",
  "type": "registry:file",
  "title": "Button Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating button component usage and variants",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/atoms/button-story/button.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport Link from \"next/link\";\nimport { ChevronRight, Loader2, Mail } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\n\nexport function ButtonDemo() {\n  return <Button>Button</Button>\n}\n\n/**\n * Displays a button or a component that looks like a button.\n */\nconst meta: Meta<typeof Button> = {\n  title: \"ui/Button\",\n  component: Button,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  render: () => <ButtonDemo />\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the button.\n */\nexport const Default: Story = {};\n\n/**\n * Secondary button variant.\n */\nexport const Secondary: Story = {\n  render: () => <Button variant=\"secondary\">Secondary</Button>\n};\n\n/**\n * Destructive button variant.\n */\nexport const Destructive: Story = {\n  render: () => <Button variant=\"destructive\">Destructive</Button>\n};\n\n/**\n * Outline button variant.\n */\nexport const Outline: Story = {\n  render: () => <Button variant=\"outline\">Outline</Button>\n};\n\n/**\n * Ghost button variant.\n */\nexport const Ghost: Story = {\n  render: () => <Button variant=\"ghost\">Ghost</Button>\n};\n\n/**\n * Link button variant.\n */\nexport const LinkVariant: Story = {\n  render: () => <Button variant=\"link\">Link</Button>\n};\n\n/**\n * Icon button example.\n */\nexport const Icon: Story = {\n  render: () => (\n    <Button variant=\"outline\" size=\"icon\">\n      <ChevronRight className=\"h-4 w-4\" />\n    </Button>\n  ),\n};\n\n/**\n * Button with icon.\n */\nexport const WithIcon: Story = {\n  render: () => (\n    <Button>\n      <Mail className=\"mr-2 h-4 w-4\" /> Login with Email\n    </Button>\n  ),\n};\n\n/**\n * Loading button state.\n */\nexport const Loading: Story = {\n  render: () => (\n    <Button disabled>\n      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n      Please wait\n    </Button>\n  ),\n};\n\n/**\n * Button as child (link).\n */\nexport const AsChild: Story = {\n  render: () => (\n    <Button asChild>\n      <Link href=\"/login\">Login</Link>\n    </Button>\n  ),\n};",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "button",
    "interaction"
  ]
}