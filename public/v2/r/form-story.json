{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-story",
  "type": "registry:component",
  "title": "Form Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating form component usage and variants",
  "dependencies": [
    "@hookform/resolvers",
    "zod",
    "react-hook-form"
  ],
  "registryDependencies": [
    "button",
    "form"
  ],
  "files": [
    {
      "path": "src/registry/atoms/form-story/form.stories.tsx",
      "content": "import { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { expect, userEvent, within } from \"storybook/test\";\nimport * as z from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\n/**\n * Building forms with React Hook Form and Zod.\n */\nconst meta: Meta<typeof Form> = {\n  title: \"ui/Form\",\n  component: Form,\n  tags: [\"autodocs\"],\n  argTypes: {},\n  render: (args) => <ProfileForm {...args} />,\n} satisfies Meta<typeof Form>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nconst formSchema = z.object({\n  username: z.string().min(6, {\n    message: \"Username must be at least 6 characters.\",\n  }),\n});\n\nconst ProfileForm = (args: Story[\"args\"]) => {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  });\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(\"onSubmit\", values);\n  }\n  return (\n    <Form {...args} {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <input\n                  className=\"border-input bg-background w-full rounded-md border px-3 py-2\"\n                  placeholder=\"username\"\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n};\n\n/**\n * The default form of the form.\n */\nexport const Default: Story = {};\n\nexport const ShouldSucceedWhenValidInput: Story = {\n  name: \"when typing a valid username, should not show an error message\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvas, step }) => {\n    await step(\"Type a valid username\", async () => {\n      await userEvent.type(\n        await canvas.findByRole(\"textbox\", { name: /username/i }),\n        \"mockuser\",\n      );\n    });\n\n    await step(\"Click the submit button\", async () => {\n      await userEvent.click(\n        await canvas.findByRole(\"button\", { name: /submit/i }),\n      );\n      expect(\n        await canvas.queryByText(/username must be at least 6 characters/i, {\n          exact: true,\n        }),\n      ).toBeNull();\n    });\n  },\n};\n\nexport const ShouldShowErrorWhenInvalidInput: Story = {\n  name: \"when typing a short username, should show an error message\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvas, step }) => {\n    await step(\"Type a short username\", async () => {\n      await userEvent.type(\n        await canvas.findByRole(\"textbox\", { name: /username/i }),\n        \"fail\",\n      );\n    });\n\n    await step(\"Click the submit button\", async () => {\n      await userEvent.click(\n        await canvas.findByRole(\"button\", { name: /submit/i }),\n      );\n      expect(\n        await canvas.queryByText(/username must be at least 6 characters/i, {\n          exact: true,\n        }),\n      ).toBeVisible();\n    });\n  },\n};\n\n/**\n * Ref 사용 예제: FormControl을 통해 Input에 ref를 전달하여 DOM 요소에 접근합니다.\n * react-hook-form의 register 대신 ref를 명시적으로 전달하는 방법을 보여줍니다.\n */\nexport const WithRef: Story = {\n  render: () => {\n    // 🎯 목적: react-hook-form과 함께 ref를 명시적으로 관리\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const formSchema = z.object({\n      email: z.string().email({ message: \"Invalid email address.\" }),\n      password: z\n        .string()\n        .min(8, { message: \"Password must be at least 8 characters.\" }),\n    });\n\n    const form = useForm<z.infer<typeof formSchema>>({\n      resolver: zodResolver(formSchema),\n      defaultValues: {\n        email: \"\",\n        password: \"\",\n      },\n    });\n\n    function onSubmit(values: z.infer<typeof formSchema>) {\n      console.log(\"Form submitted:\", values);\n    }\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field: { ref, ...fieldWithoutRef } }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      ref={(e) => {\n                        ref(e);\n                        // React 18 호환성: ref.current는 read-only이므로 타입 단언 사용\n                        (\n                          inputRef as React.MutableRefObject<HTMLInputElement | null>\n                        ).current = e;\n                      }}\n                      type=\"email\"\n                      placeholder=\"example@email.com\"\n                      {...fieldWithoutRef}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Your email address for account access.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Enter password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Must be at least 8 characters long.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2\">\n              <Button type=\"submit\">Submit</Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => inputRef.current?.focus()}\n              >\n                Focus Email Input\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 form ref와 validation을 테스트\n    const canvas = within(canvasElement);\n\n    // \"Focus Email Input\" 버튼으로 email input에 focus\n    const focusButton = canvas.getByRole(\"button\", {\n      name: \"Focus Email Input\",\n    });\n    await userEvent.click(focusButton);\n\n    // Email input이 포커스되었는지 확인\n    const emailInput = canvas.getByLabelText(\"Email\");\n    await expect(emailInput).toHaveFocus();\n\n    // 잘못된 이메일 입력\n    await userEvent.type(emailInput, \"invalid-email\");\n\n    // Submit 버튼 클릭\n    const submitButton = canvas.getByRole(\"button\", { name: \"Submit\" });\n    await userEvent.click(submitButton);\n\n    // Validation 에러 메시지 확인\n    const errorMessage = await canvas.findByText(\"Invalid email address.\");\n    await expect(errorMessage).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "form",
    "validation"
  ]
}