{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker-story",
  "type": "registry:component",
  "title": "Date Picker Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating date picker component usage and variants",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "label",
    "input",
    "popover"
  ],
  "files": [
    {
      "path": "src/registry/atoms/date-picker-story/date-picker.stories.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { parseDate } from \"chrono-node\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon, ChevronDownIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\n// Main DatePicker Demo (Date of Birth Picker)\nexport function DatePickerDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date\" className=\"px-1\">\n        Date of birth\n      </Label>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            id=\"date\"\n            className=\"w-48 justify-between font-normal\"\n          >\n            {date ? date.toLocaleDateString() : \"Select date\"}\n            <ChevronDownIcon />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n          <Calendar\n            mode=\"single\"\n            selected={date}\n            captionLayout=\"dropdown\"\n            onSelect={(date) => {\n              setDate(date);\n              setOpen(false);\n            }}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\n// Picker with Input\nfunction PickerWithInputDemo() {\n  const [date, setDate] = React.useState<Date>();\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date-input\" className=\"px-1\">\n        Date\n      </Label>\n      <div className=\"relative\">\n        <Input\n          id=\"date-input\"\n          type=\"text\"\n          placeholder=\"Select date\"\n          value={date ? format(date, \"PPP\") : \"\"}\n          readOnly\n          className=\"pr-10\"\n        />\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute top-0 right-0 h-full px-3\"\n            >\n              <CalendarIcon className=\"h-4 w-4\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"end\">\n            <Calendar mode=\"single\" selected={date} onSelect={setDate} />\n          </PopoverContent>\n        </Popover>\n      </div>\n    </div>\n  );\n}\n\n// Date and Time Picker\nfunction DateAndTimePickerDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [date, setDate] = React.useState<Date | undefined>(undefined);\n\n  return (\n    <div className=\"flex gap-4\">\n      <div className=\"flex flex-col gap-3\">\n        <Label htmlFor=\"date-picker\" className=\"px-1\">\n          Date\n        </Label>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              id=\"date-picker\"\n              className=\"w-32 justify-between font-normal\"\n            >\n              {date ? date.toLocaleDateString() : \"Select date\"}\n              <ChevronDownIcon />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              captionLayout=\"dropdown\"\n              onSelect={(date) => {\n                setDate(date);\n                setOpen(false);\n              }}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n      <div className=\"flex flex-col gap-3\">\n        <Label htmlFor=\"time\" className=\"px-1\">\n          Time\n        </Label>\n        <Input\n          type=\"time\"\n          id=\"time\"\n          name=\"time\"\n          placeholder=\"00:00\"\n          className=\"w-28 font-normal\"\n        />\n      </div>\n    </div>\n  );\n}\n\n// Natural Language Picker\nfunction NaturalLanguagePickerDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"In 2 days\");\n  const [date, setDate] = React.useState<Date | undefined>(\n    parseDate(value) || undefined,\n  );\n  const [month, setMonth] = React.useState<Date | undefined>(date);\n\n  function formatDate(date: Date | undefined) {\n    if (!date) {\n      return \"\";\n    }\n\n    return date.toLocaleDateString(\"en-US\", {\n      day: \"2-digit\",\n      month: \"long\",\n      year: \"numeric\",\n    });\n  }\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date\" className=\"px-1\">\n        Schedule Date\n      </Label>\n      <div className=\"relative flex gap-2\">\n        <Input\n          id=\"date\"\n          value={value}\n          placeholder=\"Tomorrow or next week\"\n          className=\"bg-background pr-10\"\n          onChange={(e) => {\n            setValue(e.target.value);\n            const date = parseDate(e.target.value);\n            if (date) {\n              setDate(date);\n              setMonth(date);\n            }\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"ArrowDown\") {\n              e.preventDefault();\n              setOpen(true);\n            }\n          }}\n        />\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              id=\"date-picker\"\n              variant=\"ghost\"\n              className=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\"\n            >\n              <CalendarIcon className=\"size-3.5\" />\n              <span className=\"sr-only\">Select date</span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"end\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              captionLayout=\"dropdown\"\n              month={month}\n              onMonthChange={setMonth}\n              onSelect={(date) => {\n                setDate(date);\n                setValue(formatDate(date));\n                setOpen(false);\n              }}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n      <div className=\"text-muted-foreground px-1 text-sm\">\n        Your post will be published on{\" \"}\n        <span className=\"font-medium\">{formatDate(date)}</span>.\n      </div>\n    </div>\n  );\n}\n\n// Form Demo\nconst FormSchema = z.object({\n  dob: z.date({\n    message: \"A date of birth is required.\",\n  }),\n});\n\nfunction FormDemo() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    toast(\"You submitted the following values\", {\n      description: (\n        <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"dob\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Date of birth</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-[240px] pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\",\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value}\n                    onSelect={field.onChange}\n                    disabled={(date) =>\n                      date > new Date() || date < new Date(\"1900-01-01\")\n                    }\n                    captionLayout=\"dropdown\"\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                Your date of birth is used to calculate your age.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\n/**\n * A date picker component that combines a calendar with a popover.\n */\nconst meta = {\n  title: \"ui/DatePicker\",\n  component: DatePickerDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$|FormSchema/,\n} satisfies Meta<typeof DatePickerDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Date of Birth Picker with dropdown calendar for month/year selection.\n */\nexport const Default: Story = {};\n\n/**\n * Date picker with input field.\n */\nexport const PickerWithInput: Story = {\n  render: () => <PickerWithInputDemo />,\n};\n\n/**\n * Date picker with time input field.\n */\nexport const DateAndTimePicker: Story = {\n  render: () => <DateAndTimePickerDemo />,\n};\n\n/**\n * Natural Language Picker - parse natural language dates\n *\n * Note: This example requires installing the chrono-node package:\n * npm install chrono-node\n */\nexport const NaturalLanguagePicker: Story = {\n  render: () => <NaturalLanguagePickerDemo />,\n};\n\n/**\n * Form Integration with React Hook Form\n *\n * Note: This example requires additional packages:\n * npm install react-hook-form zod @hookform/resolvers/zod\n */\nexport const FormIntegration: Story = {\n  render: () => <FormDemo />,\n};\n\nexport const ShouldSelectDate: Story = {\n  name: \"when user clicks trigger and selects date, should display selected date\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => <DatePickerDemo />,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Date Picker가 트리거 버튼 클릭으로 열리고, 날짜 선택 후 표시되는지 확인\n    const triggerButton = canvas.getByRole(\"button\", { name: /select date/i });\n    await expect(triggerButton).toBeInTheDocument();\n\n    // 트리거 버튼 클릭하여 Calendar 열기\n    await userEvent.click(triggerButton);\n\n    // Calendar가 열렸는지 확인 (날짜 버튼 확인)\n    await waitFor(async () => {\n      const dateButtons = await canvas.findAllByRole(\"button\");\n      await expect(dateButtons.length).toBeGreaterThan(1);\n    });\n\n    // 날짜 버튼 찾기 (15일 선택)\n    const dateButtons = canvas.getAllByRole(\"button\");\n    const date15Button = dateButtons.find(\n      (button) => button.textContent?.trim() === \"15\",\n    );\n\n    if (date15Button) {\n      // 날짜 클릭\n      await userEvent.click(date15Button);\n\n      // 선택된 날짜가 버튼에 표시되는지 확인 (Popover가 닫히고 날짜가 표시됨)\n      await waitFor(() => {\n        expect(triggerButton.textContent).not.toMatch(/select date/i);\n      });\n    }\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "date-picker",
    "form"
  ]
}