{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "aspect-ratio-story",
  "type": "registry:component",
  "title": "Aspect Ratio Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating aspect ratio component usage and variants",
  "registryDependencies": [
    "aspect-ratio"
  ],
  "files": [
    {
      "path": "src/registry/atoms/aspect-ratio-story/aspect-ratio.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport Image from \"next/image\";\nimport { expect, within } from \"storybook/test\";\n\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\n\nexport function AspectRatioDemo() {\n  return (\n    <div className=\"w-[450px]\">\n      <AspectRatio ratio={16 / 9} className=\"bg-muted rounded-lg\">\n        <Image\n          src=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\n          alt=\"Photo by Drew Beamer\"\n          fill\n          className=\"h-full w-full rounded-lg object-cover dark:brightness-[0.2] dark:grayscale\"\n        />\n      </AspectRatio>\n    </div>\n  );\n}\n\n/**\n * Displays content within a desired ratio.\n */\nconst meta: Meta<typeof AspectRatio> = {\n  title: \"ui/AspectRatio\",\n  component: AspectRatio,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    ratio: 16 / 9,\n    className: \"bg-muted rounded-lg w-[450px]\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof AspectRatio>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default 16:9 aspect ratio with Image.\n */\nexport const Default: Story = {\n  render: (args) => (\n    <div className=\"w-[450px]\">\n      <AspectRatio {...args}>\n        <Image\n          src=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\n          alt=\"Photo by Drew Beamer\"\n          fill\n          className=\"h-full w-full rounded-lg object-cover dark:brightness-[0.2] dark:grayscale\"\n        />\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 16:9 aspect ratio (Widescreen).\n */\nexport const Widescreen: Story = {\n  args: {\n    ratio: 16 / 9,\n  },\n  render: (args) => (\n    <div className=\"w-[450px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 text-lg font-semibold text-white\">\n          16:9\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 4:3 aspect ratio (Standard).\n */\nexport const Standard: Story = {\n  args: {\n    ratio: 4 / 3,\n  },\n  render: (args) => (\n    <div className=\"w-[450px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-green-500 to-teal-600 text-lg font-semibold text-white\">\n          4:3\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 1:1 aspect ratio (Square).\n */\nexport const Square: Story = {\n  args: {\n    ratio: 1 / 1,\n  },\n  render: (args) => (\n    <div className=\"w-[300px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-pink-500 to-rose-600 text-lg font-semibold text-white\">\n          1:1\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n\n/**\n * 21:9 aspect ratio (Ultrawide).\n */\nexport const Ultrawide: Story = {\n  args: {\n    ratio: 21 / 9,\n  },\n  render: (args) => (\n    <div className=\"w-[600px]\">\n      <AspectRatio {...args}>\n        <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-orange-500 to-red-600 text-lg font-semibold text-white\">\n          21:9\n        </div>\n      </AspectRatio>\n    </div>\n  ),\n};\n\nexport const ShouldMaintainAspectRatio: Story = {\n  name: \"when rendered with different ratios, should maintain correct aspect ratios\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <div className=\"space-y-6\" data-testid=\"aspect-ratio-container\">\n      <div className=\"space-y-2\">\n        <h4 className=\"text-sm font-medium\">16:9 (Widescreen)</h4>\n        <div className=\"w-[450px]\" data-testid=\"ratio-16-9-container\">\n          <AspectRatio ratio={16 / 9} data-testid=\"ratio-16-9\">\n            <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 text-lg font-semibold text-white\">\n              16:9\n            </div>\n          </AspectRatio>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h4 className=\"text-sm font-medium\">4:3 (Standard)</h4>\n        <div className=\"w-[450px]\" data-testid=\"ratio-4-3-container\">\n          <AspectRatio ratio={4 / 3} data-testid=\"ratio-4-3\">\n            <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-green-500 to-teal-600 text-lg font-semibold text-white\">\n              4:3\n            </div>\n          </AspectRatio>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h4 className=\"text-sm font-medium\">1:1 (Square)</h4>\n        <div className=\"w-[300px]\" data-testid=\"ratio-1-1-container\">\n          <AspectRatio ratio={1 / 1} data-testid=\"ratio-1-1\">\n            <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-pink-500 to-rose-600 text-lg font-semibold text-white\">\n              1:1\n            </div>\n          </AspectRatio>\n        </div>\n      </div>\n    </div>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: AspectRatio 컴포넌트가 다양한 비율을 올바르게 유지하는지 확인\n\n    // Container 확인\n    const container = canvas.getByTestId(\"aspect-ratio-container\");\n    await expect(container).toBeInTheDocument();\n\n    // 16:9 AspectRatio 확인\n    const ratio169 = canvas.getByTestId(\"ratio-16-9\");\n    await expect(ratio169).toBeInTheDocument();\n    await expect(ratio169).toHaveTextContent(\"16:9\");\n\n    // 16:9 컨테이너의 크기 확인\n    const ratio169Container = canvas.getByTestId(\"ratio-16-9-container\");\n    const ratio169Element = ratio169Container.querySelector(\n      '[data-testid=\"ratio-16-9\"]',\n    );\n    if (ratio169Element) {\n      const { width, height } = ratio169Element.getBoundingClientRect();\n      // 16:9 비율 검증 (오차 허용 범위 ±2%)\n      const expectedRatio = 16 / 9;\n      const actualRatio = width / height;\n      const ratioError = Math.abs(actualRatio - expectedRatio) / expectedRatio;\n      await expect(ratioError).toBeLessThan(0.02);\n    }\n\n    // 4:3 AspectRatio 확인\n    const ratio43 = canvas.getByTestId(\"ratio-4-3\");\n    await expect(ratio43).toBeInTheDocument();\n    await expect(ratio43).toHaveTextContent(\"4:3\");\n\n    // 1:1 AspectRatio 확인\n    const ratio11 = canvas.getByTestId(\"ratio-1-1\");\n    await expect(ratio11).toBeInTheDocument();\n    await expect(ratio11).toHaveTextContent(\"1:1\");\n\n    // 1:1 정사각형 비율 검증\n    const ratio11Container = canvas.getByTestId(\"ratio-1-1-container\");\n    const ratio11Element = ratio11Container.querySelector(\n      '[data-testid=\"ratio-1-1\"]',\n    );\n    if (ratio11Element) {\n      const { width, height } = ratio11Element.getBoundingClientRect();\n      // 1:1 비율 검증 (오차 허용 범위 ±2%)\n      const actualRatio = width / height;\n      const ratioError = Math.abs(actualRatio - 1);\n      await expect(ratioError).toBeLessThan(0.02);\n    }\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "layout",
    "responsive"
  ]
}