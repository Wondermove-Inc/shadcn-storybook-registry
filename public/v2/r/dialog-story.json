{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog-story",
  "type": "registry:component",
  "title": "Dialog Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating dialog component usage and variants",
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "path": "src/registry/atoms/dialog-story/dialog.stories.tsx",
      "content": "import * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { Copy } from \"lucide-react\";\nimport { useRef, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\n\nfunction DialogDemo() {\n  return (\n    <Dialog>\n      <form>\n        <DialogTrigger asChild>\n          <Button variant=\"outline\">Open Dialog</Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Edit profile</DialogTitle>\n            <DialogDescription>\n              Make changes to your profile here. Click save when you&apos;re\n              done.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4\">\n            <div className=\"grid gap-3\">\n              <Label htmlFor=\"name-1\">Name</Label>\n              <Input id=\"name-1\" name=\"name\" defaultValue=\"Pedro Duarte\" />\n            </div>\n            <div className=\"grid gap-3\">\n              <Label htmlFor=\"username-1\">Username</Label>\n              <Input id=\"username-1\" name=\"username\" defaultValue=\"@peduarte\" />\n            </div>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </DialogClose>\n            <Button type=\"submit\">Save changes</Button>\n          </DialogFooter>\n        </DialogContent>\n      </form>\n    </Dialog>\n  );\n}\n\n// Custom Close Button Dialog (Share)\nfunction CustomCloseButtonDemo() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">Share</Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Share link</DialogTitle>\n          <DialogDescription>\n            Anyone who has this link will be able to view this.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"grid flex-1 gap-2\">\n            <Label htmlFor=\"link\" className=\"sr-only\">\n              Link\n            </Label>\n            <Input\n              id=\"link\"\n              defaultValue=\"https://ui.shadcn.com/docs/installation\"\n              readOnly\n            />\n          </div>\n          <Button type=\"submit\" size=\"sm\" className=\"px-3\">\n            <span className=\"sr-only\">Copy</span>\n            <Copy className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <DialogFooter className=\"sm:justify-start\">\n          <DialogClose asChild>\n            <Button type=\"button\" variant=\"secondary\">\n              Close\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n/**\n * A dialog component for editing user profile information.\n */\nconst meta = {\n  title: \"ui/Dialog\",\n  component: Dialog,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  args: {\n    onOpenChange: fn(),\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Dialog>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 Dialog 모달입니다. 프로필 수정 폼 예제로 제목, 설명, 입력 필드, 버튼을 포함하며,\n * 중요한 작업이나 추가 정보 입력이 필요할 때 사용합니다. 모달 오버레이로 집중도를 높입니다.\n */\nexport const Default: Story = {\n  render: () => <DialogDemo />,\n};\n\n/**\n * 커스텀 닫기 버튼이 있는 Dialog입니다. 링크 공유 UI 예제로 읽기 전용 input과 복사 버튼을 제공하며,\n * DialogClose를 사용해 취소 액션을 구현합니다. 공유, 알림 등 정보 표시용 모달에 적합합니다.\n */\nexport const CustomCloseButton: Story = {\n  render: () => <CustomCloseButtonDemo />,\n};\n\n/**\n * Ref 사용 예제: DialogContent에 ref를 전달하여 Radix UI primitive에 접근합니다.\n * 이 예제는 프로그래매틱하게 Dialog를 열고 닫는 방법을 보여줍니다.\n */\nexport const WithRef: Story = {\n  render: () => {\n    // 🎯 목적: Radix UI Dialog primitive의 ElementRef 타입을 사용하여 ref 생성\n    const contentRef =\n      useRef<React.ElementRef<typeof DialogPrimitive.Content>>(null);\n    const [open, setOpen] = useState(false);\n    const [message, setMessage] = useState(\"\");\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      setMessage(\"Form submitted successfully!\");\n      // 3초 후 Dialog 닫기\n      setTimeout(() => {\n        setOpen(false);\n        setMessage(\"\");\n      }, 3000);\n    };\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\">Open Controlled Dialog</Button>\n          </DialogTrigger>\n          <DialogContent ref={contentRef} className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Controlled Dialog Example</DialogTitle>\n              <DialogDescription>\n                This dialog can be controlled programmatically using state and\n                ref.\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit}>\n              <div className=\"grid gap-4\">\n                <div className=\"grid gap-3\">\n                  <Label htmlFor=\"email-input\">Email</Label>\n                  <Input\n                    id=\"email-input\"\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    required\n                  />\n                </div>\n                {message && (\n                  <div className=\"text-sm text-green-600 dark:text-green-400\">\n                    {message}\n                  </div>\n                )}\n              </div>\n              <DialogFooter className=\"mt-4\">\n                <DialogClose asChild>\n                  <Button type=\"button\" variant=\"outline\">\n                    Cancel\n                  </Button>\n                </DialogClose>\n                <Button type=\"submit\">Submit</Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        <div className=\"flex gap-2\">\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => setOpen(true)}>\n            Open via State\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => setOpen(false)}>\n            Close via State\n          </Button>\n        </div>\n\n        <p className=\"text-muted-foreground text-sm\">\n          Dialog state: {open ? \"Open\" : \"Closed\"}\n        </p>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 Dialog ref와 상태 제어를 테스트\n    const canvas = within(canvasElement);\n\n    // \"Open via State\" 버튼으로 Dialog 열기\n    const openButton = canvas.getByRole(\"button\", { name: \"Open via State\" });\n    await userEvent.click(openButton);\n\n    // Dialog가 열렸는지 확인\n    const dialogTitle = await canvas.findByText(\"Controlled Dialog Example\");\n    await expect(dialogTitle).toBeVisible();\n\n    // Dialog 상태 텍스트 확인\n    const stateText = canvas.getByText(/Dialog state:/);\n    await expect(stateText).toHaveTextContent(\"Dialog state: Open\");\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "dialog",
    "modal"
  ]
}