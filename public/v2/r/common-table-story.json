{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "common-table-story",
  "type": "registry:component",
  "title": "CommonTable Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories for Kubernetes resource table interface with namespace dropdown, search functionality, and multi-type cell content",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "dropdown-menu",
    "button",
    "input",
    "badge",
    "checkbox"
  ],
  "files": [
    {
      "path": "src/registry/templates/contents/common-table.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  Search,\n  ChevronDown,\n  EllipsisVertical,\n  BadgeCheck,\n  ChevronsRight,\n  ExternalLink,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuCheckboxItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Sheet,\n  SheetHeader,\n  SheetTitle,\n  SheetPortal,\n} from \"@/components/ui/sheet\";\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\";\n\n/**\n * 🎯 목적: CommonTable 테이블 행 데이터 타입 정의\n */\ninterface TableRowData {\n  id: string;\n  checked: boolean;\n  column2: string;\n  column3: string;\n  column4: { text: string; href?: string };\n  column5: {\n    text: string;\n    variant: \"default\" | \"secondary\" | \"outline\" | \"verified\";\n  };\n  column6: string;\n  column7: boolean; // EllipsisVertical 아이콘 버튼 표시 여부\n}\n\n/**\n * 🎯 목적: 테이블 샘플 데이터 - UIDL 명세에 따른 6개 행 구성\n */\nconst tableData: TableRowData[] = [\n  {\n    id: \"1\",\n    checked: false,\n    column2: \"Cell Text\",\n    column3: \"Cell Text\",\n    column4: { text: \"Link Button\", href: \"#\" },\n    column5: { text: \"Badge\", variant: \"default\" },\n    column6: \"Cell Text\",\n    column7: true,\n  },\n  {\n    id: \"2\",\n    checked: true,\n    column2: \"Cell Text\",\n    column3: \"Cell Text\",\n    column4: { text: \"Link Button\", href: \"#\" },\n    column5: { text: \"Badge\", variant: \"secondary\" },\n    column6: \"Cell Text\",\n    column7: true,\n  },\n  {\n    id: \"3\",\n    checked: false,\n    column2: \"Cell Text\",\n    column3: \"Cell Text\",\n    column4: { text: \"Link Button\", href: \"#\" },\n    column5: { text: \"Verified\", variant: \"verified\" },\n    column6: \"Cell Text\",\n    column7: true,\n  },\n  {\n    id: \"4\",\n    checked: true,\n    column2: \"Cell Text\",\n    column3: \"Cell Text\",\n    column4: { text: \"Link Button\", href: \"#\" },\n    column5: { text: \"Badge\", variant: \"default\" },\n    column6: \"Cell Text\",\n    column7: true,\n  },\n  {\n    id: \"5\",\n    checked: false,\n    column2: \"Cell Text\",\n    column3: \"Cell Text\",\n    column4: { text: \"Link Button\", href: \"#\" },\n    column5: { text: \"Badge\", variant: \"secondary\" },\n    column6: \"Cell Text\",\n    column7: true,\n  },\n  {\n    id: \"6\",\n    checked: false,\n    column2: \"Cell Text\",\n    column3: \"Cell Text\",\n    column4: { text: \"Link Button\", href: \"#\" },\n    column5: { text: \"Verified\", variant: \"verified\" },\n    column6: \"Cell Text\",\n    column7: true,\n  },\n];\n\n/**\n * 🎯 목적: CommonTable 컴포넌트 Props 타입\n */\ninterface CommonTableProps {\n  className?: string;\n}\n\n/**\n * 🎯 목적: Kubernetes 리소스를 위한 공통 테이블 컴포넌트\n *\n * 구성 요소:\n * - 상단 메뉴 (메뉴명, 네임스페이스 드롭다운, 검색 입력)\n * - 7개 열을 가진 데이터 테이블\n * - 헤더 행 (Head Text 레이블)\n * - 6개 데이터 행 (텍스트, 링크, 뱃지, 액션 버튼 포함)\n */\nexport function CommonTable({ className }: CommonTableProps) {\n  const [selectedNamespace, setSelectedNamespace] = React.useState(\"default\");\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const [data, setData] = React.useState(tableData);\n  const [isPropertiesOpen, setIsPropertiesOpen] = React.useState(false);\n  const [selectedRowData, setSelectedRowData] =\n    React.useState<TableRowData | null>(null);\n  const [selectedRowId, setSelectedRowId] = React.useState<string | null>(null);\n\n  /**\n   * 🎯 목적: 개별 체크박스 상태 변경 처리\n   */\n  const handleRowCheckChange = (id: string, checked: boolean) => {\n    setData((prev) =>\n      prev.map((row) => (row.id === id ? { ...row, checked } : row)),\n    );\n  };\n\n  /**\n   * 🎯 목적: 전체 선택/해제 처리\n   */\n  const handleSelectAll = (checked: boolean) => {\n    setData((prev) => prev.map((row) => ({ ...row, checked })));\n  };\n\n  /**\n   * 🎯 목적: 현재 선택된 행 개수 계산\n   */\n  const selectedCount = data.filter((row) => row.checked).length;\n  const isAllSelected = selectedCount === data.length;\n  const isIndeterminate = selectedCount > 0 && selectedCount < data.length;\n\n  /**\n   * 🎯 목적: 테이블 행 클릭 시 속성창 열기 및 선택된 행 표시\n   */\n  const handleRowClick = (rowData: TableRowData) => {\n    setSelectedRowData(rowData);\n    setSelectedRowId(rowData.id);\n    setIsPropertiesOpen(true);\n    console.log(\"Row clicked:\", rowData);\n  };\n\n  return (\n    <div className={`flex h-screen w-full flex-col ${className || \"\"}`}>\n      {/* 전체 콘텐츠 영역 - gap-5 패딩 */}\n      <div className=\"flex-1 p-5\">\n        <div className=\"space-y-4\">\n          {/* 상단 메뉴 섹션 */}\n          <div className=\"flex items-center justify-between gap-4\">\n            {/* 왼쪽: 메뉴 이름과 아이템 개수 */}\n            <div className=\"flex items-center gap-1\">\n              <h2 className=\"text-foreground text-lg font-semibold\">{`{Menuname}`}</h2>\n              <span className=\"text-muted-foreground text-base font-light\">\n                ({data.length})\n              </span>\n            </div>\n\n            {/* 오른쪽: 네임스페이스 드롭다운과 검색 */}\n            <div className=\"flex items-center gap-2\">\n              {/* 네임스페이스 드롭다운 */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => console.log(\"Dropdown trigger clicked\")}\n                  >\n                    Namespace: {selectedNamespace}\n                    <ChevronDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"start\">\n                  <DropdownMenuLabel>All Namespaces</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuCheckboxItem\n                    checked={selectedNamespace === \"default\"}\n                    onCheckedChange={() => {\n                      console.log(\"Default clicked\");\n                      setSelectedNamespace(\"default\");\n                    }}\n                  >\n                    default\n                  </DropdownMenuCheckboxItem>\n                  <DropdownMenuCheckboxItem\n                    checked={selectedNamespace === \"cilium-secrets\"}\n                    onCheckedChange={() => {\n                      console.log(\"cilium-secrets clicked\");\n                      setSelectedNamespace(\"cilium-secrets\");\n                    }}\n                  >\n                    cilium-secrets\n                  </DropdownMenuCheckboxItem>\n                  <DropdownMenuCheckboxItem\n                    checked={selectedNamespace === \"kube-node-lease\"}\n                    onCheckedChange={() => {\n                      console.log(\"kube-node-lease clicked\");\n                      setSelectedNamespace(\"kube-node-lease\");\n                    }}\n                  >\n                    kube-node-lease\n                  </DropdownMenuCheckboxItem>\n                  <DropdownMenuCheckboxItem\n                    checked={selectedNamespace === \"kube-public\"}\n                    onCheckedChange={() => {\n                      console.log(\"kube-public clicked\");\n                      setSelectedNamespace(\"kube-public\");\n                    }}\n                  >\n                    kube-public\n                  </DropdownMenuCheckboxItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* 검색 입력 */}\n              <div className=\"relative\">\n                <Search className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform\" />\n                <Input\n                  placeholder=\"Search...\"\n                  value={searchValue}\n                  onChange={(e) => setSearchValue(e.target.value)}\n                  className=\"w-[373px] pl-9\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 테이블 섹션 - header와 gap-4 간격 */}\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-12\">\n                  <Checkbox\n                    checked={isIndeterminate ? \"indeterminate\" : isAllSelected}\n                    onCheckedChange={handleSelectAll}\n                    aria-label=\"전체 선택\"\n                  />\n                </TableHead>\n                <TableHead>Head Text</TableHead>\n                <TableHead>Head Text</TableHead>\n                <TableHead>Head Text</TableHead>\n                <TableHead>Head Text</TableHead>\n                <TableHead>Head Text</TableHead>\n                <TableHead className=\"text-right\"></TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((row) => {\n                const isSelected = selectedRowId === row.id;\n                return (\n                  <TableRow\n                    key={row.id}\n                    className={`cursor-pointer border-l-2 transition-colors ${\n                      isSelected\n                        ? \"bg-muted/50 border-l-primary\"\n                        : \"hover:bg-muted/50 border-l-transparent\"\n                    }`}\n                    onClick={() => handleRowClick(row)}\n                  >\n                    <TableCell>\n                      <Checkbox\n                        checked={row.checked}\n                        onCheckedChange={(checked) =>\n                          handleRowCheckChange(row.id, !!checked)\n                        }\n                        aria-label={`행 ${row.id} 선택`}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                    </TableCell>\n                    <TableCell>{row.column2}</TableCell>\n                    <TableCell>{row.column3}</TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"link\"\n                        className=\"text-primary h-auto p-0\"\n                      >\n                        {row.column4.text}\n                      </Button>\n                    </TableCell>\n                    <TableCell>\n                      {row.column5.variant === \"verified\" ? (\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"bg-blue-500 text-white dark:bg-blue-600\"\n                        >\n                          <BadgeCheck className=\"h-3 w-3\" />\n                          {row.column5.text}\n                        </Badge>\n                      ) : (\n                        <Badge\n                          variant={\n                            row.column5.variant as\n                              | \"default\"\n                              | \"secondary\"\n                              | \"outline\"\n                          }\n                        >\n                          {row.column5.text}\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>{row.column6}</TableCell>\n                    <TableCell className=\"text-right\">\n                      {row.column7 && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          aria-label=\"행 옵션\"\n                          onClick={(e) => e.stopPropagation()}\n                        >\n                          <EllipsisVertical className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n\n      {/* 속성창 패널 */}\n      <Sheet\n        open={isPropertiesOpen}\n        onOpenChange={(open) => {\n          // 포커스 아웃으로 닫히는 것을 방지하기 위해 명시적으로 닫기 버튼을 통해서만 닫도록 함\n          if (!open) return;\n          setIsPropertiesOpen(open);\n        }}\n      >\n        <SheetPortal>\n          {/* 오버레이 없이 컨텐츠만 렌더링 */}\n          <SheetPrimitive.Content\n            className=\"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right fixed inset-y-0 right-0 z-50 h-full w-[700px] gap-4 border-l p-5 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\"\n            onPointerDownOutside={(e) => e.preventDefault()}\n            onEscapeKeyDown={(e) => e.preventDefault()}\n          >\n            <div className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon-sm\"\n                    onClick={() => setIsPropertiesOpen(false)}\n                  >\n                    <ChevronsRight className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon-sm\">\n                    <EllipsisVertical className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex flex-col gap-1\">\n                  <span className=\"text-muted-foreground text-sm leading-5\">\n                    {`{Menuname}`}\n                  </span>\n                  <SheetTitle className=\"text-lg font-semibold\">\n                    {selectedRowData ? `{Table Cell Text}` : \"Properties\"}\n                  </SheetTitle>\n                </div>\n              </div>\n              {/* 속성 테이블 - UIDL 명세에 따른 Table 컴포넌트 사용 */}\n              <Table>\n                <TableBody>\n                  <TableRow>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">Created</span>\n                    </TableCell>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">\n                        19d 4h 36m ago (2025-10-01T09:24:39+09:00)\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">Name</span>\n                    </TableCell>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">\n                        ciliumcidrgroups.cilium.io\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">Labels</span>\n                    </TableCell>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <Badge\n                        variant=\"outline\"\n                        className=\"bg-background border-border text-xs font-semibold\"\n                      >\n                        io.cilium.k8s.crd.schema.version=1.31.11\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">\n                        Annotations\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <Badge\n                        variant=\"outline\"\n                        className=\"bg-background border-border text-xs font-semibold\"\n                      >\n                        freelens.app/resource-version=v1\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">Resource</span>\n                    </TableCell>\n                    <TableCell className=\"border-border border-b px-2 py-2\">\n                      <Button\n                        variant=\"ghost\"\n                        className=\"text-foreground/80 hover:text-foreground h-8 px-3 text-sm font-medium underline\"\n                      >\n                        Ciliumendpoints\n                        <ExternalLink className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">\n                        Conversion\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"border-border border-b px-2 py-1.5\">\n                      <Input\n                        placeholder='{\"strategy\": \"None\"}'\n                        className=\"text-muted-foreground bg-muted/50 h-9 font-mono text-sm\"\n                        readOnly\n                      />\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <span className=\"text-foreground text-sm\">\n                        Conditions\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"border-border border-b px-2 py-[14px]\">\n                      <Badge className=\"bg-primary text-primary-foreground border-0 text-xs font-semibold\">\n                        NamesAccepted\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n\n              {/* Validation 섹션 - UIDL 명세에 따른 코드 블록 */}\n              <div className=\"mt-8 flex flex-col gap-4\">\n                <span className=\"text-foreground text-base leading-none font-medium\">\n                  Validation\n                </span>\n                <div className=\"bg-muted/30 flex w-full flex-col items-center justify-center rounded-[10px] border p-4\">\n                  <div className=\"text-muted-foreground w-full text-left font-mono text-base leading-6\">\n                    <div>\n                      import &#123; Button &#125; from\n                      &quot;@/components/ui/button&quot;\n                    </div>\n                    <br />\n                    <br />\n                    <div>\n                      export function{\" \"}\n                      <span className=\"font-bold\">ButtonOutline</span>() &#123;\n                    </div>\n                    <div>\n                      &nbsp;&nbsp;return &lt;Button\n                      variant=&quot;outline&quot;&gt;Outline&lt;/Button&gt;\n                    </div>\n                    <div>&#125;</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 푸터 버튼들 */}\n            <div className=\"bg-background absolute right-0 bottom-0 left-0 border-t p-4\">\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setIsPropertiesOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button>Save</Button>\n              </div>\n            </div>\n          </SheetPrimitive.Content>\n        </SheetPortal>\n      </Sheet>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/templates/contents/common-table.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { CommonTable } from \"./common-table\";\n\n/**\n * CommonTable 컴포넌트 - Kubernetes 리소스 테이블 인터페이스\n *\n * 특징:\n * - 네임스페이스 드롭다운과 검색 기능이 포함된 상단 메뉴\n * - 7개 열을 가진 데이터 테이블\n * - 텍스트, 링크, 뱃지, 액션 버튼 등 다양한 셀 타입\n * - shadcn/ui 컴포넌트 활용한 일관된 디자인\n */\nconst meta: Meta<typeof CommonTable> = {\n  title: \"templates/Contents/CommonTable\",\n  component: CommonTable,\n  parameters: {\n    layout: \"fullscreen\",\n  },\n  tags: [\"autodocs\"],\n} satisfies Meta<typeof CommonTable>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 CommonTable - 완전한 리소스 테이블 레이아웃\n */\nexport const Default: Story = {};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "templates",
    "storybook",
    "table",
    "contents"
  ]
}