{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-story",
  "type": "registry:component",
  "title": "Progress Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating progress component usage and variants",
  "registryDependencies": [
    "progress"
  ],
  "files": [
    {
      "path": "src/registry/atoms/progress-story/progress.stories.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\n\nimport { Progress } from \"@/components/ui/progress\";\n\n/**\n * Displays an indicator showing the completion progress of a task, typically\n * displayed as a progress bar.\n */\nconst meta = {\n  title: \"ui/Progress\",\n  component: Progress,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n  argTypes: {\n    value: {\n      control: { type: \"range\", min: 0, max: 100, step: 1 },\n      description: \"The progress value (0-100)\",\n    },\n    max: {\n      control: \"number\",\n      description: \"The maximum progress value\",\n    },\n  },\n  args: {\n    value: 66,\n    max: 100,\n  },\n  render: (args) => (\n    <div className=\"w-[350px]\">\n      <Progress value={args.value} max={args.max} className=\"w-full\" />\n    </div>\n  ),\n} satisfies Meta<typeof Progress>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default animated progress bar that updates from 13% to 66% after 500ms.\n */\nexport const Default: Story = {};\n\nexport function ProgressDemo() {\n  const [progress, setProgress] = React.useState(13);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setProgress(66), 500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"w-[350px]\">\n      <Progress value={progress} className=\"w-full\" />\n    </div>\n  );\n}\n\n/**\n * Progress 진행률 업데이트를 테스트합니다.\n */\nexport const ShouldUpdateProgressValue: Story = {\n  name: \"when progress value changes, should update progress bar width\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => {\n    const [progress, setProgress] = React.useState(0);\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"w-[350px]\">\n          <Progress value={progress} data-testid=\"progress-bar\" />\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setProgress(25)}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            25%\n          </button>\n          <button\n            onClick={() => setProgress(50)}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            50%\n          </button>\n          <button\n            onClick={() => setProgress(75)}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            75%\n          </button>\n          <button\n            onClick={() => setProgress(100)}\n            className=\"rounded bg-gray-200 px-3 py-1 text-sm dark:bg-gray-700\"\n          >\n            100%\n          </button>\n        </div>\n        <div className=\"text-center text-sm\">Current: {progress}%</div>\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Progress 컴포넌트가 버튼 클릭에 따라 진행률이 업데이트되는지 확인\n\n    // 초기 상태 확인 (0%)\n    const progressBar = canvas.getByTestId(\"progress-bar\");\n    await expect(progressBar).toBeInTheDocument();\n\n    // 25% 버튼 클릭\n    const button25 = canvas.getByRole(\"button\", { name: /25%/i });\n    await userEvent.click(button25);\n\n    await waitFor(() => {\n      const currentText = canvas.getByText(/Current: 25%/i);\n      expect(currentText).toBeInTheDocument();\n    });\n\n    // 50% 버튼 클릭\n    const button50 = canvas.getByRole(\"button\", { name: /50%/i });\n    await userEvent.click(button50);\n\n    await waitFor(() => {\n      const currentText = canvas.getByText(/Current: 50%/i);\n      expect(currentText).toBeInTheDocument();\n    });\n\n    // 75% 버튼 클릭\n    const button75 = canvas.getByRole(\"button\", { name: /75%/i });\n    await userEvent.click(button75);\n\n    await waitFor(() => {\n      const currentText = canvas.getByText(/Current: 75%/i);\n      expect(currentText).toBeInTheDocument();\n    });\n\n    // 100% 버튼 클릭\n    const button100 = canvas.getByRole(\"button\", { name: /100%/i });\n    await userEvent.click(button100);\n\n    await waitFor(() => {\n      const currentText = canvas.getByText(/Current: 100%/i);\n      expect(currentText).toBeInTheDocument();\n    });\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "progress",
    "feedback"
  ]
}