{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "item-story",
  "type": "registry:component",
  "title": "Item Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating versatile item component for displaying content with consistent styling",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "item",
    "button",
    "avatar",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "src/registry/atoms/item-story/item.stories.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Item,\n  ItemActions,\n  ItemContent,\n  ItemDescription,\n  ItemGroup,\n  ItemHeader,\n  ItemMedia,\n  ItemSeparator,\n  ItemTitle,\n} from \"@/components/ui/item\";\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport {\n  BadgeCheckIcon,\n  ChevronDown,\n  ChevronRightIcon,\n  Plus,\n  PlusIcon,\n  ShieldAlertIcon,\n} from \"lucide-react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport * as React from \"react\";\n\n/**\n * A versatile component that you can use to display any content.\n * Provides flexible layout options for displaying various types of content with consistent styling.\n */\nconst meta = {\n  title: \"ui/Item\",\n  component: Item,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof Item>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 Item 사용 예제입니다.\n * 제목, 설명, 액션 버튼을 포함합니다.\n */\nexport const Default: Story = {\n  render: () => (\n    <div className=\"flex w-full max-w-md flex-col gap-6\">\n      <Item variant=\"outline\">\n        <ItemContent>\n          <ItemTitle>Basic Item</ItemTitle>\n          <ItemDescription>\n            A simple item with title and description.\n          </ItemDescription>\n        </ItemContent>\n        <ItemActions>\n          <Button variant=\"outline\" size=\"sm\">\n            Action\n          </Button>\n        </ItemActions>\n      </Item>\n      <Item variant=\"outline\" size=\"sm\" asChild>\n        <a href=\"#\">\n          <ItemMedia>\n            <BadgeCheckIcon className=\"size-5\" />\n          </ItemMedia>\n          <ItemContent>\n            <ItemTitle>Your profile has been verified.</ItemTitle>\n          </ItemContent>\n          <ItemActions>\n            <ChevronRightIcon className=\"size-4\" />\n          </ItemActions>\n        </a>\n      </Item>\n    </div>\n  ),\n};\n\n/**\n * Variant 예제입니다.\n * default와 outline variant를 보여줍니다.\n */\nexport const Variants: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-6\">\n      <Item>\n        <ItemContent>\n          <ItemTitle>Default Variant</ItemTitle>\n          <ItemDescription>\n            Standard styling with subtle background and borders.\n          </ItemDescription>\n        </ItemContent>\n        <ItemActions>\n          <Button variant=\"outline\" size=\"sm\">\n            Open\n          </Button>\n        </ItemActions>\n      </Item>\n      <Item variant=\"outline\">\n        <ItemContent>\n          <ItemTitle>Outline Variant</ItemTitle>\n          <ItemDescription>\n            Bordered styling for better visual separation.\n          </ItemDescription>\n        </ItemContent>\n        <ItemActions>\n          <Button variant=\"outline\" size=\"sm\">\n            View\n          </Button>\n        </ItemActions>\n      </Item>\n    </div>\n  ),\n};\n\n/**\n * 크기 예제입니다.\n * sm과 기본 크기를 보여줍니다.\n */\nexport const Size: Story = {\n  render: () => (\n    <div className=\"flex w-full max-w-md flex-col gap-6\">\n      <Item variant=\"outline\">\n        <ItemContent>\n          <ItemTitle>Default Size Item</ItemTitle>\n          <ItemDescription>\n            Standard size with comfortable padding.\n          </ItemDescription>\n        </ItemContent>\n        <ItemActions>\n          <Button variant=\"outline\" size=\"sm\">\n            Action\n          </Button>\n        </ItemActions>\n      </Item>\n      <Item variant=\"outline\" size=\"sm\" asChild>\n        <a href=\"#\">\n          <ItemMedia>\n            <BadgeCheckIcon className=\"size-5\" />\n          </ItemMedia>\n          <ItemContent>\n            <ItemTitle>Small Size Item</ItemTitle>\n          </ItemContent>\n          <ItemActions>\n            <ChevronRightIcon className=\"size-4\" />\n          </ItemActions>\n        </a>\n      </Item>\n    </div>\n  ),\n};\n\n/**\n * 아이콘 예제입니다.\n * ItemMedia에 아이콘을 표시합니다.\n */\nexport const Icon: Story = {\n  render: () => (\n    <div className=\"flex w-full max-w-lg flex-col gap-6\">\n      <Item variant=\"outline\">\n        <ItemMedia variant=\"icon\">\n          <ShieldAlertIcon />\n        </ItemMedia>\n        <ItemContent>\n          <ItemTitle>Security Alert</ItemTitle>\n          <ItemDescription>\n            New login detected from unknown device.\n          </ItemDescription>\n        </ItemContent>\n        <ItemActions>\n          <Button size=\"sm\" variant=\"outline\">\n            Review\n          </Button>\n        </ItemActions>\n      </Item>\n    </div>\n  ),\n};\n\n/**\n * 아바타 예제입니다.\n * ItemMedia에 Avatar 컴포넌트를 사용합니다.\n */\nexport const AvatarExample: Story = {\n  render: () => (\n    <div className=\"flex w-full max-w-lg flex-col gap-6\">\n      <Item variant=\"outline\">\n        <ItemMedia>\n          <Avatar>\n            <AvatarImage src=\"https://github.com/evilrabbit.png\" />\n            <AvatarFallback>ER</AvatarFallback>\n          </Avatar>\n        </ItemMedia>\n        <ItemContent>\n          <ItemTitle>Evil Rabbit</ItemTitle>\n          <ItemDescription>Last seen 5 months ago</ItemDescription>\n        </ItemContent>\n        <ItemActions>\n          <Button size=\"icon-sm\" variant=\"outline\" className=\"rounded-full\">\n            <Plus />\n          </Button>\n        </ItemActions>\n      </Item>\n    </div>\n  ),\n};\n\n/**\n * 이미지 예제입니다.\n * ItemMedia에 이미지를 표시합니다.\n */\nexport const ImageExample: Story = {\n  render: () => {\n    const music = [\n      {\n        title: \"Midnight City Lights\",\n        artist: \"Neon Dreams\",\n        album: \"Electric Nights\",\n        duration: \"3:45\",\n      },\n      {\n        title: \"Coffee Shop Conversations\",\n        artist: \"The Morning Brew\",\n        album: \"Urban Stories\",\n        duration: \"4:05\",\n      },\n      {\n        title: \"Digital Rain\",\n        artist: \"Cyber Symphony\",\n        album: \"Binary Beats\",\n        duration: \"3:30\",\n      },\n    ];\n\n    return (\n      <div className=\"flex w-full max-w-md flex-col gap-6\">\n        <ItemGroup className=\"gap-4\">\n          {music.map((song) => (\n            <Item key={song.title} variant=\"outline\" asChild role=\"listitem\">\n              <a href=\"#\">\n                <ItemMedia variant=\"image\">\n                  <Image\n                    src={`https://avatar.vercel.sh/${song.title}`}\n                    alt={song.title}\n                    width={32}\n                    height={32}\n                    className=\"object-cover grayscale\"\n                  />\n                </ItemMedia>\n                <ItemContent>\n                  <ItemTitle className=\"line-clamp-1\">\n                    {song.title} -{\" \"}\n                    <span className=\"text-muted-foreground\">{song.album}</span>\n                  </ItemTitle>\n                  <ItemDescription>{song.artist}</ItemDescription>\n                </ItemContent>\n                <ItemContent className=\"flex-none text-center\">\n                  <ItemDescription>{song.duration}</ItemDescription>\n                </ItemContent>\n              </a>\n            </Item>\n          ))}\n        </ItemGroup>\n      </div>\n    );\n  },\n};\n\n/**\n * 그룹 예제입니다.\n * ItemGroup과 ItemSeparator를 사용합니다.\n */\nexport const Group: Story = {\n  render: () => {\n    const people = [\n      {\n        username: \"shadcn\",\n        avatar: \"https://github.com/shadcn.png\",\n        email: \"shadcn@vercel.com\",\n      },\n      {\n        username: \"maxleiter\",\n        avatar: \"https://github.com/maxleiter.png\",\n        email: \"maxleiter@vercel.com\",\n      },\n      {\n        username: \"evilrabbit\",\n        avatar: \"https://github.com/evilrabbit.png\",\n        email: \"evilrabbit@vercel.com\",\n      },\n    ];\n\n    return (\n      <div className=\"flex w-full max-w-md flex-col gap-6\">\n        <ItemGroup>\n          {people.map((person, index) => (\n            <React.Fragment key={person.username}>\n              <Item>\n                <ItemMedia>\n                  <Avatar>\n                    <AvatarImage src={person.avatar} className=\"grayscale\" />\n                    <AvatarFallback>{person.username.charAt(0)}</AvatarFallback>\n                  </Avatar>\n                </ItemMedia>\n                <ItemContent className=\"gap-1\">\n                  <ItemTitle>{person.username}</ItemTitle>\n                  <ItemDescription>{person.email}</ItemDescription>\n                </ItemContent>\n                <ItemActions>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\n                    <PlusIcon className=\"size-4\" />\n                  </Button>\n                </ItemActions>\n              </Item>\n              {index < people.length - 1 && <ItemSeparator />}\n            </React.Fragment>\n          ))}\n        </ItemGroup>\n      </div>\n    );\n  },\n};\n\n/**\n * 헤더 예제입니다.\n * ItemHeader를 사용하여 상단에 이미지를 표시합니다.\n */\nexport const Header: Story = {\n  render: () => {\n    const models = [\n      {\n        name: \"claude-3-5-sonnet\",\n        image: \"https://avatar.vercel.sh/claude-3-5-sonnet\",\n        lastUsed: \"Just now\",\n        version: \"20241022\",\n      },\n      {\n        name: \"gpt-4o\",\n        image: \"https://avatar.vercel.sh/gpt-4o\",\n        lastUsed: \"2 hours ago\",\n        version: \"2024-08-06\",\n      },\n    ];\n\n    return (\n      <div className=\"flex w-full max-w-md flex-col gap-6\">\n        <ItemGroup className=\"gap-4\">\n          {models.map((model) => (\n            <Item key={model.name} variant=\"outline\">\n              <ItemHeader>\n                <Image\n                  src={model.image}\n                  alt={model.name}\n                  width={128}\n                  height={128}\n                  className=\"aspect-square w-full rounded-sm object-cover\"\n                />\n              </ItemHeader>\n              <ItemContent>\n                <ItemTitle>{model.name}</ItemTitle>\n                <ItemDescription>Version: {model.version}</ItemDescription>\n              </ItemContent>\n              <ItemContent>\n                <ItemDescription className=\"text-xs\">\n                  Last used {model.lastUsed}\n                </ItemDescription>\n              </ItemContent>\n            </Item>\n          ))}\n        </ItemGroup>\n      </div>\n    );\n  },\n};\n\n/**\n * 링크 예제입니다.\n * asChild prop을 사용하여 다양한 블로그 포스트를 링크로 표시합니다.\n */\nexport const LinkExample: Story = {\n  render: () => {\n    const posts = [\n      {\n        title: \"Introducing AI-powered code reviews\",\n        description:\n          \"Revolutionize your development workflow with intelligent automation\",\n        date: \"Dec 1, 2024\",\n        href: \"#\",\n      },\n      {\n        title: \"Best practices for React 19\",\n        description: \"Essential patterns and tips for the latest React release\",\n        date: \"Nov 28, 2024\",\n        href: \"#\",\n      },\n      {\n        title: \"Building scalable design systems\",\n        description:\n          \"A comprehensive guide to creating maintainable component libraries\",\n        date: \"Nov 15, 2024\",\n        href: \"#\",\n      },\n    ];\n\n    return (\n      <div className=\"flex w-full max-w-md flex-col gap-6\">\n        <ItemGroup className=\"gap-4\">\n          {posts.map((post) => (\n            <Item key={post.title} variant=\"outline\" asChild>\n              <Link href={post.href}>\n                <ItemContent>\n                  <ItemTitle>{post.title}</ItemTitle>\n                  <ItemDescription>{post.description}</ItemDescription>\n                </ItemContent>\n                <ItemContent className=\"flex-none\">\n                  <ItemDescription className=\"text-xs\">\n                    {post.date}\n                  </ItemDescription>\n                </ItemContent>\n                <ItemActions>\n                  <ChevronRightIcon className=\"size-4\" />\n                </ItemActions>\n              </Link>\n            </Item>\n          ))}\n        </ItemGroup>\n      </div>\n    );\n  },\n};\n\n/**\n * 드롭다운 예제입니다.\n * DropdownMenu와 함께 사용하여 사람들의 목록을 보여줍니다.\n */\nexport const Dropdown: Story = {\n  render: () => {\n    const [selected, setSelected] = React.useState(\"Select\");\n    const people = [\n      {\n        username: \"shadcn\",\n        avatar: \"https://github.com/shadcn.png\",\n        email: \"shadcn@vercel.com\",\n      },\n      {\n        username: \"maxleiter\",\n        avatar: \"https://github.com/maxleiter.png\",\n        email: \"maxleiter@vercel.com\",\n      },\n      {\n        username: \"evilrabbit\",\n        avatar: \"https://github.com/evilrabbit.png\",\n        email: \"evilrabbit@vercel.com\",\n      },\n    ];\n\n    return (\n      <div className=\"flex min-h-64 w-full max-w-md flex-col items-center gap-6\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-fit\">\n              {selected}\n              <ChevronDown className=\"size-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"min-w-64\">\n            {people.map((person) => (\n              <DropdownMenuItem\n                key={person.username}\n                onSelect={() => setSelected(person.username)}\n              >\n                <Item className=\"cursor-pointer\">\n                  <ItemMedia>\n                    <Avatar>\n                      <AvatarImage src={person.avatar} className=\"grayscale\" />\n                      <AvatarFallback>\n                        {person.username.charAt(0)}\n                      </AvatarFallback>\n                    </Avatar>\n                  </ItemMedia>\n                  <ItemContent className=\"gap-1\">\n                    <ItemTitle>{person.username}</ItemTitle>\n                    <ItemDescription>{person.email}</ItemDescription>\n                  </ItemContent>\n                </Item>\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    );\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "item",
    "list"
  ]
}