{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chart-data-story",
  "type": "registry:component",
  "title": "Chart Data Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Dark theme system monitoring dashboard with hourly usage bar chart, radial distribution charts, and warnings table",
  "dependencies": [
    "recharts",
    "lucide-react"
  ],
  "registryDependencies": [
    "chart",
    "table",
    "badge",
    "toggle-group",
    "card"
  ],
  "files": [
    {
      "path": "src/registry/templates/contents/chart-data.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  ChartContainer,\n  ChartConfig,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport {\n  Bar,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  RadialBar,\n  RadialBarChart,\n  PolarGrid,\n  PolarAngleAxis,\n} from \"recharts\";\nimport { TriangleAlert } from \"lucide-react\";\n\n/**\n * 🎯 목적: ChartData 컴포넌트 Props 타입 정의\n * 스크린샷 기반 다크 테마 대시보드 컴포넌트\n */\ninterface ChartDataProps {\n  className?: string;\n}\n\n/**\n * 🎯 목적: 시간별 사용량 데이터\n */\nconst hourlyData = [\n  { hour: \"15:00\", value: 953.7 },\n  { hour: \"16:00\", value: 1600 },\n  { hour: \"17:00\", value: 2800 },\n  { hour: \"18:00\", value: 1800 },\n  { hour: \"19:00\", value: 1200 },\n  { hour: \"20:00\", value: 1600 },\n];\n\n/**\n * 🎯 목적: CPU 사용량 데이터\n */\nconst cpuData = [\n  { name: \"Usage\", value: 0.06, fill: \"#3b82f6\" },\n  { name: \"Requests\", value: 1.1, fill: \"#60a5fa\" },\n  { name: \"Limits\", value: 0.2, fill: \"#93bbfc\" },\n  { name: \"Allocatable\", value: 4.0, fill: \"#dbeafe\" },\n];\n\n/**\n * 🎯 목적: Memory 사용량 데이터\n */\nconst memoryData = [\n  { name: \"Usage\", value: 1.3, fill: \"#8b5cf6\" },\n  { name: \"Requests\", value: 304.0, fill: \"#a78bfa\" },\n  { name: \"Limits\", value: 468.0, fill: \"#c4b5fd\" },\n  { name: \"Allocatable\", value: 3700, fill: \"#e9d5ff\" },\n];\n\n/**\n * 🎯 목적: Pods 데이터\n */\nconst podsData = [\n  { name: \"Usage\", value: 15, fill: \"#ec4899\" },\n  { name: \"Allocatable\", value: 110, fill: \"#f9a8d4\" },\n  { name: \"Capacity\", value: 110, fill: \"#fce7f3\" },\n];\n\n/**\n * 🎯 목적: 경고 테이블 데이터\n */\nconst warningData = [\n  {\n    id: \"1\",\n    col1: \"Table Cell Text\",\n    col2: \"Table Cell Text\",\n    col3: \"Table Cell Text\",\n    col4: \"Table Cell Text\",\n    badge: \"Badge\",\n  },\n  {\n    id: \"2\",\n    col1: \"Table Cell Text\",\n    col2: \"Table Cell Text\",\n    col3: \"Table Cell Text\",\n    col4: \"Table Cell Text\",\n    badge: \"Badge\",\n  },\n  {\n    id: \"3\",\n    col1: \"Table Cell Text\",\n    col2: \"Table Cell Text\",\n    col3: \"Table Cell Text\",\n    col4: \"Table Cell Text\",\n    badge: \"Badge\",\n  },\n  {\n    id: \"4\",\n    col1: \"Table Cell Text\",\n    col2: \"Table Cell Text\",\n    col3: \"Table Cell Text\",\n    col4: \"Table Cell Text\",\n    badge: \"Verified\",\n    isVerified: true,\n  },\n  {\n    id: \"5\",\n    col1: \"Table Cell Text\",\n    col2: \"Table Cell Text\",\n    col3: \"Table Cell Text\",\n    col4: \"Table Cell Text\",\n    badge: \"Verified\",\n    isVerified: true,\n  },\n];\n\n/**\n * 🎯 목적: 스크린샷 기반 차트 데이터 대시보드 컴포넌트\n *\n * 구조:\n * - 상단: Master/Worker 노드 토글\n * - 왼쪽: 시간별 사용량 바 차트 + CPU/Memory 토글\n * - 오른쪽: 3개의 Radial 차트 (CPU, Memory, Pods)\n * - 하단: 경고 테이블\n */\nexport function ChartData({ className }: ChartDataProps) {\n  const [selectedNode, setSelectedNode] = React.useState(\"master\");\n  const [selectedMetric, setSelectedMetric] = React.useState(\"cpu\");\n\n  // 🎯 목적: 시간별 사용량 차트 설정\n  const hourlyChartConfig = {\n    value: {\n      label: selectedMetric === \"cpu\" ? \"CPU Usage\" : \"Memory Usage\",\n      color: \"hsl(var(--chart-1))\",\n    },\n  } satisfies ChartConfig;\n\n  // 🎯 목적: Radial 차트 설정\n  const radialChartConfig = {\n    value: {\n      label: \"Usage\",\n    },\n  } satisfies ChartConfig;\n\n  return (\n    <div className={`min-h-screen w-full bg-black p-6 ${className || \"\"}`}>\n      <div className=\"mx-auto max-w-[1400px] space-y-6\">\n        {/* 헤더 영역 */}\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-xl font-medium text-white\">{\"{Menuname}\"}</h1>\n\n          {/* Master/Worker 노드 토글 */}\n          <ToggleGroup\n            type=\"single\"\n            value={selectedNode}\n            onValueChange={(value) => value && setSelectedNode(value)}\n            variant=\"outline\"\n            size=\"default\"\n          >\n            <ToggleGroupItem\n              value=\"master\"\n              aria-label=\"Master Nodes\"\n              className=\"bg-gray-800 text-white data-[state=on]:bg-gray-700 data-[state=on]:text-white\"\n            >\n              Master Nodes\n            </ToggleGroupItem>\n            <ToggleGroupItem\n              value=\"worker\"\n              aria-label=\"Worker Nodes\"\n              className=\"bg-gray-800 text-white data-[state=on]:bg-gray-700 data-[state=on]:text-white\"\n            >\n              Worker Nodes\n            </ToggleGroupItem>\n          </ToggleGroup>\n        </div>\n\n        {/* 차트 영역 */}\n        <div className=\"grid gap-6 lg:grid-cols-[1fr,2fr]\">\n          {/* 왼쪽: 시간별 사용량 차트 */}\n          <Card className=\"border-gray-800 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"mb-4 flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-base font-normal text-white\">\n                    Hourly usage\n                  </h3>\n                  <p className=\"text-xs text-gray-500\">3.7GiB</p>\n                </div>\n\n                {/* CPU/Memory 토글 */}\n                <ToggleGroup\n                  type=\"single\"\n                  value={selectedMetric}\n                  onValueChange={(value) => value && setSelectedMetric(value)}\n                  variant=\"outline\"\n                  size=\"sm\"\n                >\n                  <ToggleGroupItem\n                    value=\"cpu\"\n                    aria-label=\"CPU\"\n                    className=\"bg-gray-800 text-white data-[state=on]:bg-blue-600 data-[state=on]:text-white\"\n                  >\n                    CPU\n                  </ToggleGroupItem>\n                  <ToggleGroupItem\n                    value=\"memory\"\n                    aria-label=\"Memory\"\n                    className=\"bg-gray-800 text-white data-[state=on]:bg-blue-600 data-[state=on]:text-white\"\n                  >\n                    Memory\n                  </ToggleGroupItem>\n                </ToggleGroup>\n              </div>\n\n              <ChartContainer\n                config={hourlyChartConfig}\n                className=\"h-[300px] w-full\"\n              >\n                <BarChart data={hourlyData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                  <XAxis\n                    dataKey=\"hour\"\n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fill: \"#9ca3af\", fontSize: 12 }}\n                  />\n                  <YAxis\n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fill: \"#9ca3af\", fontSize: 12 }}\n                    tickFormatter={(value) => `${value}MiB`}\n                  />\n                  <ChartTooltip\n                    cursor={{ fill: \"transparent\" }}\n                    content={<ChartTooltipContent />}\n                  />\n                  <Bar dataKey=\"value\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n\n          {/* 오른쪽: Usage Type Distribution Chart */}\n          <Card className=\"border-gray-800 bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"mb-6 text-base font-normal text-white\">\n                Usage Type Distribution Chart\n              </h3>\n\n              <div className=\"grid grid-cols-3 gap-6\">\n                {/* CPU Chart */}\n                <div className=\"text-center\">\n                  <h4 className=\"mb-4 text-sm font-normal text-white\">CPU</h4>\n                  <ChartContainer\n                    config={radialChartConfig}\n                    className=\"mx-auto h-[200px] w-[200px]\"\n                  >\n                    <RadialBarChart\n                      data={cpuData}\n                      startAngle={90}\n                      endAngle={-270}\n                      innerRadius={30}\n                      outerRadius={90}\n                    >\n                      <PolarGrid\n                        gridType=\"circle\"\n                        radialLines={false}\n                        stroke=\"none\"\n                        className=\"first:fill-gray-800 last:fill-transparent\"\n                        polarRadius={[86, 74, 62, 50, 38]}\n                      />\n                      <RadialBar\n                        dataKey=\"value\"\n                        cornerRadius={10}\n                        fill=\"currentColor\"\n                      />\n                      <PolarAngleAxis\n                        type=\"number\"\n                        domain={[0, 4]}\n                        angleAxisId={0}\n                        tick={false}\n                      />\n                    </RadialBarChart>\n                  </ChartContainer>\n                  <div className=\"mt-4 space-y-1 text-left text-xs text-gray-400\">\n                    <p>• Usages: 0.06</p>\n                    <p>• Requests: 1.10</p>\n                    <p>• Limits: 0.20</p>\n                    <p>• Allocatable Capacity: 4.00</p>\n                    <p>• Capacity: 4.00</p>\n                  </div>\n                </div>\n\n                {/* Memory Chart */}\n                <div className=\"text-center\">\n                  <h4 className=\"mb-4 text-sm font-normal text-white\">\n                    Memory\n                  </h4>\n                  <ChartContainer\n                    config={radialChartConfig}\n                    className=\"mx-auto h-[200px] w-[200px]\"\n                  >\n                    <RadialBarChart\n                      data={memoryData}\n                      startAngle={90}\n                      endAngle={-270}\n                      innerRadius={30}\n                      outerRadius={90}\n                    >\n                      <PolarGrid\n                        gridType=\"circle\"\n                        radialLines={false}\n                        stroke=\"none\"\n                        className=\"first:fill-gray-800 last:fill-transparent\"\n                        polarRadius={[86, 74, 62, 50, 38]}\n                      />\n                      <RadialBar\n                        dataKey=\"value\"\n                        cornerRadius={10}\n                        fill=\"currentColor\"\n                      />\n                      <PolarAngleAxis\n                        type=\"number\"\n                        domain={[0, 3700]}\n                        angleAxisId={0}\n                        tick={false}\n                      />\n                    </RadialBarChart>\n                  </ChartContainer>\n                  <div className=\"mt-4 space-y-1 text-left text-xs text-gray-400\">\n                    <p>• Usages: 1.3GiB</p>\n                    <p>• Requests: 304.0MiB</p>\n                    <p>• Limits: 468.0MiB</p>\n                    <p>• Allocatable Capacity: 3.7GiB</p>\n                    <p>• Capacity: 3.8GiB</p>\n                  </div>\n                </div>\n\n                {/* Pods Chart */}\n                <div className=\"text-center\">\n                  <h4 className=\"mb-4 text-sm font-normal text-white\">Pods</h4>\n                  <ChartContainer\n                    config={radialChartConfig}\n                    className=\"mx-auto h-[200px] w-[200px]\"\n                  >\n                    <RadialBarChart\n                      data={podsData}\n                      startAngle={90}\n                      endAngle={-270}\n                      innerRadius={30}\n                      outerRadius={90}\n                    >\n                      <PolarGrid\n                        gridType=\"circle\"\n                        radialLines={false}\n                        stroke=\"none\"\n                        className=\"first:fill-gray-800 last:fill-transparent\"\n                        polarRadius={[86, 62, 38]}\n                      />\n                      <RadialBar\n                        dataKey=\"value\"\n                        cornerRadius={10}\n                        fill=\"currentColor\"\n                      />\n                      <PolarAngleAxis\n                        type=\"number\"\n                        domain={[0, 110]}\n                        angleAxisId={0}\n                        tick={false}\n                      />\n                    </RadialBarChart>\n                  </ChartContainer>\n                  <div className=\"mt-4 space-y-1 text-left text-xs text-gray-400\">\n                    <p>• Usages: 15</p>\n                    <p>• Allocatable Capacity: 110</p>\n                    <p>• Capacity: 110</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* 경고 테이블 */}\n        <Card className=\"border-gray-800 bg-gray-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"mb-4 flex items-center gap-2\">\n              <TriangleAlert className=\"h-5 w-5 text-yellow-500\" />\n              <h3 className=\"text-base font-normal text-yellow-500\">\n                Warnings (3)\n              </h3>\n            </div>\n\n            <Table>\n              <TableHeader>\n                <TableRow className=\"border-gray-800\">\n                  <TableHead className=\"text-gray-400\">Head Text</TableHead>\n                  <TableHead className=\"text-gray-400\">Head Text</TableHead>\n                  <TableHead className=\"text-gray-400\">Head Text</TableHead>\n                  <TableHead className=\"text-gray-400\">Head Text</TableHead>\n                  <TableHead className=\"text-gray-400\">Head Text</TableHead>\n                  <TableHead className=\"text-gray-400\"></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {warningData.map((row) => (\n                  <TableRow key={row.id} className=\"border-gray-800\">\n                    <TableCell className=\"text-gray-300\">{row.col1}</TableCell>\n                    <TableCell className=\"text-gray-300\">{row.col2}</TableCell>\n                    <TableCell className=\"text-gray-300\">{row.col3}</TableCell>\n                    <TableCell className=\"text-gray-300\">{row.col4}</TableCell>\n                    <TableCell>\n                      {row.isVerified ? (\n                        <Badge className=\"bg-blue-600 text-white hover:bg-blue-700\">\n                          ✓ {row.badge}\n                        </Badge>\n                      ) : (\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"bg-gray-700 text-gray-300\"\n                        >\n                          {row.badge}\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <button className=\"text-gray-400 hover:text-gray-200\">\n                        ⋮\n                      </button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n\n            <div className=\"mt-4 text-center\">\n              <button className=\"text-sm text-gray-400 hover:text-gray-200\">\n                Caption text\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/templates/contents/chart-data.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { ChartData } from \"./chart-data\";\n\n/**\n * 🎯 목적: 스크린샷 기반 차트 데이터 대시보드 컴포넌트\n *\n * 스크린샷 디자인을 정확히 따라 구현된 다크 테마 대시보드 템플릿입니다.\n * shadcn/ui 컴포넌트(ToggleGroup, Chart, Card, Table)만을 사용하여 구현되었습니다.\n *\n * 구조:\n * - 상단: {Menuname} 텍스트와 Master/Worker 노드 토글\n * - 왼쪽: Hourly usage 바 차트 (파란색) + CPU/Memory 토글\n * - 오른쪽: Usage Type Distribution Chart - 3개의 Radial 차트 (CPU, Memory, Pods)\n * - 하단: ⚠️ Warnings (3) 섹션과 테이블\n * - 배경색: 완전 검은색 (#000000)\n */\nconst meta: Meta<typeof ChartData> = {\n  title: \"templates/Contents/Chart Data\",\n  component: ChartData,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"fullscreen\",\n    docs: {\n      description: {\n        component: `\n### ChartData 컴포넌트\n\n스크린샷 디자인을 정확히 구현한 다크 테마 시스템 모니터링 대시보드입니다.\n\n#### 구성 요소\n\n- **헤더**: {Menuname} 텍스트와 Master/Worker Nodes 토글\n- **Hourly usage 차트**: 파란색 바 차트로 시간별 사용량 표시 (3.7GiB)\n- **Usage Type Distribution Chart**: CPU, Memory, Pods 3개의 동심원 Radial 차트\n- **Warnings 섹션**: 노란색 경고 아이콘과 5개 행의 테이블\n\n#### 사용된 shadcn/ui 컴포넌트\n\n- **ToggleGroup**: Master/Worker 노드 및 CPU/Memory 전환\n- **Chart**: BarChart (시간별 사용량), RadialBarChart (리소스 분포)\n- **Card**: 차트와 테이블을 감싸는 카드 컴포넌트\n- **Table**: 경고 정보를 표시하는 테이블\n- **Badge**: Verified 상태 표시\n\n#### 디자인 특징\n\n- 완전 검은색 배경 (#000000)\n- 회색 계열 카드 배경 (#1a1a1a)\n- 파란색 차트와 토글 강조색\n- 반응형 레이아웃\n        `,\n      },\n    },\n  },\n} satisfies Meta<typeof ChartData>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 🎯 목적: 기본 차트 데이터 대시보드 표시\n *\n * 스크린샷과 동일한 전체 대시보드 뷰입니다.\n * 검은색 배경에 모든 차트와 테이블이 표시됩니다.\n */\nexport const Default: Story = {\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: `\n시스템 모니터링을 위한 기본 대시보드입니다.\n\n- **헤더**: Master/Worker Nodes 토글로 노드 타입 전환\n- **Hourly usage**: 15:00-20:00 시간대의 사용량을 파란색 바 차트로 표시\n- **Usage Type Distribution**: CPU, Memory, Pods의 사용량을 동심원 차트로 시각화\n- **Warnings**: 5개의 경고 항목을 테이블로 표시 (Badge, Verified 뱃지 포함)\n        `,\n      },\n    },\n  },\n};\n\n/**\n * 🎯 목적: 컴팩트한 모바일 뷰 시뮬레이션\n *\n * 모바일 기기에서의 레이아웃과 사용성을 확인할 수 있는 뷰입니다.\n * 차트가 세로로 배열되고 컨트롤이 적절히 배치됩니다.\n */\nexport const Mobile: Story = {\n  args: {},\n  parameters: {\n    viewport: {\n      defaultViewport: \"mobile1\",\n    },\n    docs: {\n      description: {\n        story: `\n모바일 화면에 최적화된 레이아웃입니다.\n\n- 차트가 세로로 스택 배열\n- 토글 컨트롤이 컴팩트하게 배치\n- 테이블이 모바일에 적합한 형태로 조정\n- 터치 인터랙션 최적화\n        `,\n      },\n    },\n  },\n};\n\n/**\n * 🎯 목적: 다크 테마에서의 차트 표시\n *\n * 다크 모드에서 차트와 UI 요소들이 적절히 표시되는지 확인합니다.\n */\nexport const DarkTheme: Story = {\n  args: {},\n  parameters: {\n    backgrounds: {\n      default: \"dark\",\n    },\n    docs: {\n      description: {\n        story: `\n다크 테마 적용 시의 모습입니다.\n\n- 차트 색상이 다크 테마에 맞게 조정\n- 텍스트와 배경의 적절한 대비\n- 경고 뱃지 색상이 다크 모드에서도 가독성 유지\n        `,\n      },\n    },\n  },\n};\n\n/**\n * 🎯 목적: 커스텀 스타일링 예제\n *\n * className을 통해 추가적인 스타일링을 적용한 예제입니다.\n */\nexport const CustomStyling: Story = {\n  args: {\n    className:\n      \"bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-blue-900\",\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n커스텀 배경 그라데이션이 적용된 버전입니다.\n\n- 브랜드 색상에 맞춘 배경 그라데이션\n- 차트와 카드의 투명도 조정\n- 전체적인 비주얼 일관성 유지\n        `,\n      },\n    },\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "templates",
    "storybook",
    "charts",
    "dashboard",
    "monitoring"
  ]
}