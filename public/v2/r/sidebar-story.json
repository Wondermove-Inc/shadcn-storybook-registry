{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar-story",
  "type": "registry:component",
  "title": "Sidebar Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating sidebar component usage and variants",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "sidebar",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "src/registry/atoms/sidebar-story/sidebar.stories.tsx",
      "content": "import React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport {\n  Calendar,\n  ChevronDown,\n  ChevronRight,\n  Home,\n  Inbox,\n  MoreHorizontal,\n  Plus,\n  Search,\n  Settings,\n  User2,\n} from \"lucide-react\";\n\n// Menu items from official docs\nconst items = [\n  {\n    title: \"Home\",\n    url: \"#\",\n    icon: Home,\n  },\n  {\n    title: \"Inbox\",\n    url: \"#\",\n    icon: Inbox,\n  },\n  {\n    title: \"Calendar\",\n    url: \"#\",\n    icon: Calendar,\n  },\n  {\n    title: \"Search\",\n    url: \"#\",\n    icon: Search,\n  },\n  {\n    title: \"Settings\",\n    url: \"#\",\n    icon: Settings,\n  },\n];\n\n/**\n * A composable, themeable and customizable sidebar component.\n */\nconst meta = {\n  title: \"ui/Sidebar\",\n  component: Sidebar,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"fullscreen\",\n  },\n} satisfies Meta<typeof Sidebar>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Basic sidebar example from official docs.\n */\nexport const BasicStructure: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Sidebar with header dropdown from official docs.\n */\nexport const WithHeaderDropdown: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    Select Workspace\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Acme Inc</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Acme Corp.</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Sidebar with footer dropdown from official docs.\n */\nexport const WithFooterDropdown: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    <User2 /> Username\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Account</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Billing</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Sign out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Collapsible sidebar group from official docs.\n */\nexport const CollapsibleGroup: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <Collapsible defaultOpen className=\"group/collapsible\">\n            <SidebarGroup>\n              <SidebarGroupLabel asChild>\n                <CollapsibleTrigger>\n                  Help\n                  <ChevronDown className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\" />\n                </CollapsibleTrigger>\n              </SidebarGroupLabel>\n              <CollapsibleContent>\n                <SidebarGroupContent>\n                  <SidebarMenu>\n                    {items.map((item) => (\n                      <SidebarMenuItem key={item.title}>\n                        <SidebarMenuButton asChild>\n                          <a href={item.url}>\n                            <item.icon />\n                            <span>{item.title}</span>\n                          </a>\n                        </SidebarMenuButton>\n                      </SidebarMenuItem>\n                    ))}\n                  </SidebarMenu>\n                </SidebarGroupContent>\n              </CollapsibleContent>\n            </SidebarGroup>\n          </Collapsible>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Sidebar with menu action from official docs.\n */\nexport const WithMenuAction: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                    <SidebarMenuAction>\n                      <MoreHorizontal />\n                    </SidebarMenuAction>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Sidebar with menu badge from official docs.\n */\nexport const WithMenuBadge: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item, index) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                    {index === 1 && <SidebarMenuBadge>24</SidebarMenuBadge>}\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Sidebar with submenu from official docs.\n */\nexport const WithSubmenu: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild>\n                    <a href=\"#\">\n                      <Home />\n                      <span>Home</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n                <Collapsible defaultOpen>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton asChild>\n                      <CollapsibleTrigger>\n                        <Settings />\n                        <span>Settings</span>\n                        <ChevronRight className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-90\" />\n                      </CollapsibleTrigger>\n                    </SidebarMenuButton>\n                    <CollapsibleContent>\n                      <SidebarMenuSub>\n                        <SidebarMenuSubItem>\n                          <SidebarMenuSubButton asChild>\n                            <a href=\"#\">General</a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                        <SidebarMenuSubItem>\n                          <SidebarMenuSubButton asChild>\n                            <a href=\"#\">Team</a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                        <SidebarMenuSubItem>\n                          <SidebarMenuSubButton asChild>\n                            <a href=\"#\">Billing</a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                      </SidebarMenuSub>\n                    </CollapsibleContent>\n                  </SidebarMenuItem>\n                </Collapsible>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Controlled sidebar from official docs.\n */\nexport const Controlled: Story = {\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n      <SidebarProvider open={open} onOpenChange={setOpen}>\n        <Sidebar>\n          <SidebarContent>\n            <SidebarGroup>\n              <SidebarGroupLabel>Application</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {items.map((item) => (\n                    <SidebarMenuItem key={item.title}>\n                      <SidebarMenuButton asChild>\n                        <a href={item.url}>\n                          <item.icon />\n                          <span>{item.title}</span>\n                        </a>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n        </Sidebar>\n        <main className=\"flex flex-1 flex-col gap-4 p-4\">\n          <div className=\"flex items-center gap-4\">\n            <SidebarTrigger />\n            <span>Sidebar is {open ? \"open\" : \"closed\"}</span>\n          </div>\n        </main>\n      </SidebarProvider>\n    );\n  },\n};\n\n/**\n * Sidebar with rail from official docs.\n */\nexport const WithRail: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n        <SidebarRail />\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n};\n\n/**\n * Full sidebar example with all features from official docs.\n */\nexport const FullExample: Story = {\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    Select Workspace\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Acme Inc</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Acme Corp.</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupAction>\n              <Plus /> <span className=\"sr-only\">Add Project</span>\n            </SidebarGroupAction>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    <User2 /> Username\n                    <ChevronDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"right\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Account</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Billing</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Sign out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n        <SidebarRail />\n      </Sidebar>\n      <SidebarInset>\n        <header className=\"flex h-16 shrink-0 items-center gap-2 border-b px-4\">\n          <SidebarTrigger className=\"-ml-1\" />\n          <div className=\"flex-1\">\n            <h1 className=\"text-xl font-semibold\">Application</h1>\n          </div>\n        </header>\n        <main className=\"flex-1 p-4\">\n          <p className=\"text-muted-foreground\">\n            This is a full example with header, footer, groups, and rail.\n          </p>\n        </main>\n      </SidebarInset>\n    </SidebarProvider>\n  ),\n};\n\nexport const ShouldToggleSidebar: Story = {\n  name: \"when sidebar trigger is clicked, should toggle sidebar visibility\",\n  tags: [\"!dev\", \"!autodocs\"],\n  render: () => (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Application</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <a href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n      <main>\n        <SidebarTrigger />\n      </main>\n    </SidebarProvider>\n  ),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Sidebar Trigger 버튼이 존재하고 클릭 가능한지, 메뉴 아이템들이 올바르게 렌더링되는지 확인\n    const triggerButton = canvas.getByRole(\"button\", {\n      name: /toggle sidebar/i,\n    });\n    await expect(triggerButton).toBeInTheDocument();\n\n    // 메뉴 아이템들이 존재하는지 확인\n    const homeLink = canvas.getByRole(\"link\", { name: /home/i });\n    const inboxLink = canvas.getByRole(\"link\", { name: /inbox/i });\n    const calendarLink = canvas.getByRole(\"link\", { name: /calendar/i });\n\n    await expect(homeLink).toBeInTheDocument();\n    await expect(inboxLink).toBeInTheDocument();\n    await expect(calendarLink).toBeInTheDocument();\n\n    // Trigger 버튼 클릭\n    await userEvent.click(triggerButton);\n\n    // 메뉴 아이템 클릭 가능 확인\n    await userEvent.click(homeLink);\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "sidebar",
    "navigation"
  ]
}