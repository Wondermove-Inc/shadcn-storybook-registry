{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-story",
  "type": "registry:component",
  "title": "Card Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating card component usage and variants",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/atoms/card-story/card.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\nimport { useRef } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardAction,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { expect, userEvent, within } from \"storybook/test\";\n\nexport function CardDemo() {\n  return (\n    <Card className=\"w-full max-w-sm\">\n      <CardHeader>\n        <CardTitle>Login to your account</CardTitle>\n        <CardDescription>\n          Enter your email below to login to your account\n        </CardDescription>\n        <CardAction>\n          <Button variant=\"link\">Sign Up</Button>\n        </CardAction>\n      </CardHeader>\n      <CardContent>\n        <form>\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                required\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <div className=\"flex items-center\">\n                <Label htmlFor=\"password\">Password</Label>\n                <a\n                  href=\"#\"\n                  className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n                >\n                  Forgot your password?\n                </a>\n              </div>\n              <Input id=\"password\" type=\"password\" required />\n            </div>\n          </div>\n        </form>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2\">\n        <Button type=\"submit\" className=\"w-full\">\n          Login\n        </Button>\n        <Button variant=\"outline\" className=\"w-full\">\n          Login with Google\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n\n/**\n * Displays a card with header, content, and footer.\n */\nconst meta = {\n  title: \"ui/Card\",\n  component: Card,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  excludeStories: /.*Demo$/,\n} satisfies Meta<typeof Card>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * 기본 Card 컴포넌트입니다. Header, Content, Footer로 구성되어 정보를 그룹화하며,\n * 로그인 폼 예제처럼 관련 콘텐츠를 하나의 시각적 단위로 묶습니다. 대시보드나 목록 UI에 적합합니다.\n */\nexport const Default: Story = {\n  render: () => <CardDemo />,\n};\n\n/**\n * Ref 사용 예제: Card에 ref를 전달하여 DOM 요소에 직접 접근합니다.\n * 이 예제는 ref를 통한 scrollIntoView 제어를 보여줍니다.\n */\nexport const WithRef: Story = {\n  parameters: {\n    layout: \"padded\",\n  },\n  render: () => {\n    // 🎯 목적: HTMLDivElement에 대한 ref를 생성하여 scrollIntoView() 메서드 접근\n    const card1Ref = useRef<HTMLDivElement>(null);\n    const card2Ref = useRef<HTMLDivElement>(null);\n    const card3Ref = useRef<HTMLDivElement>(null);\n\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"bg-background/95 sticky top-0 z-10 flex gap-2 rounded-md border p-2 backdrop-blur\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() =>\n              card1Ref.current?.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n              })\n            }\n          >\n            Scroll to Card 1\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() =>\n              card2Ref.current?.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n              })\n            }\n          >\n            Scroll to Card 2\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() =>\n              card3Ref.current?.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n              })\n            }\n          >\n            Scroll to Card 3\n          </Button>\n        </div>\n\n        <Card ref={card1Ref} className=\"w-full max-w-sm scroll-mt-20\">\n          <CardHeader>\n            <CardTitle>Card 1</CardTitle>\n            <CardDescription>First card in the list</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm\">\n              This is the first card that can be scrolled to using ref.\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"h-96\" />\n\n        <Card ref={card2Ref} className=\"w-full max-w-sm scroll-mt-20\">\n          <CardHeader>\n            <CardTitle>Card 2</CardTitle>\n            <CardDescription>Second card in the list</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm\">\n              This is the second card that can be scrolled to using ref.\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"h-96\" />\n\n        <Card ref={card3Ref} className=\"w-full max-w-sm scroll-mt-20\">\n          <CardHeader>\n            <CardTitle>Card 3</CardTitle>\n            <CardDescription>Third card in the list</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm\">\n              This is the third card that can be scrolled to using ref.\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"h-96\" />\n      </div>\n    );\n  },\n  play: async ({ canvasElement }) => {\n    // 🎯 목적: play function을 통해 ref 동작을 자동으로 테스트\n    const canvas = within(canvasElement);\n    const button2 = canvas.getByRole(\"button\", { name: \"Scroll to Card 2\" });\n\n    // \"Scroll to Card 2\" 버튼 클릭하여 스크롤 트리거\n    await userEvent.click(button2);\n\n    // Card 2가 뷰포트에 표시되는지 확인\n    const card2 = canvas.getByText(\"Card 2\");\n    await expect(card2).toBeVisible();\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "card",
    "container"
  ]
}