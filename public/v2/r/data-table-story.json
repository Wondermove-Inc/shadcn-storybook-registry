{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-story",
  "type": "registry:component",
  "title": "Data Table Story",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "Interactive Storybook stories demonstrating data table component usage with sorting, filtering, and pagination",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "button",
    "checkbox",
    "dropdown-menu",
    "input"
  ],
  "files": [
    {
      "path": "src/registry/atoms/data-table-story/data-table.stories.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable,\n  VisibilityState,\n} from \"@tanstack/react-table\";\nimport { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\nimport { expect, userEvent, waitFor, within } from \"storybook/test\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\n// 🎯 목적: 결제 데이터 타입 정의 - 테이블에 표시될 데이터 구조\ntype Payment = {\n  id: string; // 결제 고유 ID\n  amount: number; // 결제 금액 (USD)\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"; // 결제 상태\n  email: string; // 사용자 이메일\n};\n\n// 🎯 목적: 테스트용 결제 데이터 - 다양한 상태와 금액을 포함한 샘플 데이터\nconst data: Payment[] = [\n  {\n    id: \"m5gr84i9\",\n    amount: 316,\n    status: \"success\",\n    email: \"ken99@example.com\",\n  },\n  {\n    id: \"3u1reuv4\",\n    amount: 242,\n    status: \"success\",\n    email: \"Abe45@example.com\",\n  },\n  {\n    id: \"derv1ws0\",\n    amount: 837,\n    status: \"processing\",\n    email: \"Monserrat44@example.com\",\n  },\n  {\n    id: \"5kma53ae\",\n    amount: 874,\n    status: \"success\",\n    email: \"Silas22@example.com\",\n  },\n  {\n    id: \"bhqecj4p\",\n    amount: 721,\n    status: \"failed\",\n    email: \"carmella@example.com\",\n  },\n];\n\n// 🎯 목적: TanStack Table 컬럼 정의 - 각 컬럼의 헤더, 셀 렌더링, 정렬/필터 설정\nconst columns: ColumnDef<Payment>[] = [\n  {\n    // 행 선택용 체크박스 컬럼\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        // 모든 페이지 행이 선택되었는지 또는 일부만 선택되었는지 확인\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false, // 체크박스 컬럼은 정렬 불가\n    enableHiding: false, // 체크박스 컬럼은 숨김 불가\n  },\n  {\n    // 결제 상태 컬럼 (pending, processing, success, failed)\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => (\n      <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n    ),\n  },\n  {\n    // 이메일 컬럼 - 정렬 기능이 포함된 헤더 버튼\n    accessorKey: \"email\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n    cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n  },\n  {\n    // 금액 컬럼 - 통화 형식으로 포맷팅\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"amount\"));\n\n      // 달러 통화 형식으로 포맷팅\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n\n      return <div className=\"text-right font-medium\">{formatted}</div>;\n    },\n  },\n  {\n    // 행별 액션 메뉴 컬럼\n    id: \"actions\",\n    enableHiding: false, // 액션 컬럼은 항상 표시\n    cell: ({ row }) => {\n      const payment = row.original;\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n  },\n];\n\nfunction DataTableDemo() {\n  // 🎯 목적: 테이블 정렬 상태 관리 (컬럼별 오름차순/내림차순)\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  // 🎯 목적: 컬럼별 필터 상태 관리 (이메일 검색 등)\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    [],\n  );\n  // 🎯 목적: 컬럼 표시/숨김 상태 관리\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  // 🎯 목적: 행 선택 상태 관리 (체크박스 선택된 행들)\n  const [rowSelection, setRowSelection] = React.useState({});\n\n  // 🎯 목적: TanStack Table 인스턴스 생성 - 모든 테이블 기능을 통합 관리\n  const table = useReactTable({\n    data, // 표시할 데이터 배열\n    columns, // 컬럼 정의 배열\n    onSortingChange: setSorting, // 정렬 상태 변경 핸들러\n    onColumnFiltersChange: setColumnFilters, // 컬럼 필터 상태 변경 핸들러\n    getCoreRowModel: getCoreRowModel(), // 기본 행 모델 (필수)\n    getPaginationRowModel: getPaginationRowModel(), // 페이지네이션 기능\n    getSortedRowModel: getSortedRowModel(), // 정렬 기능\n    getFilteredRowModel: getFilteredRowModel(), // 필터링 기능\n    onColumnVisibilityChange: setColumnVisibility, // 컬럼 표시/숨김 상태 변경 핸들러\n    onRowSelectionChange: setRowSelection, // 행 선택 상태 변경 핸들러\n    state: {\n      // 현재 테이블 상태 객체\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  });\n\n  return (\n    <div className=\"w-full\">\n      {/* 테이블 상단 컨트롤 영역: 필터링 입력과 컬럼 표시/숨김 메뉴 */}\n      <div className=\"flex items-center py-4\">\n        {/* 이메일 필터링 입력 필드 */}\n        <Input\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        {/* 컬럼 표시/숨김 드롭다운 메뉴 */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter((column) => column.getCanHide()) // 숨길 수 있는 컬럼만 필터링\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      {/* 테이블 본체 영역 */}\n      <div className=\"rounded-md border\">\n        <Table>\n          {/* 테이블 헤더 */}\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext(),\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          {/* 테이블 바디 */}\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              // 데이터가 있는 경우: 각 행을 렌더링\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"} // 선택된 행 표시\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext(),\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              // 데이터가 없는 경우: \"No results\" 메시지 표시\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      {/* 테이블 하단: 선택된 행 수와 페이지네이션 컨트롤 */}\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        {/* 선택된 행 수 표시 */}\n        <div className=\"text-muted-foreground flex-1 text-sm\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        {/* 페이지네이션 버튼 */}\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * A powerful data table component with sorting, filtering, and pagination.\n * Built using TanStack Table and shadcn/ui components.\n *\n * This component demonstrates the integration of TanStack Table with shadcn/ui\n * to create feature-rich data tables that include:\n * - Column sorting with visual indicators\n * - Email filtering with real-time search\n * - Row selection with bulk operations\n * - Column visibility toggles\n * - Responsive pagination controls\n * - Accessible keyboard navigation\n * - Action menus for row-specific operations\n *\n * The implementation follows shadcn/ui patterns and is fully compatible\n * with the shadcn CLI for easy installation in projects.\n */\nconst meta = {\n  title: \"ui/DataTable\",\n  component: DataTableDemo,\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n    docs: {\n      description: {\n        component: `\nA comprehensive data table implementation using TanStack Table and shadcn/ui components.\n\n## Features\n\n- **Sorting**: Click column headers to sort data ascending/descending\n- **Filtering**: Real-time email filtering with search input\n- **Selection**: Individual row selection with bulk operations\n- **Pagination**: Navigate through data with Previous/Next controls\n- **Column Visibility**: Toggle column visibility via dropdown menu\n- **Actions**: Row-specific actions via dropdown menus\n- **Responsive**: Adapts to different screen sizes\n- **Accessible**: Full keyboard navigation and screen reader support\n\n## Installation\n\n\\`\\`\\`bash\nnpx shadcn@latest add data-table-story\n\\`\\`\\`\n\nThis will install the data table component along with all required dependencies including \\`@tanstack/react-table\\`.\n\n## Usage\n\n\\`\\`\\`tsx\nimport { DataTable } from \"@/components/data-table\"\nimport { columns } from \"@/components/data-table/columns\"\n\nconst data = [\n  // your data array\n]\n\nexport function DataTableDemo() {\n  return <DataTable columns={columns} data={data} />\n}\n\\`\\`\\`\n\n## Dependencies\n\n- \\`@tanstack/react-table\\` - Headless table library\n- \\`lucide-react\\` - Icons\n- All standard shadcn/ui components (table, button, checkbox, etc.)\n        `,\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"w-[800px]\">\n        <Story />\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof DataTableDemo>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default data table with all features enabled.\n *\n * This story demonstrates the complete data table implementation with:\n * - **Column Sorting**: Click on the \"Email\" header to sort alphabetically\n * - **Row Selection**: Use checkboxes to select individual rows or all rows\n * - **Email Filtering**: Type in the search input to filter by email address\n * - **Column Visibility**: Use the \"Columns\" dropdown to show/hide columns\n * - **Pagination**: Navigate between pages using Previous/Next buttons\n * - **Actions Menu**: Click the three-dot menu to access row actions\n *\n * The table includes sample payment data with different statuses to showcase\n * various UI states and interactions.\n */\nexport const Default: Story = {};\n\n/**\n * Interactive test story demonstrating email filtering functionality.\n *\n * This story automatically types \"ken99\" into the filter input and verifies\n * that the table correctly filters to show only matching results.\n * Used for automated testing of the filtering feature.\n */\nexport const ShouldFilterTable: Story = {\n  name: \"when filtering by email, should display filtered rows\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Email 필터 입력 시 테이블이 필터링되는지 확인\n    const filterInput = canvas.getByPlaceholderText(\"Filter emails...\");\n    await userEvent.type(filterInput, \"ken99\");\n\n    await waitFor(\n      () => {\n        // 필터링 후 1개 행만 표시되어야 함 (ken99@example.com)\n        const email = canvas.getByText(\"ken99@example.com\");\n        expect(email).toBeInTheDocument();\n      },\n      { timeout: 3000 },\n    );\n  },\n};\n\n/**\n * Interactive test story demonstrating column sorting functionality.\n *\n * This story automatically clicks the \"Email\" column header to trigger sorting\n * and verifies that the sort functionality works correctly with visual feedback.\n * Used for automated testing of the sorting feature.\n */\nexport const ShouldSortTable: Story = {\n  name: \"when clicking sort button, should sort table\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: Email 컬럼 정렬 버튼 클릭 시 테이블이 정렬되는지 확인\n    const emailSortButton = canvas.getByRole(\"button\", { name: /email/i });\n    await userEvent.click(emailSortButton);\n\n    await waitFor(\n      () => {\n        // 정렬 버튼에 정렬 아이콘이 표시되어야 함\n        expect(emailSortButton).toBeInTheDocument();\n      },\n      { timeout: 2000 },\n    );\n  },\n};\n\n/**\n * Interactive test story demonstrating row selection functionality.\n *\n * This story automatically clicks a row checkbox to select it and verifies\n * that the selection state updates correctly, including the selection count display.\n * Used for automated testing of the row selection feature.\n */\nexport const ShouldSelectRows: Story = {\n  name: \"when selecting rows, should update selection count\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: 첫 번째 행 체크박스 선택\n    const checkboxes = canvas.getAllByRole(\"checkbox\");\n    const firstRowCheckbox = checkboxes[1]; // 0은 헤더 체크박스\n    await userEvent.click(firstRowCheckbox);\n\n    await waitFor(\n      () => {\n        // 선택된 행 수가 업데이트되어야 함\n        const selectionText = canvas.getByText(/1 of \\d+ row\\(s\\) selected/);\n        expect(selectionText).toBeInTheDocument();\n      },\n      { timeout: 2000 },\n    );\n  },\n};\n\n/**\n * Interactive test story demonstrating column visibility toggle functionality.\n *\n * This story automatically clicks the \"Columns\" dropdown button to open the\n * column visibility menu and verifies that column options are displayed correctly.\n * Used for automated testing of the column visibility feature.\n */\nexport const ShouldToggleColumns: Story = {\n  name: \"when toggling column visibility, should hide/show columns\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 🎯 목적: 컬럼 토글 메뉴 열기\n    const columnsButton = canvas.getByRole(\"button\", { name: /columns/i });\n    await userEvent.click(columnsButton);\n\n    await waitFor(\n      () => {\n        // 컬럼 토글 옵션이 표시되어야 함\n        const statusOption = canvas.getByText(\"status\");\n        expect(statusOption).toBeInTheDocument();\n      },\n      { timeout: 2000 },\n    );\n  },\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "atoms",
    "storybook",
    "table",
    "data"
  ]
}